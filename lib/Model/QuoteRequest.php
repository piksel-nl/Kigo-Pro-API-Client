<?php
/**
 * QuoteRequest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\KigoPro\Model;

use \ArrayAccess;
use \Piksel\KigoPro\ObjectSerializer;

/**
 * QuoteRequest Class Doc Comment
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class QuoteRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'QuoteRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'listing_id' => 'int',
        'check_in_date' => '\DateTime',
        'check_out_date' => '\DateTime',
        'coupon_code' => 'string',
        'num_adults' => 'int',
        'num_children' => 'int',
        'compute_default_plan_only' => 'bool',
        'requested_optional_fees' => '\Piksel\KigoPro\Model\OptionalFee[]',
        'lead_guid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'listing_id' => 'int32',
        'check_in_date' => 'date',
        'check_out_date' => 'date',
        'coupon_code' => null,
        'num_adults' => 'int32',
        'num_children' => 'int32',
        'compute_default_plan_only' => null,
        'requested_optional_fees' => null,
        'lead_guid' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'listing_id' => 'listingID',
        'check_in_date' => 'checkInDate',
        'check_out_date' => 'checkOutDate',
        'coupon_code' => 'couponCode',
        'num_adults' => 'numAdults',
        'num_children' => 'numChildren',
        'compute_default_plan_only' => 'computeDefaultPlanOnly',
        'requested_optional_fees' => 'requestedOptionalFees',
        'lead_guid' => 'leadGuid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'listing_id' => 'setListingId',
        'check_in_date' => 'setCheckInDate',
        'check_out_date' => 'setCheckOutDate',
        'coupon_code' => 'setCouponCode',
        'num_adults' => 'setNumAdults',
        'num_children' => 'setNumChildren',
        'compute_default_plan_only' => 'setComputeDefaultPlanOnly',
        'requested_optional_fees' => 'setRequestedOptionalFees',
        'lead_guid' => 'setLeadGuid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'listing_id' => 'getListingId',
        'check_in_date' => 'getCheckInDate',
        'check_out_date' => 'getCheckOutDate',
        'coupon_code' => 'getCouponCode',
        'num_adults' => 'getNumAdults',
        'num_children' => 'getNumChildren',
        'compute_default_plan_only' => 'getComputeDefaultPlanOnly',
        'requested_optional_fees' => 'getRequestedOptionalFees',
        'lead_guid' => 'getLeadGuid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['listing_id'] = $data['listing_id'] ?? null;
        $this->container['check_in_date'] = $data['check_in_date'] ?? null;
        $this->container['check_out_date'] = $data['check_out_date'] ?? null;
        $this->container['coupon_code'] = $data['coupon_code'] ?? null;
        $this->container['num_adults'] = $data['num_adults'] ?? null;
        $this->container['num_children'] = $data['num_children'] ?? null;
        $this->container['compute_default_plan_only'] = $data['compute_default_plan_only'] ?? null;
        $this->container['requested_optional_fees'] = $data['requested_optional_fees'] ?? null;
        $this->container['lead_guid'] = $data['lead_guid'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['listing_id'] === null) {
            $invalidProperties[] = "'listing_id' can't be null";
        }
        if ($this->container['check_in_date'] === null) {
            $invalidProperties[] = "'check_in_date' can't be null";
        }
        if ($this->container['check_out_date'] === null) {
            $invalidProperties[] = "'check_out_date' can't be null";
        }
        if ($this->container['num_adults'] === null) {
            $invalidProperties[] = "'num_adults' can't be null";
        }
        if (($this->container['num_adults'] > 99)) {
            $invalidProperties[] = "invalid value for 'num_adults', must be smaller than or equal to 99.";
        }

        if (($this->container['num_adults'] < 1)) {
            $invalidProperties[] = "invalid value for 'num_adults', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['num_children']) && ($this->container['num_children'] > 99)) {
            $invalidProperties[] = "invalid value for 'num_children', must be smaller than or equal to 99.";
        }

        if (!is_null($this->container['num_children']) && ($this->container['num_children'] < 0)) {
            $invalidProperties[] = "invalid value for 'num_children', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets listing_id
     *
     * @return int
     */
    public function getListingId()
    {
        return $this->container['listing_id'];
    }

    /**
     * Sets listing_id
     *
     * @param int $listing_id Listing ID
     *
     * @return self
     */
    public function setListingId($listing_id)
    {
        $this->container['listing_id'] = $listing_id;

        return $this;
    }

    /**
     * Gets check_in_date
     *
     * @return \DateTime
     */
    public function getCheckInDate()
    {
        return $this->container['check_in_date'];
    }

    /**
     * Sets check_in_date
     *
     * @param \DateTime $check_in_date Check-In Date
     *
     * @return self
     */
    public function setCheckInDate($check_in_date)
    {
        $this->container['check_in_date'] = $check_in_date;

        return $this;
    }

    /**
     * Gets check_out_date
     *
     * @return \DateTime
     */
    public function getCheckOutDate()
    {
        return $this->container['check_out_date'];
    }

    /**
     * Sets check_out_date
     *
     * @param \DateTime $check_out_date Check-Out Date
     *
     * @return self
     */
    public function setCheckOutDate($check_out_date)
    {
        $this->container['check_out_date'] = $check_out_date;

        return $this;
    }

    /**
     * Gets coupon_code
     *
     * @return string|null
     */
    public function getCouponCode()
    {
        return $this->container['coupon_code'];
    }

    /**
     * Sets coupon_code
     *
     * @param string|null $coupon_code Coupon code of the promotion
     *
     * @return self
     */
    public function setCouponCode($coupon_code)
    {
        $this->container['coupon_code'] = $coupon_code;

        return $this;
    }

    /**
     * Gets num_adults
     *
     * @return int
     */
    public function getNumAdults()
    {
        return $this->container['num_adults'];
    }

    /**
     * Sets num_adults
     *
     * @param int $num_adults Number of Adults
     *
     * @return self
     */
    public function setNumAdults($num_adults)
    {

        if (($num_adults > 99)) {
            throw new \InvalidArgumentException('invalid value for $num_adults when calling QuoteRequest., must be smaller than or equal to 99.');
        }
        if (($num_adults < 1)) {
            throw new \InvalidArgumentException('invalid value for $num_adults when calling QuoteRequest., must be bigger than or equal to 1.');
        }

        $this->container['num_adults'] = $num_adults;

        return $this;
    }

    /**
     * Gets num_children
     *
     * @return int|null
     */
    public function getNumChildren()
    {
        return $this->container['num_children'];
    }

    /**
     * Sets num_children
     *
     * @param int|null $num_children Number of Children
     *
     * @return self
     */
    public function setNumChildren($num_children)
    {

        if (!is_null($num_children) && ($num_children > 99)) {
            throw new \InvalidArgumentException('invalid value for $num_children when calling QuoteRequest., must be smaller than or equal to 99.');
        }
        if (!is_null($num_children) && ($num_children < 0)) {
            throw new \InvalidArgumentException('invalid value for $num_children when calling QuoteRequest., must be bigger than or equal to 0.');
        }

        $this->container['num_children'] = $num_children;

        return $this;
    }

    /**
     * Gets compute_default_plan_only
     *
     * @return bool|null
     */
    public function getComputeDefaultPlanOnly()
    {
        return $this->container['compute_default_plan_only'];
    }

    /**
     * Sets compute_default_plan_only
     *
     * @param bool|null $compute_default_plan_only Whether all plans or just the default one should be given (optional, defaults to false)
     *
     * @return self
     */
    public function setComputeDefaultPlanOnly($compute_default_plan_only)
    {
        $this->container['compute_default_plan_only'] = $compute_default_plan_only;

        return $this;
    }

    /**
     * Gets requested_optional_fees
     *
     * @return \Piksel\KigoPro\Model\OptionalFee[]|null
     */
    public function getRequestedOptionalFees()
    {
        return $this->container['requested_optional_fees'];
    }

    /**
     * Sets requested_optional_fees
     *
     * @param \Piksel\KigoPro\Model\OptionalFee[]|null $requested_optional_fees The optional fee(s) that you want to consider in the quote
     *
     * @return self
     */
    public function setRequestedOptionalFees($requested_optional_fees)
    {
        $this->container['requested_optional_fees'] = $requested_optional_fees;

        return $this;
    }

    /**
     * Gets lead_guid
     *
     * @return string|null
     */
    public function getLeadGuid()
    {
        return $this->container['lead_guid'];
    }

    /**
     * Sets lead_guid
     *
     * @param string|null $lead_guid Optional Lead (Guid) reference
     *
     * @return self
     */
    public function setLeadGuid($lead_guid)
    {
        $this->container['lead_guid'] = $lead_guid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


