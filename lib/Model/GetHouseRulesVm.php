<?php
/**
 * GetHouseRulesVm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\KigoPro\Model;

use \ArrayAccess;
use \Piksel\KigoPro\ObjectSerializer;

/**
 * GetHouseRulesVm Class Doc Comment
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 */
class GetHouseRulesVm implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetHouseRulesVm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'smoking_allowed' => 'bool',
        'kids_allowed' => 'bool',
        'family_friendly' => 'bool',
        'pets_allowed' => 'bool',
        'parties_and_events_allowed' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'smoking_allowed' => null,
        'kids_allowed' => null,
        'family_friendly' => null,
        'pets_allowed' => null,
        'parties_and_events_allowed' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'smoking_allowed' => 'smokingAllowed',
        'kids_allowed' => 'kidsAllowed',
        'family_friendly' => 'familyFriendly',
        'pets_allowed' => 'petsAllowed',
        'parties_and_events_allowed' => 'partiesAndEventsAllowed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'smoking_allowed' => 'setSmokingAllowed',
        'kids_allowed' => 'setKidsAllowed',
        'family_friendly' => 'setFamilyFriendly',
        'pets_allowed' => 'setPetsAllowed',
        'parties_and_events_allowed' => 'setPartiesAndEventsAllowed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'smoking_allowed' => 'getSmokingAllowed',
        'kids_allowed' => 'getKidsAllowed',
        'family_friendly' => 'getFamilyFriendly',
        'pets_allowed' => 'getPetsAllowed',
        'parties_and_events_allowed' => 'getPartiesAndEventsAllowed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['smoking_allowed'] = isset($data['smoking_allowed']) ? $data['smoking_allowed'] : null;
        $this->container['kids_allowed'] = isset($data['kids_allowed']) ? $data['kids_allowed'] : null;
        $this->container['family_friendly'] = isset($data['family_friendly']) ? $data['family_friendly'] : null;
        $this->container['pets_allowed'] = isset($data['pets_allowed']) ? $data['pets_allowed'] : null;
        $this->container['parties_and_events_allowed'] = isset($data['parties_and_events_allowed']) ? $data['parties_and_events_allowed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets smoking_allowed
     *
     * @return bool|null
     */
    public function getSmokingAllowed()
    {
        return $this->container['smoking_allowed'];
    }

    /**
     * Sets smoking_allowed
     *
     * @param bool|null $smoking_allowed smoking_allowed
     *
     * @return $this
     */
    public function setSmokingAllowed($smoking_allowed)
    {
        $this->container['smoking_allowed'] = $smoking_allowed;

        return $this;
    }

    /**
     * Gets kids_allowed
     *
     * @return bool|null
     */
    public function getKidsAllowed()
    {
        return $this->container['kids_allowed'];
    }

    /**
     * Sets kids_allowed
     *
     * @param bool|null $kids_allowed kids_allowed
     *
     * @return $this
     */
    public function setKidsAllowed($kids_allowed)
    {
        $this->container['kids_allowed'] = $kids_allowed;

        return $this;
    }

    /**
     * Gets family_friendly
     *
     * @return bool|null
     */
    public function getFamilyFriendly()
    {
        return $this->container['family_friendly'];
    }

    /**
     * Sets family_friendly
     *
     * @param bool|null $family_friendly family_friendly
     *
     * @return $this
     */
    public function setFamilyFriendly($family_friendly)
    {
        $this->container['family_friendly'] = $family_friendly;

        return $this;
    }

    /**
     * Gets pets_allowed
     *
     * @return bool|null
     */
    public function getPetsAllowed()
    {
        return $this->container['pets_allowed'];
    }

    /**
     * Sets pets_allowed
     *
     * @param bool|null $pets_allowed pets_allowed
     *
     * @return $this
     */
    public function setPetsAllowed($pets_allowed)
    {
        $this->container['pets_allowed'] = $pets_allowed;

        return $this;
    }

    /**
     * Gets parties_and_events_allowed
     *
     * @return bool|null
     */
    public function getPartiesAndEventsAllowed()
    {
        return $this->container['parties_and_events_allowed'];
    }

    /**
     * Sets parties_and_events_allowed
     *
     * @param bool|null $parties_and_events_allowed parties_and_events_allowed
     *
     * @return $this
     */
    public function setPartiesAndEventsAllowed($parties_and_events_allowed)
    {
        $this->container['parties_and_events_allowed'] = $parties_and_events_allowed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


