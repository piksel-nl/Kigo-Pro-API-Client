<?php
/**
 * PostBookingFromQuoteRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\KigoPro\Model;

use \ArrayAccess;
use \Piksel\KigoPro\ObjectSerializer;

/**
 * PostBookingFromQuoteRequest Class Doc Comment
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 */
class PostBookingFromQuoteRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PostBookingFromQuoteRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'listing_id' => 'int',
        'payment_plan_guid' => 'string',
        'renter' => '\Piksel\KigoPro\Model\PostPersonRequest',
        'credit_card' => '\Piksel\KigoPro\Model\CreditCard',
        'external_booking_id' => 'string',
        'notes' => 'string',
        'special_needs' => 'string',
        'point_of_sale_code' => 'string',
        'payment_collection_mode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'listing_id' => 'int32',
        'payment_plan_guid' => 'uuid',
        'renter' => null,
        'credit_card' => null,
        'external_booking_id' => null,
        'notes' => null,
        'special_needs' => null,
        'point_of_sale_code' => null,
        'payment_collection_mode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'listing_id' => 'listingID',
        'payment_plan_guid' => 'paymentPlanGuid',
        'renter' => 'renter',
        'credit_card' => 'creditCard',
        'external_booking_id' => 'externalBookingID',
        'notes' => 'notes',
        'special_needs' => 'specialNeeds',
        'point_of_sale_code' => 'pointOfSaleCode',
        'payment_collection_mode' => 'paymentCollectionMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'listing_id' => 'setListingId',
        'payment_plan_guid' => 'setPaymentPlanGuid',
        'renter' => 'setRenter',
        'credit_card' => 'setCreditCard',
        'external_booking_id' => 'setExternalBookingId',
        'notes' => 'setNotes',
        'special_needs' => 'setSpecialNeeds',
        'point_of_sale_code' => 'setPointOfSaleCode',
        'payment_collection_mode' => 'setPaymentCollectionMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'listing_id' => 'getListingId',
        'payment_plan_guid' => 'getPaymentPlanGuid',
        'renter' => 'getRenter',
        'credit_card' => 'getCreditCard',
        'external_booking_id' => 'getExternalBookingId',
        'notes' => 'getNotes',
        'special_needs' => 'getSpecialNeeds',
        'point_of_sale_code' => 'getPointOfSaleCode',
        'payment_collection_mode' => 'getPaymentCollectionMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PAYMENT_COLLECTION_MODE_PMC_COLLECT = 'PmcCollect';
    const PAYMENT_COLLECTION_MODE_VIRTUAL_CC = 'VirtualCc';
    const PAYMENT_COLLECTION_MODE_CHANNEL_COLLECT = 'ChannelCollect';
    const PAYMENT_COLLECTION_MODE_PMC_OFFLINE_COLLECT = 'PmcOfflineCollect';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentCollectionModeAllowableValues()
    {
        return [
            self::PAYMENT_COLLECTION_MODE_PMC_COLLECT,
            self::PAYMENT_COLLECTION_MODE_VIRTUAL_CC,
            self::PAYMENT_COLLECTION_MODE_CHANNEL_COLLECT,
            self::PAYMENT_COLLECTION_MODE_PMC_OFFLINE_COLLECT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['listing_id'] = isset($data['listing_id']) ? $data['listing_id'] : null;
        $this->container['payment_plan_guid'] = isset($data['payment_plan_guid']) ? $data['payment_plan_guid'] : null;
        $this->container['renter'] = isset($data['renter']) ? $data['renter'] : null;
        $this->container['credit_card'] = isset($data['credit_card']) ? $data['credit_card'] : null;
        $this->container['external_booking_id'] = isset($data['external_booking_id']) ? $data['external_booking_id'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['special_needs'] = isset($data['special_needs']) ? $data['special_needs'] : null;
        $this->container['point_of_sale_code'] = isset($data['point_of_sale_code']) ? $data['point_of_sale_code'] : null;
        $this->container['payment_collection_mode'] = isset($data['payment_collection_mode']) ? $data['payment_collection_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['listing_id'] === null) {
            $invalidProperties[] = "'listing_id' can't be null";
        }
        if ($this->container['payment_plan_guid'] === null) {
            $invalidProperties[] = "'payment_plan_guid' can't be null";
        }
        if ($this->container['renter'] === null) {
            $invalidProperties[] = "'renter' can't be null";
        }
        $allowedValues = $this->getPaymentCollectionModeAllowableValues();
        if (!is_null($this->container['payment_collection_mode']) && !in_array($this->container['payment_collection_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_collection_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets listing_id
     *
     * @return int
     */
    public function getListingId()
    {
        return $this->container['listing_id'];
    }

    /**
     * Sets listing_id
     *
     * @param int $listing_id Listing ID
     *
     * @return $this
     */
    public function setListingId($listing_id)
    {
        $this->container['listing_id'] = $listing_id;

        return $this;
    }

    /**
     * Gets payment_plan_guid
     *
     * @return string
     */
    public function getPaymentPlanGuid()
    {
        return $this->container['payment_plan_guid'];
    }

    /**
     * Sets payment_plan_guid
     *
     * @param string $payment_plan_guid Payment Plan Guid
     *
     * @return $this
     */
    public function setPaymentPlanGuid($payment_plan_guid)
    {
        $this->container['payment_plan_guid'] = $payment_plan_guid;

        return $this;
    }

    /**
     * Gets renter
     *
     * @return \Piksel\KigoPro\Model\PostPersonRequest
     */
    public function getRenter()
    {
        return $this->container['renter'];
    }

    /**
     * Sets renter
     *
     * @param \Piksel\KigoPro\Model\PostPersonRequest $renter renter
     *
     * @return $this
     */
    public function setRenter($renter)
    {
        $this->container['renter'] = $renter;

        return $this;
    }

    /**
     * Gets credit_card
     *
     * @return \Piksel\KigoPro\Model\CreditCard|null
     */
    public function getCreditCard()
    {
        return $this->container['credit_card'];
    }

    /**
     * Sets credit_card
     *
     * @param \Piksel\KigoPro\Model\CreditCard|null $credit_card credit_card
     *
     * @return $this
     */
    public function setCreditCard($credit_card)
    {
        $this->container['credit_card'] = $credit_card;

        return $this;
    }

    /**
     * Gets external_booking_id
     *
     * @return string|null
     */
    public function getExternalBookingId()
    {
        return $this->container['external_booking_id'];
    }

    /**
     * Sets external_booking_id
     *
     * @param string|null $external_booking_id External ID coming from the Channel
     *
     * @return $this
     */
    public function setExternalBookingId($external_booking_id)
    {
        $this->container['external_booking_id'] = $external_booking_id;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets special_needs
     *
     * @return string|null
     */
    public function getSpecialNeeds()
    {
        return $this->container['special_needs'];
    }

    /**
     * Sets special_needs
     *
     * @param string|null $special_needs Special Needs
     *
     * @return $this
     */
    public function setSpecialNeeds($special_needs)
    {
        $this->container['special_needs'] = $special_needs;

        return $this;
    }

    /**
     * Gets point_of_sale_code
     *
     * @return string|null
     */
    public function getPointOfSaleCode()
    {
        return $this->container['point_of_sale_code'];
    }

    /**
     * Sets point_of_sale_code
     *
     * @param string|null $point_of_sale_code Point of Sale (code)
     *
     * @return $this
     */
    public function setPointOfSaleCode($point_of_sale_code)
    {
        $this->container['point_of_sale_code'] = $point_of_sale_code;

        return $this;
    }

    /**
     * Gets payment_collection_mode
     *
     * @return string|null
     */
    public function getPaymentCollectionMode()
    {
        return $this->container['payment_collection_mode'];
    }

    /**
     * Sets payment_collection_mode
     *
     * @param string|null $payment_collection_mode Defines how the booking will be paid
     *
     * @return $this
     */
    public function setPaymentCollectionMode($payment_collection_mode)
    {
        $allowedValues = $this->getPaymentCollectionModeAllowableValues();
        if (!is_null($payment_collection_mode) && !in_array($payment_collection_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_collection_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_collection_mode'] = $payment_collection_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


