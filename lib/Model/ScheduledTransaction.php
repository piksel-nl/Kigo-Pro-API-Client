<?php
/**
 * ScheduledTransaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\KigoPro\Model;

use \ArrayAccess;
use \Piksel\KigoPro\ObjectSerializer;

/**
 * ScheduledTransaction Class Doc Comment
 *
 * @category Class
 * @description Scheduled Transaction
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 */
class ScheduledTransaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ScheduledTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accounting_type' => 'string',
        'payment_method_type' => 'string',
        'amount' => 'double',
        'scheduled_date' => '\DateTime',
        'refund_date' => '\DateTime',
        'description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'accounting_type' => null,
        'payment_method_type' => null,
        'amount' => 'double',
        'scheduled_date' => 'date-time',
        'refund_date' => 'date-time',
        'description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accounting_type' => 'accountingType',
        'payment_method_type' => 'paymentMethodType',
        'amount' => 'amount',
        'scheduled_date' => 'scheduledDate',
        'refund_date' => 'refundDate',
        'description' => 'description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accounting_type' => 'setAccountingType',
        'payment_method_type' => 'setPaymentMethodType',
        'amount' => 'setAmount',
        'scheduled_date' => 'setScheduledDate',
        'refund_date' => 'setRefundDate',
        'description' => 'setDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accounting_type' => 'getAccountingType',
        'payment_method_type' => 'getPaymentMethodType',
        'amount' => 'getAmount',
        'scheduled_date' => 'getScheduledDate',
        'refund_date' => 'getRefundDate',
        'description' => 'getDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ACCOUNTING_TYPE_UNKNOWN = 'Unknown';
    const ACCOUNTING_TYPE_RENT = 'Rent';
    const ACCOUNTING_TYPE_CLEANING_FEE = 'CleaningFee';
    const ACCOUNTING_TYPE_MARKETING_FEE = 'MarketingFee';
    const ACCOUNTING_TYPE_SALES_TAX = 'SalesTax';
    const ACCOUNTING_TYPE_OTHER_FEE = 'OtherFee';
    const ACCOUNTING_TYPE_DAMAGE_WAIVER = 'DamageWaiver';
    const ACCOUNTING_TYPE_MAINTENANCE = 'Maintenance';
    const ACCOUNTING_TYPE_INSTALLMENT = 'Installment';
    const ACCOUNTING_TYPE_REFUNDABLE_DAMAGE_DEPOSIT = 'RefundableDamageDeposit';
    const ACCOUNTING_TYPE_COMMISSION = 'Commission';
    const ACCOUNTING_TYPE_GENERIC_DISCOUNT = 'GenericDiscount';
    const ACCOUNTING_TYPE_TRAVEL_INSURANCE = 'TravelInsurance';
    const ACCOUNTING_TYPE_CANCELLATION_FEE = 'CancellationFee';
    const ACCOUNTING_TYPE_EXTRA_PERSON_FEE = 'ExtraPersonFee';
    const ACCOUNTING_TYPE_PROCESSING_FEE = 'ProcessingFee';
    const ACCOUNTING_TYPE_SERVICE_FEE = 'ServiceFee';
    const ACCOUNTING_TYPE_INFO_ONLY = 'InfoOnly';
    const ACCOUNTING_TYPE_DAMAGES = 'Damages';
    const ACCOUNTING_TYPE_DEPOSIT = 'Deposit';
    const ACCOUNTING_TYPE_RENT_ADJUSTMENT = 'RentAdjustment';
    const ACCOUNTING_TYPE_DEFERMENT = 'Deferment';
    const ACCOUNTING_TYPE_TRUST_ACCOUNT = 'TrustAccount';
    const ACCOUNTING_TYPE_UPSELL_FEE = 'UpsellFee';
    const ACCOUNTING_TYPE_LINEN_FEE = 'LinenFee';
    const ACCOUNTING_TYPE_RESORT_FEE = 'ResortFee';
    const ACCOUNTING_TYPE_CITY_TAX = 'CityTax';
    const ACCOUNTING_TYPE_DESTINATION_FEE = 'DestinationFee';
    const ACCOUNTING_TYPE_GOVERNMENT_TAX = 'GovernmentTax';
    const ACCOUNTING_TYPE_LOCAL_COUNCIL_TAX = 'LocalCouncilTax';
    const ACCOUNTING_TYPE_BASIC_PROMOTION = 'BasicPromotion';
    const ACCOUNTING_TYPE_COUPON_PROMOTION = 'CouponPromotion';
    const ACCOUNTING_TYPE_EARLY_BOOKER_PROMOTION = 'EarlyBookerPromotion';
    const ACCOUNTING_TYPE_LAST_MINUTE_PROMOTION = 'LastMinutePromotion';
    const ACCOUNTING_TYPE_BUSINESS_BOOKER_PROMOTION = 'BusinessBookerPromotion';
    const ACCOUNTING_TYPE_MOBILE_RATE_PROMOTION = 'MobileRatePromotion';
    const ACCOUNTING_TYPE_GEO_RATE_PROMOTION = 'GeoRatePromotion';
    const PAYMENT_METHOD_TYPE_UNKNOWN = 'Unknown';
    const PAYMENT_METHOD_TYPE_CREDIT_CARD = 'CreditCard';
    const PAYMENT_METHOD_TYPE_CASH = 'Cash';
    const PAYMENT_METHOD_TYPE_CHECK = 'Check';
    const PAYMENT_METHOD_TYPE_OTHER = 'Other';
    const PAYMENT_METHOD_TYPE_MONEY_ORDER = 'MoneyOrder';
    const PAYMENT_METHOD_TYPE_PAY_PAL = 'PayPal';
    const PAYMENT_METHOD_TYPE_WIRE_TRANSFER = 'WireTransfer';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountingTypeAllowableValues()
    {
        return [
            self::ACCOUNTING_TYPE_UNKNOWN,
            self::ACCOUNTING_TYPE_RENT,
            self::ACCOUNTING_TYPE_CLEANING_FEE,
            self::ACCOUNTING_TYPE_MARKETING_FEE,
            self::ACCOUNTING_TYPE_SALES_TAX,
            self::ACCOUNTING_TYPE_OTHER_FEE,
            self::ACCOUNTING_TYPE_DAMAGE_WAIVER,
            self::ACCOUNTING_TYPE_MAINTENANCE,
            self::ACCOUNTING_TYPE_INSTALLMENT,
            self::ACCOUNTING_TYPE_REFUNDABLE_DAMAGE_DEPOSIT,
            self::ACCOUNTING_TYPE_COMMISSION,
            self::ACCOUNTING_TYPE_GENERIC_DISCOUNT,
            self::ACCOUNTING_TYPE_TRAVEL_INSURANCE,
            self::ACCOUNTING_TYPE_CANCELLATION_FEE,
            self::ACCOUNTING_TYPE_EXTRA_PERSON_FEE,
            self::ACCOUNTING_TYPE_PROCESSING_FEE,
            self::ACCOUNTING_TYPE_SERVICE_FEE,
            self::ACCOUNTING_TYPE_INFO_ONLY,
            self::ACCOUNTING_TYPE_DAMAGES,
            self::ACCOUNTING_TYPE_DEPOSIT,
            self::ACCOUNTING_TYPE_RENT_ADJUSTMENT,
            self::ACCOUNTING_TYPE_DEFERMENT,
            self::ACCOUNTING_TYPE_TRUST_ACCOUNT,
            self::ACCOUNTING_TYPE_UPSELL_FEE,
            self::ACCOUNTING_TYPE_LINEN_FEE,
            self::ACCOUNTING_TYPE_RESORT_FEE,
            self::ACCOUNTING_TYPE_CITY_TAX,
            self::ACCOUNTING_TYPE_DESTINATION_FEE,
            self::ACCOUNTING_TYPE_GOVERNMENT_TAX,
            self::ACCOUNTING_TYPE_LOCAL_COUNCIL_TAX,
            self::ACCOUNTING_TYPE_BASIC_PROMOTION,
            self::ACCOUNTING_TYPE_COUPON_PROMOTION,
            self::ACCOUNTING_TYPE_EARLY_BOOKER_PROMOTION,
            self::ACCOUNTING_TYPE_LAST_MINUTE_PROMOTION,
            self::ACCOUNTING_TYPE_BUSINESS_BOOKER_PROMOTION,
            self::ACCOUNTING_TYPE_MOBILE_RATE_PROMOTION,
            self::ACCOUNTING_TYPE_GEO_RATE_PROMOTION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodTypeAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_TYPE_UNKNOWN,
            self::PAYMENT_METHOD_TYPE_CREDIT_CARD,
            self::PAYMENT_METHOD_TYPE_CASH,
            self::PAYMENT_METHOD_TYPE_CHECK,
            self::PAYMENT_METHOD_TYPE_OTHER,
            self::PAYMENT_METHOD_TYPE_MONEY_ORDER,
            self::PAYMENT_METHOD_TYPE_PAY_PAL,
            self::PAYMENT_METHOD_TYPE_WIRE_TRANSFER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accounting_type'] = isset($data['accounting_type']) ? $data['accounting_type'] : null;
        $this->container['payment_method_type'] = isset($data['payment_method_type']) ? $data['payment_method_type'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['scheduled_date'] = isset($data['scheduled_date']) ? $data['scheduled_date'] : null;
        $this->container['refund_date'] = isset($data['refund_date']) ? $data['refund_date'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccountingTypeAllowableValues();
        if (!is_null($this->container['accounting_type']) && !in_array($this->container['accounting_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'accounting_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentMethodTypeAllowableValues();
        if (!is_null($this->container['payment_method_type']) && !in_array($this->container['payment_method_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_method_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accounting_type
     *
     * @return string|null
     */
    public function getAccountingType()
    {
        return $this->container['accounting_type'];
    }

    /**
     * Sets accounting_type
     *
     * @param string|null $accounting_type AccountingType
     *
     * @return $this
     */
    public function setAccountingType($accounting_type)
    {
        $allowedValues = $this->getAccountingTypeAllowableValues();
        if (!is_null($accounting_type) && !in_array($accounting_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'accounting_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accounting_type'] = $accounting_type;

        return $this;
    }

    /**
     * Gets payment_method_type
     *
     * @return string|null
     */
    public function getPaymentMethodType()
    {
        return $this->container['payment_method_type'];
    }

    /**
     * Sets payment_method_type
     *
     * @param string|null $payment_method_type PaymentMethodType
     *
     * @return $this
     */
    public function setPaymentMethodType($payment_method_type)
    {
        $allowedValues = $this->getPaymentMethodTypeAllowableValues();
        if (!is_null($payment_method_type) && !in_array($payment_method_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_method_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_method_type'] = $payment_method_type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double|null $amount Scheduled Amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets scheduled_date
     *
     * @return \DateTime|null
     */
    public function getScheduledDate()
    {
        return $this->container['scheduled_date'];
    }

    /**
     * Sets scheduled_date
     *
     * @param \DateTime|null $scheduled_date Scheduled Date
     *
     * @return $this
     */
    public function setScheduledDate($scheduled_date)
    {
        $this->container['scheduled_date'] = $scheduled_date;

        return $this;
    }

    /**
     * Gets refund_date
     *
     * @return \DateTime|null
     */
    public function getRefundDate()
    {
        return $this->container['refund_date'];
    }

    /**
     * Sets refund_date
     *
     * @param \DateTime|null $refund_date Refund date
     *
     * @return $this
     */
    public function setRefundDate($refund_date)
    {
        $this->container['refund_date'] = $refund_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description for the transaction
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


