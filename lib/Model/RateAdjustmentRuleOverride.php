<?php
/**
 * RateAdjustmentRuleOverride
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\KigoPro\Model;

use \ArrayAccess;
use \Piksel\KigoPro\ObjectSerializer;

/**
 * RateAdjustmentRuleOverride Class Doc Comment
 *
 * @category Class
 * @description Rate Adjustment with Season
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class RateAdjustmentRuleOverride implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RateAdjustmentRuleOverride';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'rate_adjustments' => '\Piksel\KigoPro\Model\RateAdjustmentRule[]',
        'closed_to_arrival' => 'string[]',
        'closed_to_departure' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'rate_adjustments' => null,
        'closed_to_arrival' => null,
        'closed_to_departure' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'rate_adjustments' => 'rateAdjustments',
        'closed_to_arrival' => 'closedToArrival',
        'closed_to_departure' => 'closedToDeparture'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'rate_adjustments' => 'setRateAdjustments',
        'closed_to_arrival' => 'setClosedToArrival',
        'closed_to_departure' => 'setClosedToDeparture'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'rate_adjustments' => 'getRateAdjustments',
        'closed_to_arrival' => 'getClosedToArrival',
        'closed_to_departure' => 'getClosedToDeparture'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CLOSED_TO_ARRIVAL_SUNDAY = 'Sunday';
    const CLOSED_TO_ARRIVAL_MONDAY = 'Monday';
    const CLOSED_TO_ARRIVAL_TUESDAY = 'Tuesday';
    const CLOSED_TO_ARRIVAL_WEDNESDAY = 'Wednesday';
    const CLOSED_TO_ARRIVAL_THURSDAY = 'Thursday';
    const CLOSED_TO_ARRIVAL_FRIDAY = 'Friday';
    const CLOSED_TO_ARRIVAL_SATURDAY = 'Saturday';
    const CLOSED_TO_DEPARTURE_SUNDAY = 'Sunday';
    const CLOSED_TO_DEPARTURE_MONDAY = 'Monday';
    const CLOSED_TO_DEPARTURE_TUESDAY = 'Tuesday';
    const CLOSED_TO_DEPARTURE_WEDNESDAY = 'Wednesday';
    const CLOSED_TO_DEPARTURE_THURSDAY = 'Thursday';
    const CLOSED_TO_DEPARTURE_FRIDAY = 'Friday';
    const CLOSED_TO_DEPARTURE_SATURDAY = 'Saturday';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClosedToArrivalAllowableValues()
    {
        return [
            self::CLOSED_TO_ARRIVAL_SUNDAY,
            self::CLOSED_TO_ARRIVAL_MONDAY,
            self::CLOSED_TO_ARRIVAL_TUESDAY,
            self::CLOSED_TO_ARRIVAL_WEDNESDAY,
            self::CLOSED_TO_ARRIVAL_THURSDAY,
            self::CLOSED_TO_ARRIVAL_FRIDAY,
            self::CLOSED_TO_ARRIVAL_SATURDAY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClosedToDepartureAllowableValues()
    {
        return [
            self::CLOSED_TO_DEPARTURE_SUNDAY,
            self::CLOSED_TO_DEPARTURE_MONDAY,
            self::CLOSED_TO_DEPARTURE_TUESDAY,
            self::CLOSED_TO_DEPARTURE_WEDNESDAY,
            self::CLOSED_TO_DEPARTURE_THURSDAY,
            self::CLOSED_TO_DEPARTURE_FRIDAY,
            self::CLOSED_TO_DEPARTURE_SATURDAY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['rate_adjustments'] = $data['rate_adjustments'] ?? null;
        $this->container['closed_to_arrival'] = $data['closed_to_arrival'] ?? null;
        $this->container['closed_to_departure'] = $data['closed_to_departure'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the override
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date Start date of the period when the rule is applied
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date End date of the period when the rule is applied
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets rate_adjustments
     *
     * @return \Piksel\KigoPro\Model\RateAdjustmentRule[]|null
     */
    public function getRateAdjustments()
    {
        return $this->container['rate_adjustments'];
    }

    /**
     * Sets rate_adjustments
     *
     * @param \Piksel\KigoPro\Model\RateAdjustmentRule[]|null $rate_adjustments Rate adjustments
     *
     * @return self
     */
    public function setRateAdjustments($rate_adjustments)
    {
        $this->container['rate_adjustments'] = $rate_adjustments;

        return $this;
    }

    /**
     * Gets closed_to_arrival
     *
     * @return string[]|null
     */
    public function getClosedToArrival()
    {
        return $this->container['closed_to_arrival'];
    }

    /**
     * Sets closed_to_arrival
     *
     * @param string[]|null $closed_to_arrival Days of the week when cannot check in
     *
     * @return self
     */
    public function setClosedToArrival($closed_to_arrival)
    {
        $allowedValues = $this->getClosedToArrivalAllowableValues();
        if (!is_null($closed_to_arrival) && array_diff($closed_to_arrival, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'closed_to_arrival', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['closed_to_arrival'] = $closed_to_arrival;

        return $this;
    }

    /**
     * Gets closed_to_departure
     *
     * @return string[]|null
     */
    public function getClosedToDeparture()
    {
        return $this->container['closed_to_departure'];
    }

    /**
     * Sets closed_to_departure
     *
     * @param string[]|null $closed_to_departure Days of the week when cannot check out
     *
     * @return self
     */
    public function setClosedToDeparture($closed_to_departure)
    {
        $allowedValues = $this->getClosedToDepartureAllowableValues();
        if (!is_null($closed_to_departure) && array_diff($closed_to_departure, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'closed_to_departure', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['closed_to_departure'] = $closed_to_departure;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


