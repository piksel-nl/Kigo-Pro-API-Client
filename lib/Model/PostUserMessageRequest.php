<?php
/**
 * PostUserMessageRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\KigoPro\Model;

use \ArrayAccess;
use \Piksel\KigoPro\ObjectSerializer;

/**
 * PostUserMessageRequest Class Doc Comment
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 */
class PostUserMessageRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PostUserMessageRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'text' => 'string',
        'message_external_key' => 'string',
        'sent_date' => '\DateTime',
        'sender' => 'string',
        'sender_external_key' => 'string',
        'sender_first_name' => 'string',
        'sender_last_name' => 'string',
        'sender_email' => 'string',
        'sender_locale' => 'string',
        'sender_location' => 'string',
        'sender_user_id' => 'int',
        'attachments' => '\Piksel\KigoPro\Model\UserMessageAttachment[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'text' => null,
        'message_external_key' => null,
        'sent_date' => 'date-time',
        'sender' => null,
        'sender_external_key' => null,
        'sender_first_name' => null,
        'sender_last_name' => null,
        'sender_email' => null,
        'sender_locale' => null,
        'sender_location' => null,
        'sender_user_id' => 'int32',
        'attachments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'text' => 'text',
        'message_external_key' => 'messageExternalKey',
        'sent_date' => 'sentDate',
        'sender' => 'sender',
        'sender_external_key' => 'senderExternalKey',
        'sender_first_name' => 'senderFirstName',
        'sender_last_name' => 'senderLastName',
        'sender_email' => 'senderEmail',
        'sender_locale' => 'senderLocale',
        'sender_location' => 'senderLocation',
        'sender_user_id' => 'senderUserID',
        'attachments' => 'attachments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'text' => 'setText',
        'message_external_key' => 'setMessageExternalKey',
        'sent_date' => 'setSentDate',
        'sender' => 'setSender',
        'sender_external_key' => 'setSenderExternalKey',
        'sender_first_name' => 'setSenderFirstName',
        'sender_last_name' => 'setSenderLastName',
        'sender_email' => 'setSenderEmail',
        'sender_locale' => 'setSenderLocale',
        'sender_location' => 'setSenderLocation',
        'sender_user_id' => 'setSenderUserId',
        'attachments' => 'setAttachments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'text' => 'getText',
        'message_external_key' => 'getMessageExternalKey',
        'sent_date' => 'getSentDate',
        'sender' => 'getSender',
        'sender_external_key' => 'getSenderExternalKey',
        'sender_first_name' => 'getSenderFirstName',
        'sender_last_name' => 'getSenderLastName',
        'sender_email' => 'getSenderEmail',
        'sender_locale' => 'getSenderLocale',
        'sender_location' => 'getSenderLocation',
        'sender_user_id' => 'getSenderUserId',
        'attachments' => 'getAttachments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SENDER_GUEST = 'Guest';
    const SENDER_HOST = 'Host';
    const SENDER_CO_HOST = 'CoHost';
    const SENDER_CO_GUEST = 'CoGuest';
    const SENDER_AUTO_RESPONDER = 'AutoResponder';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSenderAllowableValues()
    {
        return [
            self::SENDER_GUEST,
            self::SENDER_HOST,
            self::SENDER_CO_HOST,
            self::SENDER_CO_GUEST,
            self::SENDER_AUTO_RESPONDER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['message_external_key'] = isset($data['message_external_key']) ? $data['message_external_key'] : null;
        $this->container['sent_date'] = isset($data['sent_date']) ? $data['sent_date'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['sender_external_key'] = isset($data['sender_external_key']) ? $data['sender_external_key'] : null;
        $this->container['sender_first_name'] = isset($data['sender_first_name']) ? $data['sender_first_name'] : null;
        $this->container['sender_last_name'] = isset($data['sender_last_name']) ? $data['sender_last_name'] : null;
        $this->container['sender_email'] = isset($data['sender_email']) ? $data['sender_email'] : null;
        $this->container['sender_locale'] = isset($data['sender_locale']) ? $data['sender_locale'] : null;
        $this->container['sender_location'] = isset($data['sender_location']) ? $data['sender_location'] : null;
        $this->container['sender_user_id'] = isset($data['sender_user_id']) ? $data['sender_user_id'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        if ($this->container['sender'] === null) {
            $invalidProperties[] = "'sender' can't be null";
        }
        $allowedValues = $this->getSenderAllowableValues();
        if (!is_null($this->container['sender']) && !in_array($this->container['sender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sender', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['sender_first_name']) && (mb_strlen($this->container['sender_first_name']) > 200)) {
            $invalidProperties[] = "invalid value for 'sender_first_name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['sender_last_name']) && (mb_strlen($this->container['sender_last_name']) > 200)) {
            $invalidProperties[] = "invalid value for 'sender_last_name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['sender_email']) && (mb_strlen($this->container['sender_email']) > 200)) {
            $invalidProperties[] = "invalid value for 'sender_email', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['sender_locale']) && (mb_strlen($this->container['sender_locale']) > 5)) {
            $invalidProperties[] = "invalid value for 'sender_locale', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['sender_location']) && (mb_strlen($this->container['sender_location']) > 200)) {
            $invalidProperties[] = "invalid value for 'sender_location', the character length must be smaller than or equal to 200.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets message_external_key
     *
     * @return string|null
     */
    public function getMessageExternalKey()
    {
        return $this->container['message_external_key'];
    }

    /**
     * Sets message_external_key
     *
     * @param string|null $message_external_key message_external_key
     *
     * @return $this
     */
    public function setMessageExternalKey($message_external_key)
    {
        $this->container['message_external_key'] = $message_external_key;

        return $this;
    }

    /**
     * Gets sent_date
     *
     * @return \DateTime|null
     */
    public function getSentDate()
    {
        return $this->container['sent_date'];
    }

    /**
     * Sets sent_date
     *
     * @param \DateTime|null $sent_date sent_date
     *
     * @return $this
     */
    public function setSentDate($sent_date)
    {
        $this->container['sent_date'] = $sent_date;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return string
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string $sender sender
     *
     * @return $this
     */
    public function setSender($sender)
    {
        $allowedValues = $this->getSenderAllowableValues();
        if (!in_array($sender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sender', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets sender_external_key
     *
     * @return string|null
     */
    public function getSenderExternalKey()
    {
        return $this->container['sender_external_key'];
    }

    /**
     * Sets sender_external_key
     *
     * @param string|null $sender_external_key sender_external_key
     *
     * @return $this
     */
    public function setSenderExternalKey($sender_external_key)
    {
        $this->container['sender_external_key'] = $sender_external_key;

        return $this;
    }

    /**
     * Gets sender_first_name
     *
     * @return string|null
     */
    public function getSenderFirstName()
    {
        return $this->container['sender_first_name'];
    }

    /**
     * Sets sender_first_name
     *
     * @param string|null $sender_first_name sender_first_name
     *
     * @return $this
     */
    public function setSenderFirstName($sender_first_name)
    {
        if (!is_null($sender_first_name) && (mb_strlen($sender_first_name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $sender_first_name when calling PostUserMessageRequest., must be smaller than or equal to 200.');
        }

        $this->container['sender_first_name'] = $sender_first_name;

        return $this;
    }

    /**
     * Gets sender_last_name
     *
     * @return string|null
     */
    public function getSenderLastName()
    {
        return $this->container['sender_last_name'];
    }

    /**
     * Sets sender_last_name
     *
     * @param string|null $sender_last_name sender_last_name
     *
     * @return $this
     */
    public function setSenderLastName($sender_last_name)
    {
        if (!is_null($sender_last_name) && (mb_strlen($sender_last_name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $sender_last_name when calling PostUserMessageRequest., must be smaller than or equal to 200.');
        }

        $this->container['sender_last_name'] = $sender_last_name;

        return $this;
    }

    /**
     * Gets sender_email
     *
     * @return string|null
     */
    public function getSenderEmail()
    {
        return $this->container['sender_email'];
    }

    /**
     * Sets sender_email
     *
     * @param string|null $sender_email sender_email
     *
     * @return $this
     */
    public function setSenderEmail($sender_email)
    {
        if (!is_null($sender_email) && (mb_strlen($sender_email) > 200)) {
            throw new \InvalidArgumentException('invalid length for $sender_email when calling PostUserMessageRequest., must be smaller than or equal to 200.');
        }

        $this->container['sender_email'] = $sender_email;

        return $this;
    }

    /**
     * Gets sender_locale
     *
     * @return string|null
     */
    public function getSenderLocale()
    {
        return $this->container['sender_locale'];
    }

    /**
     * Sets sender_locale
     *
     * @param string|null $sender_locale sender_locale
     *
     * @return $this
     */
    public function setSenderLocale($sender_locale)
    {
        if (!is_null($sender_locale) && (mb_strlen($sender_locale) > 5)) {
            throw new \InvalidArgumentException('invalid length for $sender_locale when calling PostUserMessageRequest., must be smaller than or equal to 5.');
        }

        $this->container['sender_locale'] = $sender_locale;

        return $this;
    }

    /**
     * Gets sender_location
     *
     * @return string|null
     */
    public function getSenderLocation()
    {
        return $this->container['sender_location'];
    }

    /**
     * Sets sender_location
     *
     * @param string|null $sender_location sender_location
     *
     * @return $this
     */
    public function setSenderLocation($sender_location)
    {
        if (!is_null($sender_location) && (mb_strlen($sender_location) > 200)) {
            throw new \InvalidArgumentException('invalid length for $sender_location when calling PostUserMessageRequest., must be smaller than or equal to 200.');
        }

        $this->container['sender_location'] = $sender_location;

        return $this;
    }

    /**
     * Gets sender_user_id
     *
     * @return int|null
     */
    public function getSenderUserId()
    {
        return $this->container['sender_user_id'];
    }

    /**
     * Sets sender_user_id
     *
     * @param int|null $sender_user_id sender_user_id
     *
     * @return $this
     */
    public function setSenderUserId($sender_user_id)
    {
        $this->container['sender_user_id'] = $sender_user_id;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Piksel\KigoPro\Model\UserMessageAttachment[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Piksel\KigoPro\Model\UserMessageAttachment[]|null $attachments attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


