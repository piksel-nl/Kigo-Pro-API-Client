<?php
/**
 * GetBookingVm
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\KigoPro\Model;

use \ArrayAccess;
use \Piksel\KigoPro\ObjectSerializer;

/**
 * GetBookingVm Class Doc Comment
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class GetBookingVm implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetBookingVm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'external_key' => 'string',
        'confirmation_number' => 'string',
        'account_id' => 'int',
        'property_id' => 'int',
        'unit_id' => 'int',
        'booking_source_code' => 'string',
        'point_of_sale_code' => 'string',
        'short_code' => 'string',
        'booked_on_date' => '\DateTime',
        'check_in_date' => '\DateTime',
        'check_out_date' => '\DateTime',
        'type' => 'string',
        'num_adults' => 'int',
        'num_children' => 'int',
        'status' => 'string',
        'cancellation_date' => '\DateTime',
        'cancellation_source' => 'string',
        'cancelled_by_role' => 'string',
        'cancelled_by_user_id' => 'int',
        'cancellation_reason' => 'string',
        'cancellation_policy' => '\Piksel\KigoPro\Model\CancellationPolicyDto',
        'total_amount' => 'double',
        'currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'external_key' => null,
        'confirmation_number' => null,
        'account_id' => 'int32',
        'property_id' => 'int32',
        'unit_id' => 'int32',
        'booking_source_code' => null,
        'point_of_sale_code' => null,
        'short_code' => null,
        'booked_on_date' => 'date-time',
        'check_in_date' => 'date',
        'check_out_date' => 'date',
        'type' => null,
        'num_adults' => 'int32',
        'num_children' => 'int32',
        'status' => null,
        'cancellation_date' => 'date-time',
        'cancellation_source' => null,
        'cancelled_by_role' => null,
        'cancelled_by_user_id' => 'int32',
        'cancellation_reason' => null,
        'cancellation_policy' => null,
        'total_amount' => 'double',
        'currency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'external_key' => 'externalKey',
        'confirmation_number' => 'confirmationNumber',
        'account_id' => 'accountID',
        'property_id' => 'propertyID',
        'unit_id' => 'unitID',
        'booking_source_code' => 'bookingSourceCode',
        'point_of_sale_code' => 'pointOfSaleCode',
        'short_code' => 'shortCode',
        'booked_on_date' => 'bookedOnDate',
        'check_in_date' => 'checkInDate',
        'check_out_date' => 'checkOutDate',
        'type' => 'type',
        'num_adults' => 'numAdults',
        'num_children' => 'numChildren',
        'status' => 'status',
        'cancellation_date' => 'cancellationDate',
        'cancellation_source' => 'cancellationSource',
        'cancelled_by_role' => 'cancelledByRole',
        'cancelled_by_user_id' => 'cancelledByUserID',
        'cancellation_reason' => 'cancellationReason',
        'cancellation_policy' => 'cancellationPolicy',
        'total_amount' => 'totalAmount',
        'currency' => 'currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'external_key' => 'setExternalKey',
        'confirmation_number' => 'setConfirmationNumber',
        'account_id' => 'setAccountId',
        'property_id' => 'setPropertyId',
        'unit_id' => 'setUnitId',
        'booking_source_code' => 'setBookingSourceCode',
        'point_of_sale_code' => 'setPointOfSaleCode',
        'short_code' => 'setShortCode',
        'booked_on_date' => 'setBookedOnDate',
        'check_in_date' => 'setCheckInDate',
        'check_out_date' => 'setCheckOutDate',
        'type' => 'setType',
        'num_adults' => 'setNumAdults',
        'num_children' => 'setNumChildren',
        'status' => 'setStatus',
        'cancellation_date' => 'setCancellationDate',
        'cancellation_source' => 'setCancellationSource',
        'cancelled_by_role' => 'setCancelledByRole',
        'cancelled_by_user_id' => 'setCancelledByUserId',
        'cancellation_reason' => 'setCancellationReason',
        'cancellation_policy' => 'setCancellationPolicy',
        'total_amount' => 'setTotalAmount',
        'currency' => 'setCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'external_key' => 'getExternalKey',
        'confirmation_number' => 'getConfirmationNumber',
        'account_id' => 'getAccountId',
        'property_id' => 'getPropertyId',
        'unit_id' => 'getUnitId',
        'booking_source_code' => 'getBookingSourceCode',
        'point_of_sale_code' => 'getPointOfSaleCode',
        'short_code' => 'getShortCode',
        'booked_on_date' => 'getBookedOnDate',
        'check_in_date' => 'getCheckInDate',
        'check_out_date' => 'getCheckOutDate',
        'type' => 'getType',
        'num_adults' => 'getNumAdults',
        'num_children' => 'getNumChildren',
        'status' => 'getStatus',
        'cancellation_date' => 'getCancellationDate',
        'cancellation_source' => 'getCancellationSource',
        'cancelled_by_role' => 'getCancelledByRole',
        'cancelled_by_user_id' => 'getCancelledByUserId',
        'cancellation_reason' => 'getCancellationReason',
        'cancellation_policy' => 'getCancellationPolicy',
        'total_amount' => 'getTotalAmount',
        'currency' => 'getCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_UNKNOWN = 'Unknown';
    const TYPE_INTERNET = 'Internet';
    const TYPE_IN_HOUSE = 'InHouse';
    const TYPE_AGENT = 'Agent';
    const TYPE_OWNER = 'Owner';
    const TYPE_BLOCK = 'Block';
    const TYPE_PMS = 'PMS';
    const TYPE_STANDARD = 'Standard';
    const STATUS_UNKNOWN = 'Unknown';
    const STATUS_CANCELED = 'Canceled';
    const STATUS_HELD = 'Held';
    const STATUS_PENDING_CONFIRMATION = 'PendingConfirmation';
    const STATUS_CONFIRMED = 'Confirmed';
    const STATUS_CHECKED_IN = 'CheckedIn';
    const STATUS_CHECKED_OUT = 'CheckedOut';
    const STATUS_QUOTE = 'Quote';
    const STATUS_PROCESSING = 'Processing';
    const STATUS_REQUEST_TO_BOOK = 'RequestToBook';
    const STATUS_ACCEPTED = 'Accepted';
    const STATUS_OVERBOOKING = 'Overbooking';
    const STATUS_FAILED = 'Failed';
    const CANCELLATION_SOURCE_SYSTEM = 'System';
    const CANCELLATION_SOURCE_API = 'Api';
    const CANCELLED_BY_ROLE_UNKNOWN = 'Unknown';
    const CANCELLED_BY_ROLE_CHANNEL = 'Channel';
    const CANCELLED_BY_ROLE_HOST = 'Host';
    const CANCELLED_BY_ROLE_GUEST = 'Guest';
    const CANCELLED_BY_ROLE_KIGO = 'Kigo';
    const CANCELLATION_REASON_UNKNOWN = 'Unknown';
    const CANCELLATION_REASON_DENIED = 'Denied';
    const CANCELLATION_REASON_GUEST_INITIATED = 'GuestInitiated';
    const CANCELLATION_REASON_MISTAKE = 'Mistake';
    const CANCELLATION_REASON_BREACH_OF_POLICY = 'BreachOfPolicy';
    const CANCELLATION_REASON_FRAUD = 'Fraud';
    const CANCELLATION_REASON_INVALID_CREDIT_CARD = 'InvalidCreditCard';
    const CANCELLATION_REASON_NO_SHOW_WITH_REFUND = 'NoShowWithRefund';
    const CANCELLATION_REASON_NO_SHOW_WITHOUT_REFUND = 'NoShowWithoutRefund';
    const CURRENCY_UNKNOWN = 'Unknown';
    const CURRENCY_USD = 'USD';
    const CURRENCY_AUD = 'AUD';
    const CURRENCY_BRL = 'BRL';
    const CURRENCY_CAD = 'CAD';
    const CURRENCY_CNY = 'CNY';
    const CURRENCY_DKK = 'DKK';
    const CURRENCY_EUR = 'EUR';
    const CURRENCY_HKD = 'HKD';
    const CURRENCY_INR = 'INR';
    const CURRENCY_JPY = 'JPY';
    const CURRENCY_MYR = 'MYR';
    const CURRENCY_MXN = 'MXN';
    const CURRENCY_NZD = 'NZD';
    const CURRENCY_NOK = 'NOK';
    const CURRENCY_SGD = 'SGD';
    const CURRENCY_ZAR = 'ZAR';
    const CURRENCY_KRW = 'KRW';
    const CURRENCY_LKR = 'LKR';
    const CURRENCY_SEK = 'SEK';
    const CURRENCY_CHF = 'CHF';
    const CURRENCY_TWD = 'TWD';
    const CURRENCY_THB = 'THB';
    const CURRENCY_GBP = 'GBP';
    const CURRENCY_EGP = 'EGP';
    const CURRENCY_XPF = 'XPF';
    const CURRENCY_AED = 'AED';
    const CURRENCY_ANG = 'ANG';
    const CURRENCY_ARS = 'ARS';
    const CURRENCY_BGN = 'BGN';
    const CURRENCY_BHD = 'BHD';
    const CURRENCY_BOB = 'BOB';
    const CURRENCY_BTN = 'BTN';
    const CURRENCY_BZD = 'BZD';
    const CURRENCY_CLP = 'CLP';
    const CURRENCY_COP = 'COP';
    const CURRENCY_CRC = 'CRC';
    const CURRENCY_CZK = 'CZK';
    const CURRENCY_GNF = 'GNF';
    const CURRENCY_GTQ = 'GTQ';
    const CURRENCY_GYD = 'GYD';
    const CURRENCY_HNL = 'HNL';
    const CURRENCY_HRK = 'HRK';
    const CURRENCY_HUF = 'HUF';
    const CURRENCY_IDR = 'IDR';
    const CURRENCY_ILS = 'ILS';
    const CURRENCY_ISK = 'ISK';
    const CURRENCY_JOD = 'JOD';
    const CURRENCY_KHR = 'KHR';
    const CURRENCY_KWD = 'KWD';
    const CURRENCY_KZT = 'KZT';
    const CURRENCY_LAK = 'LAK';
    const CURRENCY_LBP = 'LBP';
    const CURRENCY_MAD = 'MAD';
    const CURRENCY_MOP = 'MOP';
    const CURRENCY_NIO = 'NIO';
    const CURRENCY_OMR = 'OMR';
    const CURRENCY_PAB = 'PAB';
    const CURRENCY_PEN = 'PEN';
    const CURRENCY_PHP = 'PHP';
    const CURRENCY_PKR = 'PKR';
    const CURRENCY_PLN = 'PLN';
    const CURRENCY_PYG = 'PYG';
    const CURRENCY_QAR = 'QAR';
    const CURRENCY_RON = 'RON';
    const CURRENCY_RUB = 'RUB';
    const CURRENCY_SAR = 'SAR';
    const CURRENCY_SRD = 'SRD';
    const CURRENCY_TND = 'TND';
    const CURRENCY__TRY = 'TRY';
    const CURRENCY_UAH = 'UAH';
    const CURRENCY_UYU = 'UYU';
    const CURRENCY_VEF = 'VEF';
    const CURRENCY_VND = 'VND';
    const CURRENCY_AZN = 'AZN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_UNKNOWN,
            self::TYPE_INTERNET,
            self::TYPE_IN_HOUSE,
            self::TYPE_AGENT,
            self::TYPE_OWNER,
            self::TYPE_BLOCK,
            self::TYPE_PMS,
            self::TYPE_STANDARD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNKNOWN,
            self::STATUS_CANCELED,
            self::STATUS_HELD,
            self::STATUS_PENDING_CONFIRMATION,
            self::STATUS_CONFIRMED,
            self::STATUS_CHECKED_IN,
            self::STATUS_CHECKED_OUT,
            self::STATUS_QUOTE,
            self::STATUS_PROCESSING,
            self::STATUS_REQUEST_TO_BOOK,
            self::STATUS_ACCEPTED,
            self::STATUS_OVERBOOKING,
            self::STATUS_FAILED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCancellationSourceAllowableValues()
    {
        return [
            self::CANCELLATION_SOURCE_SYSTEM,
            self::CANCELLATION_SOURCE_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCancelledByRoleAllowableValues()
    {
        return [
            self::CANCELLED_BY_ROLE_UNKNOWN,
            self::CANCELLED_BY_ROLE_CHANNEL,
            self::CANCELLED_BY_ROLE_HOST,
            self::CANCELLED_BY_ROLE_GUEST,
            self::CANCELLED_BY_ROLE_KIGO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCancellationReasonAllowableValues()
    {
        return [
            self::CANCELLATION_REASON_UNKNOWN,
            self::CANCELLATION_REASON_DENIED,
            self::CANCELLATION_REASON_GUEST_INITIATED,
            self::CANCELLATION_REASON_MISTAKE,
            self::CANCELLATION_REASON_BREACH_OF_POLICY,
            self::CANCELLATION_REASON_FRAUD,
            self::CANCELLATION_REASON_INVALID_CREDIT_CARD,
            self::CANCELLATION_REASON_NO_SHOW_WITH_REFUND,
            self::CANCELLATION_REASON_NO_SHOW_WITHOUT_REFUND,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_UNKNOWN,
            self::CURRENCY_USD,
            self::CURRENCY_AUD,
            self::CURRENCY_BRL,
            self::CURRENCY_CAD,
            self::CURRENCY_CNY,
            self::CURRENCY_DKK,
            self::CURRENCY_EUR,
            self::CURRENCY_HKD,
            self::CURRENCY_INR,
            self::CURRENCY_JPY,
            self::CURRENCY_MYR,
            self::CURRENCY_MXN,
            self::CURRENCY_NZD,
            self::CURRENCY_NOK,
            self::CURRENCY_SGD,
            self::CURRENCY_ZAR,
            self::CURRENCY_KRW,
            self::CURRENCY_LKR,
            self::CURRENCY_SEK,
            self::CURRENCY_CHF,
            self::CURRENCY_TWD,
            self::CURRENCY_THB,
            self::CURRENCY_GBP,
            self::CURRENCY_EGP,
            self::CURRENCY_XPF,
            self::CURRENCY_AED,
            self::CURRENCY_ANG,
            self::CURRENCY_ARS,
            self::CURRENCY_BGN,
            self::CURRENCY_BHD,
            self::CURRENCY_BOB,
            self::CURRENCY_BTN,
            self::CURRENCY_BZD,
            self::CURRENCY_CLP,
            self::CURRENCY_COP,
            self::CURRENCY_CRC,
            self::CURRENCY_CZK,
            self::CURRENCY_GNF,
            self::CURRENCY_GTQ,
            self::CURRENCY_GYD,
            self::CURRENCY_HNL,
            self::CURRENCY_HRK,
            self::CURRENCY_HUF,
            self::CURRENCY_IDR,
            self::CURRENCY_ILS,
            self::CURRENCY_ISK,
            self::CURRENCY_JOD,
            self::CURRENCY_KHR,
            self::CURRENCY_KWD,
            self::CURRENCY_KZT,
            self::CURRENCY_LAK,
            self::CURRENCY_LBP,
            self::CURRENCY_MAD,
            self::CURRENCY_MOP,
            self::CURRENCY_NIO,
            self::CURRENCY_OMR,
            self::CURRENCY_PAB,
            self::CURRENCY_PEN,
            self::CURRENCY_PHP,
            self::CURRENCY_PKR,
            self::CURRENCY_PLN,
            self::CURRENCY_PYG,
            self::CURRENCY_QAR,
            self::CURRENCY_RON,
            self::CURRENCY_RUB,
            self::CURRENCY_SAR,
            self::CURRENCY_SRD,
            self::CURRENCY_TND,
            self::CURRENCY__TRY,
            self::CURRENCY_UAH,
            self::CURRENCY_UYU,
            self::CURRENCY_VEF,
            self::CURRENCY_VND,
            self::CURRENCY_AZN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['external_key'] = $data['external_key'] ?? null;
        $this->container['confirmation_number'] = $data['confirmation_number'] ?? null;
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['property_id'] = $data['property_id'] ?? null;
        $this->container['unit_id'] = $data['unit_id'] ?? null;
        $this->container['booking_source_code'] = $data['booking_source_code'] ?? null;
        $this->container['point_of_sale_code'] = $data['point_of_sale_code'] ?? null;
        $this->container['short_code'] = $data['short_code'] ?? null;
        $this->container['booked_on_date'] = $data['booked_on_date'] ?? null;
        $this->container['check_in_date'] = $data['check_in_date'] ?? null;
        $this->container['check_out_date'] = $data['check_out_date'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['num_adults'] = $data['num_adults'] ?? null;
        $this->container['num_children'] = $data['num_children'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['cancellation_date'] = $data['cancellation_date'] ?? null;
        $this->container['cancellation_source'] = $data['cancellation_source'] ?? null;
        $this->container['cancelled_by_role'] = $data['cancelled_by_role'] ?? null;
        $this->container['cancelled_by_user_id'] = $data['cancelled_by_user_id'] ?? null;
        $this->container['cancellation_reason'] = $data['cancellation_reason'] ?? null;
        $this->container['cancellation_policy'] = $data['cancellation_policy'] ?? null;
        $this->container['total_amount'] = $data['total_amount'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCancellationSourceAllowableValues();
        if (!is_null($this->container['cancellation_source']) && !in_array($this->container['cancellation_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cancellation_source', must be one of '%s'",
                $this->container['cancellation_source'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCancelledByRoleAllowableValues();
        if (!is_null($this->container['cancelled_by_role']) && !in_array($this->container['cancelled_by_role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cancelled_by_role', must be one of '%s'",
                $this->container['cancelled_by_role'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCancellationReasonAllowableValues();
        if (!is_null($this->container['cancellation_reason']) && !in_array($this->container['cancellation_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cancellation_reason', must be one of '%s'",
                $this->container['cancellation_reason'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_key
     *
     * @return string|null
     */
    public function getExternalKey()
    {
        return $this->container['external_key'];
    }

    /**
     * Sets external_key
     *
     * @param string|null $external_key external_key
     *
     * @return self
     */
    public function setExternalKey($external_key)
    {
        $this->container['external_key'] = $external_key;

        return $this;
    }

    /**
     * Gets confirmation_number
     *
     * @return string|null
     */
    public function getConfirmationNumber()
    {
        return $this->container['confirmation_number'];
    }

    /**
     * Sets confirmation_number
     *
     * @param string|null $confirmation_number confirmation_number
     *
     * @return self
     */
    public function setConfirmationNumber($confirmation_number)
    {
        $this->container['confirmation_number'] = $confirmation_number;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets property_id
     *
     * @return int|null
     */
    public function getPropertyId()
    {
        return $this->container['property_id'];
    }

    /**
     * Sets property_id
     *
     * @param int|null $property_id property_id
     *
     * @return self
     */
    public function setPropertyId($property_id)
    {
        $this->container['property_id'] = $property_id;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return int|null
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param int|null $unit_id unit_id
     *
     * @return self
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets booking_source_code
     *
     * @return string|null
     */
    public function getBookingSourceCode()
    {
        return $this->container['booking_source_code'];
    }

    /**
     * Sets booking_source_code
     *
     * @param string|null $booking_source_code booking_source_code
     *
     * @return self
     */
    public function setBookingSourceCode($booking_source_code)
    {
        $this->container['booking_source_code'] = $booking_source_code;

        return $this;
    }

    /**
     * Gets point_of_sale_code
     *
     * @return string|null
     */
    public function getPointOfSaleCode()
    {
        return $this->container['point_of_sale_code'];
    }

    /**
     * Sets point_of_sale_code
     *
     * @param string|null $point_of_sale_code point_of_sale_code
     *
     * @return self
     */
    public function setPointOfSaleCode($point_of_sale_code)
    {
        $this->container['point_of_sale_code'] = $point_of_sale_code;

        return $this;
    }

    /**
     * Gets short_code
     *
     * @return string|null
     */
    public function getShortCode()
    {
        return $this->container['short_code'];
    }

    /**
     * Sets short_code
     *
     * @param string|null $short_code short_code
     *
     * @return self
     */
    public function setShortCode($short_code)
    {
        $this->container['short_code'] = $short_code;

        return $this;
    }

    /**
     * Gets booked_on_date
     *
     * @return \DateTime|null
     */
    public function getBookedOnDate()
    {
        return $this->container['booked_on_date'];
    }

    /**
     * Sets booked_on_date
     *
     * @param \DateTime|null $booked_on_date booked_on_date
     *
     * @return self
     */
    public function setBookedOnDate($booked_on_date)
    {
        $this->container['booked_on_date'] = $booked_on_date;

        return $this;
    }

    /**
     * Gets check_in_date
     *
     * @return \DateTime|null
     */
    public function getCheckInDate()
    {
        return $this->container['check_in_date'];
    }

    /**
     * Sets check_in_date
     *
     * @param \DateTime|null $check_in_date check_in_date
     *
     * @return self
     */
    public function setCheckInDate($check_in_date)
    {
        $this->container['check_in_date'] = $check_in_date;

        return $this;
    }

    /**
     * Gets check_out_date
     *
     * @return \DateTime|null
     */
    public function getCheckOutDate()
    {
        return $this->container['check_out_date'];
    }

    /**
     * Sets check_out_date
     *
     * @param \DateTime|null $check_out_date check_out_date
     *
     * @return self
     */
    public function setCheckOutDate($check_out_date)
    {
        $this->container['check_out_date'] = $check_out_date;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Keep in sync with VRX.Prod.Entities LocationBooking Types
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets num_adults
     *
     * @return int|null
     */
    public function getNumAdults()
    {
        return $this->container['num_adults'];
    }

    /**
     * Sets num_adults
     *
     * @param int|null $num_adults num_adults
     *
     * @return self
     */
    public function setNumAdults($num_adults)
    {
        $this->container['num_adults'] = $num_adults;

        return $this;
    }

    /**
     * Gets num_children
     *
     * @return int|null
     */
    public function getNumChildren()
    {
        return $this->container['num_children'];
    }

    /**
     * Sets num_children
     *
     * @param int|null $num_children num_children
     *
     * @return self
     */
    public function setNumChildren($num_children)
    {
        $this->container['num_children'] = $num_children;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Keep in sync with VRX.Prod.Entities.LocationBooking.Statuses  Commented statuses are not used in CM
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets cancellation_date
     *
     * @return \DateTime|null
     */
    public function getCancellationDate()
    {
        return $this->container['cancellation_date'];
    }

    /**
     * Sets cancellation_date
     *
     * @param \DateTime|null $cancellation_date cancellation_date
     *
     * @return self
     */
    public function setCancellationDate($cancellation_date)
    {
        $this->container['cancellation_date'] = $cancellation_date;

        return $this;
    }

    /**
     * Gets cancellation_source
     *
     * @return string|null
     */
    public function getCancellationSource()
    {
        return $this->container['cancellation_source'];
    }

    /**
     * Sets cancellation_source
     *
     * @param string|null $cancellation_source cancellation_source
     *
     * @return self
     */
    public function setCancellationSource($cancellation_source)
    {
        $allowedValues = $this->getCancellationSourceAllowableValues();
        if (!is_null($cancellation_source) && !in_array($cancellation_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cancellation_source', must be one of '%s'",
                    $cancellation_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cancellation_source'] = $cancellation_source;

        return $this;
    }

    /**
     * Gets cancelled_by_role
     *
     * @return string|null
     */
    public function getCancelledByRole()
    {
        return $this->container['cancelled_by_role'];
    }

    /**
     * Sets cancelled_by_role
     *
     * @param string|null $cancelled_by_role cancelled_by_role
     *
     * @return self
     */
    public function setCancelledByRole($cancelled_by_role)
    {
        $allowedValues = $this->getCancelledByRoleAllowableValues();
        if (!is_null($cancelled_by_role) && !in_array($cancelled_by_role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cancelled_by_role', must be one of '%s'",
                    $cancelled_by_role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cancelled_by_role'] = $cancelled_by_role;

        return $this;
    }

    /**
     * Gets cancelled_by_user_id
     *
     * @return int|null
     */
    public function getCancelledByUserId()
    {
        return $this->container['cancelled_by_user_id'];
    }

    /**
     * Sets cancelled_by_user_id
     *
     * @param int|null $cancelled_by_user_id cancelled_by_user_id
     *
     * @return self
     */
    public function setCancelledByUserId($cancelled_by_user_id)
    {
        $this->container['cancelled_by_user_id'] = $cancelled_by_user_id;

        return $this;
    }

    /**
     * Gets cancellation_reason
     *
     * @return string|null
     */
    public function getCancellationReason()
    {
        return $this->container['cancellation_reason'];
    }

    /**
     * Sets cancellation_reason
     *
     * @param string|null $cancellation_reason cancellation_reason
     *
     * @return self
     */
    public function setCancellationReason($cancellation_reason)
    {
        $allowedValues = $this->getCancellationReasonAllowableValues();
        if (!is_null($cancellation_reason) && !in_array($cancellation_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cancellation_reason', must be one of '%s'",
                    $cancellation_reason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cancellation_reason'] = $cancellation_reason;

        return $this;
    }

    /**
     * Gets cancellation_policy
     *
     * @return \Piksel\KigoPro\Model\CancellationPolicyDto|null
     */
    public function getCancellationPolicy()
    {
        return $this->container['cancellation_policy'];
    }

    /**
     * Sets cancellation_policy
     *
     * @param \Piksel\KigoPro\Model\CancellationPolicyDto|null $cancellation_policy cancellation_policy
     *
     * @return self
     */
    public function setCancellationPolicy($cancellation_policy)
    {
        $this->container['cancellation_policy'] = $cancellation_policy;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double|null $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($currency) && !in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


