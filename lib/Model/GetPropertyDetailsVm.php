<?php
/**
 * GetPropertyDetailsVm
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\KigoPro\Model;

use \ArrayAccess;
use \Piksel\KigoPro\ObjectSerializer;

/**
 * GetPropertyDetailsVm Class Doc Comment
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class GetPropertyDetailsVm implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetPropertyDetailsVm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'property_names' => '\Piksel\KigoPro\Model\GetPropertyDetailsPublicNameDto[]',
        'internal_name' => 'string',
        'category_type' => 'string',
        'year_built' => 'int',
        'size_amount' => 'int',
        'size_unit' => 'string',
        'floor' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'property_names' => null,
        'internal_name' => null,
        'category_type' => null,
        'year_built' => 'int32',
        'size_amount' => 'int32',
        'size_unit' => null,
        'floor' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'property_names' => 'propertyNames',
        'internal_name' => 'internalName',
        'category_type' => 'categoryType',
        'year_built' => 'yearBuilt',
        'size_amount' => 'sizeAmount',
        'size_unit' => 'sizeUnit',
        'floor' => 'floor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'property_names' => 'setPropertyNames',
        'internal_name' => 'setInternalName',
        'category_type' => 'setCategoryType',
        'year_built' => 'setYearBuilt',
        'size_amount' => 'setSizeAmount',
        'size_unit' => 'setSizeUnit',
        'floor' => 'setFloor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'property_names' => 'getPropertyNames',
        'internal_name' => 'getInternalName',
        'category_type' => 'getCategoryType',
        'year_built' => 'getYearBuilt',
        'size_amount' => 'getSizeAmount',
        'size_unit' => 'getSizeUnit',
        'floor' => 'getFloor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CATEGORY_TYPE_UNKNOWN = 'Unknown';
    const CATEGORY_TYPE_TOWNHOUSE = 'Townhouse';
    const CATEGORY_TYPE_CONDOMINIUM = 'Condominium';
    const CATEGORY_TYPE_HOTEL = 'Hotel';
    const CATEGORY_TYPE_APARTMENT = 'Apartment';
    const CATEGORY_TYPE_BUNGALOW = 'Bungalow';
    const CATEGORY_TYPE_CASTLE = 'Castle';
    const CATEGORY_TYPE_CHALET = 'Chalet';
    const CATEGORY_TYPE_COTTAGE = 'Cottage';
    const CATEGORY_TYPE_FARMHOUSE = 'Farmhouse';
    const CATEGORY_TYPE_LODGE = 'Lodge';
    const CATEGORY_TYPE_STUDIO = 'Studio';
    const CATEGORY_TYPE_VILLA = 'Villa';
    const CATEGORY_TYPE_BARN = 'Barn';
    const CATEGORY_TYPE_HOUSEBOAT = 'Houseboat';
    const CATEGORY_TYPE_CABIN = 'Cabin';
    const CATEGORY_TYPE_YACHT = 'Yacht';
    const CATEGORY_TYPE_APARTHOTEL = 'Aparthotel';
    const CATEGORY_TYPE_HOUSE = 'House';
    const CATEGORY_TYPE_RESORT = 'Resort';
    const CATEGORY_TYPE_TREEHOUSE = 'Treehouse';
    const CATEGORY_TYPE_WINDMILL = 'Windmill';
    const CATEGORY_TYPE_YURT = 'Yurt';
    const SIZE_UNIT_SQUARE_FEET = 'SquareFeet';
    const SIZE_UNIT_SQUARE_METERS = 'SquareMeters';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoryTypeAllowableValues()
    {
        return [
            self::CATEGORY_TYPE_UNKNOWN,
            self::CATEGORY_TYPE_TOWNHOUSE,
            self::CATEGORY_TYPE_CONDOMINIUM,
            self::CATEGORY_TYPE_HOTEL,
            self::CATEGORY_TYPE_APARTMENT,
            self::CATEGORY_TYPE_BUNGALOW,
            self::CATEGORY_TYPE_CASTLE,
            self::CATEGORY_TYPE_CHALET,
            self::CATEGORY_TYPE_COTTAGE,
            self::CATEGORY_TYPE_FARMHOUSE,
            self::CATEGORY_TYPE_LODGE,
            self::CATEGORY_TYPE_STUDIO,
            self::CATEGORY_TYPE_VILLA,
            self::CATEGORY_TYPE_BARN,
            self::CATEGORY_TYPE_HOUSEBOAT,
            self::CATEGORY_TYPE_CABIN,
            self::CATEGORY_TYPE_YACHT,
            self::CATEGORY_TYPE_APARTHOTEL,
            self::CATEGORY_TYPE_HOUSE,
            self::CATEGORY_TYPE_RESORT,
            self::CATEGORY_TYPE_TREEHOUSE,
            self::CATEGORY_TYPE_WINDMILL,
            self::CATEGORY_TYPE_YURT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSizeUnitAllowableValues()
    {
        return [
            self::SIZE_UNIT_SQUARE_FEET,
            self::SIZE_UNIT_SQUARE_METERS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['property_names'] = $data['property_names'] ?? null;
        $this->container['internal_name'] = $data['internal_name'] ?? null;
        $this->container['category_type'] = $data['category_type'] ?? null;
        $this->container['year_built'] = $data['year_built'] ?? null;
        $this->container['size_amount'] = $data['size_amount'] ?? null;
        $this->container['size_unit'] = $data['size_unit'] ?? null;
        $this->container['floor'] = $data['floor'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCategoryTypeAllowableValues();
        if (!is_null($this->container['category_type']) && !in_array($this->container['category_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'category_type', must be one of '%s'",
                $this->container['category_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSizeUnitAllowableValues();
        if (!is_null($this->container['size_unit']) && !in_array($this->container['size_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'size_unit', must be one of '%s'",
                $this->container['size_unit'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets property_names
     *
     * @return \Piksel\KigoPro\Model\GetPropertyDetailsPublicNameDto[]|null
     */
    public function getPropertyNames()
    {
        return $this->container['property_names'];
    }

    /**
     * Sets property_names
     *
     * @param \Piksel\KigoPro\Model\GetPropertyDetailsPublicNameDto[]|null $property_names property_names
     *
     * @return self
     */
    public function setPropertyNames($property_names)
    {
        $this->container['property_names'] = $property_names;

        return $this;
    }

    /**
     * Gets internal_name
     *
     * @return string|null
     */
    public function getInternalName()
    {
        return $this->container['internal_name'];
    }

    /**
     * Sets internal_name
     *
     * @param string|null $internal_name internal_name
     *
     * @return self
     */
    public function setInternalName($internal_name)
    {
        $this->container['internal_name'] = $internal_name;

        return $this;
    }

    /**
     * Gets category_type
     *
     * @return string|null
     */
    public function getCategoryType()
    {
        return $this->container['category_type'];
    }

    /**
     * Sets category_type
     *
     * @param string|null $category_type category_type
     *
     * @return self
     */
    public function setCategoryType($category_type)
    {
        $allowedValues = $this->getCategoryTypeAllowableValues();
        if (!is_null($category_type) && !in_array($category_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'category_type', must be one of '%s'",
                    $category_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['category_type'] = $category_type;

        return $this;
    }

    /**
     * Gets year_built
     *
     * @return int|null
     */
    public function getYearBuilt()
    {
        return $this->container['year_built'];
    }

    /**
     * Sets year_built
     *
     * @param int|null $year_built year_built
     *
     * @return self
     */
    public function setYearBuilt($year_built)
    {
        $this->container['year_built'] = $year_built;

        return $this;
    }

    /**
     * Gets size_amount
     *
     * @return int|null
     */
    public function getSizeAmount()
    {
        return $this->container['size_amount'];
    }

    /**
     * Sets size_amount
     *
     * @param int|null $size_amount size_amount
     *
     * @return self
     */
    public function setSizeAmount($size_amount)
    {
        $this->container['size_amount'] = $size_amount;

        return $this;
    }

    /**
     * Gets size_unit
     *
     * @return string|null
     */
    public function getSizeUnit()
    {
        return $this->container['size_unit'];
    }

    /**
     * Sets size_unit
     *
     * @param string|null $size_unit size_unit
     *
     * @return self
     */
    public function setSizeUnit($size_unit)
    {
        $allowedValues = $this->getSizeUnitAllowableValues();
        if (!is_null($size_unit) && !in_array($size_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'size_unit', must be one of '%s'",
                    $size_unit,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['size_unit'] = $size_unit;

        return $this;
    }

    /**
     * Gets floor
     *
     * @return int|null
     */
    public function getFloor()
    {
        return $this->container['floor'];
    }

    /**
     * Sets floor
     *
     * @param int|null $floor floor
     *
     * @return self
     */
    public function setFloor($floor)
    {
        $this->container['floor'] = $floor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


