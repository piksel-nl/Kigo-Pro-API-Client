<?php
/**
 * Media
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\KigoPro\Model;

use \ArrayAccess;
use \Piksel\KigoPro\ObjectSerializer;

/**
 * Media Class Doc Comment
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 */
class Media implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Media';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'type' => 'string',
        'caption' => 'string',
        'original_url' => 'string',
        'medium_url' => 'string',
        'thumbnail_url' => 'string',
        'original_file_size' => 'int',
        'original_width' => 'int',
        'original_height' => 'int',
        'original_resolution' => 'int',
        'tags' => 'string[]',
        'created_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'type' => null,
        'caption' => null,
        'original_url' => null,
        'medium_url' => null,
        'thumbnail_url' => null,
        'original_file_size' => 'int32',
        'original_width' => 'int32',
        'original_height' => 'int32',
        'original_resolution' => 'int32',
        'tags' => null,
        'created_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'caption' => 'caption',
        'original_url' => 'originalUrl',
        'medium_url' => 'mediumUrl',
        'thumbnail_url' => 'thumbnailUrl',
        'original_file_size' => 'originalFileSize',
        'original_width' => 'originalWidth',
        'original_height' => 'originalHeight',
        'original_resolution' => 'originalResolution',
        'tags' => 'tags',
        'created_date' => 'createdDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'caption' => 'setCaption',
        'original_url' => 'setOriginalUrl',
        'medium_url' => 'setMediumUrl',
        'thumbnail_url' => 'setThumbnailUrl',
        'original_file_size' => 'setOriginalFileSize',
        'original_width' => 'setOriginalWidth',
        'original_height' => 'setOriginalHeight',
        'original_resolution' => 'setOriginalResolution',
        'tags' => 'setTags',
        'created_date' => 'setCreatedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'caption' => 'getCaption',
        'original_url' => 'getOriginalUrl',
        'medium_url' => 'getMediumUrl',
        'thumbnail_url' => 'getThumbnailUrl',
        'original_file_size' => 'getOriginalFileSize',
        'original_width' => 'getOriginalWidth',
        'original_height' => 'getOriginalHeight',
        'original_resolution' => 'getOriginalResolution',
        'tags' => 'getTags',
        'created_date' => 'getCreatedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_IMAGE = 'Image';
    const TYPE_VIDEO = 'Video';
    const TYPE_VIRTUAL_TOUR = 'VirtualTour';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_IMAGE,
            self::TYPE_VIDEO,
            self::TYPE_VIRTUAL_TOUR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['caption'] = isset($data['caption']) ? $data['caption'] : null;
        $this->container['original_url'] = isset($data['original_url']) ? $data['original_url'] : null;
        $this->container['medium_url'] = isset($data['medium_url']) ? $data['medium_url'] : null;
        $this->container['thumbnail_url'] = isset($data['thumbnail_url']) ? $data['thumbnail_url'] : null;
        $this->container['original_file_size'] = isset($data['original_file_size']) ? $data['original_file_size'] : null;
        $this->container['original_width'] = isset($data['original_width']) ? $data['original_width'] : null;
        $this->container['original_height'] = isset($data['original_height']) ? $data['original_height'] : null;
        $this->container['original_resolution'] = isset($data['original_resolution']) ? $data['original_resolution'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Media ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of Media
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets caption
     *
     * @return string|null
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * Sets caption
     *
     * @param string|null $caption Caption
     *
     * @return $this
     */
    public function setCaption($caption)
    {
        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * Gets original_url
     *
     * @return string|null
     */
    public function getOriginalUrl()
    {
        return $this->container['original_url'];
    }

    /**
     * Sets original_url
     *
     * @param string|null $original_url Original URL
     *
     * @return $this
     */
    public function setOriginalUrl($original_url)
    {
        $this->container['original_url'] = $original_url;

        return $this;
    }

    /**
     * Gets medium_url
     *
     * @return string|null
     */
    public function getMediumUrl()
    {
        return $this->container['medium_url'];
    }

    /**
     * Sets medium_url
     *
     * @param string|null $medium_url Medium Url
     *
     * @return $this
     */
    public function setMediumUrl($medium_url)
    {
        $this->container['medium_url'] = $medium_url;

        return $this;
    }

    /**
     * Gets thumbnail_url
     *
     * @return string|null
     */
    public function getThumbnailUrl()
    {
        return $this->container['thumbnail_url'];
    }

    /**
     * Sets thumbnail_url
     *
     * @param string|null $thumbnail_url Thumbnail URL
     *
     * @return $this
     */
    public function setThumbnailUrl($thumbnail_url)
    {
        $this->container['thumbnail_url'] = $thumbnail_url;

        return $this;
    }

    /**
     * Gets original_file_size
     *
     * @return int|null
     */
    public function getOriginalFileSize()
    {
        return $this->container['original_file_size'];
    }

    /**
     * Sets original_file_size
     *
     * @param int|null $original_file_size Original File Size
     *
     * @return $this
     */
    public function setOriginalFileSize($original_file_size)
    {
        $this->container['original_file_size'] = $original_file_size;

        return $this;
    }

    /**
     * Gets original_width
     *
     * @return int|null
     */
    public function getOriginalWidth()
    {
        return $this->container['original_width'];
    }

    /**
     * Sets original_width
     *
     * @param int|null $original_width Original Width
     *
     * @return $this
     */
    public function setOriginalWidth($original_width)
    {
        $this->container['original_width'] = $original_width;

        return $this;
    }

    /**
     * Gets original_height
     *
     * @return int|null
     */
    public function getOriginalHeight()
    {
        return $this->container['original_height'];
    }

    /**
     * Sets original_height
     *
     * @param int|null $original_height Original Height
     *
     * @return $this
     */
    public function setOriginalHeight($original_height)
    {
        $this->container['original_height'] = $original_height;

        return $this;
    }

    /**
     * Gets original_resolution
     *
     * @return int|null
     */
    public function getOriginalResolution()
    {
        return $this->container['original_resolution'];
    }

    /**
     * Sets original_resolution
     *
     * @param int|null $original_resolution Original Resolution
     *
     * @return $this
     */
    public function setOriginalResolution($original_resolution)
    {
        $this->container['original_resolution'] = $original_resolution;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags Tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date CreatedDate
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


