<?php
/**
 * BookingApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\ChannelsV2\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Piksel\Kigo\ChannelsV2\ApiException;
use Piksel\Kigo\Configuration;
use Piksel\Kigo\HeaderSelector;
use Piksel\Kigo\ObjectSerializer;

/**
 * BookingApi Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 */
class BookingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation channelsV2BookingsDiffGet
     *
     * Get ID and Date Last Updated of all Bookings that were created/modified within the specified date range
     *
     * @param  \DateTime $start_date Start Date (required)
     * @param  int $channel_connection_id Channel Connection ID (optional)
     * @param  \DateTime $end_date End Date (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\BookingDiffOutputListResourceList
     */
    public function channelsV2BookingsDiffGet($start_date, $channel_connection_id = null, $end_date = null)
    {
        list($response) = $this->channelsV2BookingsDiffGetWithHttpInfo($start_date, $channel_connection_id, $end_date);
        return $response;
    }

    /**
     * Operation channelsV2BookingsDiffGetWithHttpInfo
     *
     * Get ID and Date Last Updated of all Bookings that were created/modified within the specified date range
     *
     * @param  \DateTime $start_date Start Date (required)
     * @param  int $channel_connection_id Channel Connection ID (optional)
     * @param  \DateTime $end_date End Date (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\BookingDiffOutputListResourceList, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelsV2BookingsDiffGetWithHttpInfo($start_date, $channel_connection_id = null, $end_date = null)
    {
        $request = $this->channelsV2BookingsDiffGetRequest($start_date, $channel_connection_id, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Piksel\Kigo\ChannelsV2\Model\BookingDiffOutputListResourceList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\BookingDiffOutputListResourceList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\Kigo\ChannelsV2\Model\BookingDiffOutputListResourceList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\BookingDiffOutputListResourceList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelsV2BookingsDiffGetAsync
     *
     * Get ID and Date Last Updated of all Bookings that were created/modified within the specified date range
     *
     * @param  \DateTime $start_date Start Date (required)
     * @param  int $channel_connection_id Channel Connection ID (optional)
     * @param  \DateTime $end_date End Date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2BookingsDiffGetAsync($start_date, $channel_connection_id = null, $end_date = null)
    {
        return $this->channelsV2BookingsDiffGetAsyncWithHttpInfo($start_date, $channel_connection_id, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelsV2BookingsDiffGetAsyncWithHttpInfo
     *
     * Get ID and Date Last Updated of all Bookings that were created/modified within the specified date range
     *
     * @param  \DateTime $start_date Start Date (required)
     * @param  int $channel_connection_id Channel Connection ID (optional)
     * @param  \DateTime $end_date End Date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2BookingsDiffGetAsyncWithHttpInfo($start_date, $channel_connection_id = null, $end_date = null)
    {
        $returnType = '\Piksel\Kigo\ChannelsV2\Model\BookingDiffOutputListResourceList';
        $request = $this->channelsV2BookingsDiffGetRequest($start_date, $channel_connection_id, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelsV2BookingsDiffGet'
     *
     * @param  \DateTime $start_date Start Date (required)
     * @param  int $channel_connection_id Channel Connection ID (optional)
     * @param  \DateTime $end_date End Date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelsV2BookingsDiffGetRequest($start_date, $channel_connection_id = null, $end_date = null)
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling channelsV2BookingsDiffGet'
            );
        }

        $resourcePath = '/channels/v2/bookings/diff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($channel_connection_id !== null) {
            if('form' === 'form' && is_array($channel_connection_id)) {
                foreach($channel_connection_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ChannelConnectionID'] = $channel_connection_id;
            }
        }
        // query params
        if ($start_date !== null) {
            if('form' === 'form' && is_array($start_date)) {
                foreach($start_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['StartDate'] = $start_date;
            }
        }
        // query params
        if ($end_date !== null) {
            if('form' === 'form' && is_array($end_date)) {
                foreach($end_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['EndDate'] = $end_date;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelsV2BookingsIdCancelPut
     *
     * Cancel a Booking
     *
     * @param  int $id Booking ID (required)
     * @param  string $cancelled_by_role User&#39;s Role that cancelled the Booking (optional)
     * @param  string $cancellation_reason Optional Reason for Cancellation (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function channelsV2BookingsIdCancelPut($id, $cancelled_by_role = null, $cancellation_reason = null)
    {
        $this->channelsV2BookingsIdCancelPutWithHttpInfo($id, $cancelled_by_role, $cancellation_reason);
    }

    /**
     * Operation channelsV2BookingsIdCancelPutWithHttpInfo
     *
     * Cancel a Booking
     *
     * @param  int $id Booking ID (required)
     * @param  string $cancelled_by_role User&#39;s Role that cancelled the Booking (optional)
     * @param  string $cancellation_reason Optional Reason for Cancellation (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelsV2BookingsIdCancelPutWithHttpInfo($id, $cancelled_by_role = null, $cancellation_reason = null)
    {
        $request = $this->channelsV2BookingsIdCancelPutRequest($id, $cancelled_by_role, $cancellation_reason);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelsV2BookingsIdCancelPutAsync
     *
     * Cancel a Booking
     *
     * @param  int $id Booking ID (required)
     * @param  string $cancelled_by_role User&#39;s Role that cancelled the Booking (optional)
     * @param  string $cancellation_reason Optional Reason for Cancellation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2BookingsIdCancelPutAsync($id, $cancelled_by_role = null, $cancellation_reason = null)
    {
        return $this->channelsV2BookingsIdCancelPutAsyncWithHttpInfo($id, $cancelled_by_role, $cancellation_reason)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelsV2BookingsIdCancelPutAsyncWithHttpInfo
     *
     * Cancel a Booking
     *
     * @param  int $id Booking ID (required)
     * @param  string $cancelled_by_role User&#39;s Role that cancelled the Booking (optional)
     * @param  string $cancellation_reason Optional Reason for Cancellation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2BookingsIdCancelPutAsyncWithHttpInfo($id, $cancelled_by_role = null, $cancellation_reason = null)
    {
        $returnType = '';
        $request = $this->channelsV2BookingsIdCancelPutRequest($id, $cancelled_by_role, $cancellation_reason);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelsV2BookingsIdCancelPut'
     *
     * @param  int $id Booking ID (required)
     * @param  string $cancelled_by_role User&#39;s Role that cancelled the Booking (optional)
     * @param  string $cancellation_reason Optional Reason for Cancellation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelsV2BookingsIdCancelPutRequest($id, $cancelled_by_role = null, $cancellation_reason = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling channelsV2BookingsIdCancelPut'
            );
        }

        $resourcePath = '/channels/v2/bookings/{id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cancelled_by_role !== null) {
            if('form' === 'form' && is_array($cancelled_by_role)) {
                foreach($cancelled_by_role as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['cancelledByRole'] = $cancelled_by_role;
            }
        }
        // query params
        if ($cancellation_reason !== null) {
            if('form' === 'form' && is_array($cancellation_reason)) {
                foreach($cancellation_reason as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['cancellationReason'] = $cancellation_reason;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelsV2BookingsIdCreditcardsPost
     *
     * Save and try to authorize/charge a Credit Card for a Booking
     *
     * @param  int $id ID of the Booking (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\CreditCard $credit_card Credit Card object (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\PostBookingCreditCardResponse
     */
    public function channelsV2BookingsIdCreditcardsPost($id, $credit_card = null)
    {
        list($response) = $this->channelsV2BookingsIdCreditcardsPostWithHttpInfo($id, $credit_card);
        return $response;
    }

    /**
     * Operation channelsV2BookingsIdCreditcardsPostWithHttpInfo
     *
     * Save and try to authorize/charge a Credit Card for a Booking
     *
     * @param  int $id ID of the Booking (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\CreditCard $credit_card Credit Card object (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\PostBookingCreditCardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelsV2BookingsIdCreditcardsPostWithHttpInfo($id, $credit_card = null)
    {
        $request = $this->channelsV2BookingsIdCreditcardsPostRequest($id, $credit_card);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Piksel\Kigo\ChannelsV2\Model\PostBookingCreditCardResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\PostBookingCreditCardResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\Kigo\ChannelsV2\Model\PostBookingCreditCardResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\PostBookingCreditCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelsV2BookingsIdCreditcardsPostAsync
     *
     * Save and try to authorize/charge a Credit Card for a Booking
     *
     * @param  int $id ID of the Booking (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\CreditCard $credit_card Credit Card object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2BookingsIdCreditcardsPostAsync($id, $credit_card = null)
    {
        return $this->channelsV2BookingsIdCreditcardsPostAsyncWithHttpInfo($id, $credit_card)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelsV2BookingsIdCreditcardsPostAsyncWithHttpInfo
     *
     * Save and try to authorize/charge a Credit Card for a Booking
     *
     * @param  int $id ID of the Booking (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\CreditCard $credit_card Credit Card object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2BookingsIdCreditcardsPostAsyncWithHttpInfo($id, $credit_card = null)
    {
        $returnType = '\Piksel\Kigo\ChannelsV2\Model\PostBookingCreditCardResponse';
        $request = $this->channelsV2BookingsIdCreditcardsPostRequest($id, $credit_card);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelsV2BookingsIdCreditcardsPost'
     *
     * @param  int $id ID of the Booking (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\CreditCard $credit_card Credit Card object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelsV2BookingsIdCreditcardsPostRequest($id, $credit_card = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling channelsV2BookingsIdCreditcardsPost'
            );
        }

        $resourcePath = '/channels/v2/bookings/{id}/creditcards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($credit_card)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($credit_card));
            } else {
                $httpBody = $credit_card;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelsV2BookingsIdEventsPost
     *
     * Create a Booking Event
     *
     * @param  int $id Booking ID (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\BookingEvent $booking_event Booking Event (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function channelsV2BookingsIdEventsPost($id, $booking_event = null)
    {
        $this->channelsV2BookingsIdEventsPostWithHttpInfo($id, $booking_event);
    }

    /**
     * Operation channelsV2BookingsIdEventsPostWithHttpInfo
     *
     * Create a Booking Event
     *
     * @param  int $id Booking ID (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\BookingEvent $booking_event Booking Event (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelsV2BookingsIdEventsPostWithHttpInfo($id, $booking_event = null)
    {
        $request = $this->channelsV2BookingsIdEventsPostRequest($id, $booking_event);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelsV2BookingsIdEventsPostAsync
     *
     * Create a Booking Event
     *
     * @param  int $id Booking ID (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\BookingEvent $booking_event Booking Event (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2BookingsIdEventsPostAsync($id, $booking_event = null)
    {
        return $this->channelsV2BookingsIdEventsPostAsyncWithHttpInfo($id, $booking_event)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelsV2BookingsIdEventsPostAsyncWithHttpInfo
     *
     * Create a Booking Event
     *
     * @param  int $id Booking ID (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\BookingEvent $booking_event Booking Event (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2BookingsIdEventsPostAsyncWithHttpInfo($id, $booking_event = null)
    {
        $returnType = '';
        $request = $this->channelsV2BookingsIdEventsPostRequest($id, $booking_event);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelsV2BookingsIdEventsPost'
     *
     * @param  int $id Booking ID (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\BookingEvent $booking_event Booking Event (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelsV2BookingsIdEventsPostRequest($id, $booking_event = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling channelsV2BookingsIdEventsPost'
            );
        }

        $resourcePath = '/channels/v2/bookings/{id}/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($booking_event)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($booking_event));
            } else {
                $httpBody = $booking_event;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelsV2BookingsIdGet
     *
     * Get a Booking
     *
     * @param  int $id ID of the Booking (required)
     * @param  string[] $options Booking Options (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\BookingResource
     */
    public function channelsV2BookingsIdGet($id, $options = null)
    {
        list($response) = $this->channelsV2BookingsIdGetWithHttpInfo($id, $options);
        return $response;
    }

    /**
     * Operation channelsV2BookingsIdGetWithHttpInfo
     *
     * Get a Booking
     *
     * @param  int $id ID of the Booking (required)
     * @param  string[] $options Booking Options (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\BookingResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelsV2BookingsIdGetWithHttpInfo($id, $options = null)
    {
        $request = $this->channelsV2BookingsIdGetRequest($id, $options);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Piksel\Kigo\ChannelsV2\Model\BookingResource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\BookingResource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\Kigo\ChannelsV2\Model\BookingResource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\BookingResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelsV2BookingsIdGetAsync
     *
     * Get a Booking
     *
     * @param  int $id ID of the Booking (required)
     * @param  string[] $options Booking Options (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2BookingsIdGetAsync($id, $options = null)
    {
        return $this->channelsV2BookingsIdGetAsyncWithHttpInfo($id, $options)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelsV2BookingsIdGetAsyncWithHttpInfo
     *
     * Get a Booking
     *
     * @param  int $id ID of the Booking (required)
     * @param  string[] $options Booking Options (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2BookingsIdGetAsyncWithHttpInfo($id, $options = null)
    {
        $returnType = '\Piksel\Kigo\ChannelsV2\Model\BookingResource';
        $request = $this->channelsV2BookingsIdGetRequest($id, $options);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelsV2BookingsIdGet'
     *
     * @param  int $id ID of the Booking (required)
     * @param  string[] $options Booking Options (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelsV2BookingsIdGetRequest($id, $options = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling channelsV2BookingsIdGet'
            );
        }

        $resourcePath = '/channels/v2/bookings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($options !== null) {
            if('form' === 'form' && is_array($options)) {
                foreach($options as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['options'] = $options;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelsV2BookingsIdPut
     *
     * Update a Booking
     *
     * @param  int $id Booking ID (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\PutBookingRequest $put_booking_request Booking object to be updated (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\PutBookingResponse
     */
    public function channelsV2BookingsIdPut($id, $put_booking_request = null)
    {
        list($response) = $this->channelsV2BookingsIdPutWithHttpInfo($id, $put_booking_request);
        return $response;
    }

    /**
     * Operation channelsV2BookingsIdPutWithHttpInfo
     *
     * Update a Booking
     *
     * @param  int $id Booking ID (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\PutBookingRequest $put_booking_request Booking object to be updated (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\PutBookingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelsV2BookingsIdPutWithHttpInfo($id, $put_booking_request = null)
    {
        $request = $this->channelsV2BookingsIdPutRequest($id, $put_booking_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Piksel\Kigo\ChannelsV2\Model\PutBookingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\PutBookingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\Kigo\ChannelsV2\Model\PutBookingResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\PutBookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelsV2BookingsIdPutAsync
     *
     * Update a Booking
     *
     * @param  int $id Booking ID (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\PutBookingRequest $put_booking_request Booking object to be updated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2BookingsIdPutAsync($id, $put_booking_request = null)
    {
        return $this->channelsV2BookingsIdPutAsyncWithHttpInfo($id, $put_booking_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelsV2BookingsIdPutAsyncWithHttpInfo
     *
     * Update a Booking
     *
     * @param  int $id Booking ID (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\PutBookingRequest $put_booking_request Booking object to be updated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2BookingsIdPutAsyncWithHttpInfo($id, $put_booking_request = null)
    {
        $returnType = '\Piksel\Kigo\ChannelsV2\Model\PutBookingResponse';
        $request = $this->channelsV2BookingsIdPutRequest($id, $put_booking_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelsV2BookingsIdPut'
     *
     * @param  int $id Booking ID (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\PutBookingRequest $put_booking_request Booking object to be updated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelsV2BookingsIdPutRequest($id, $put_booking_request = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling channelsV2BookingsIdPut'
            );
        }

        $resourcePath = '/channels/v2/bookings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($put_booking_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($put_booking_request));
            } else {
                $httpBody = $put_booking_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelsV2BookingsPost
     *
     * Create a new Booking
     *
     * @param  \Piksel\Kigo\ChannelsV2\Model\PostBookingRequest $post_booking_request Booking object (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\PostBookingResponse
     */
    public function channelsV2BookingsPost($post_booking_request = null)
    {
        list($response) = $this->channelsV2BookingsPostWithHttpInfo($post_booking_request);
        return $response;
    }

    /**
     * Operation channelsV2BookingsPostWithHttpInfo
     *
     * Create a new Booking
     *
     * @param  \Piksel\Kigo\ChannelsV2\Model\PostBookingRequest $post_booking_request Booking object (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\ApiError|\Piksel\Kigo\ChannelsV2\Model\PostBookingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelsV2BookingsPostWithHttpInfo($post_booking_request = null)
    {
        $request = $this->channelsV2BookingsPostRequest($post_booking_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Piksel\Kigo\ChannelsV2\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Piksel\Kigo\ChannelsV2\Model\PostBookingResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\PostBookingResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\Kigo\ChannelsV2\Model\PostBookingResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\PostBookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelsV2BookingsPostAsync
     *
     * Create a new Booking
     *
     * @param  \Piksel\Kigo\ChannelsV2\Model\PostBookingRequest $post_booking_request Booking object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2BookingsPostAsync($post_booking_request = null)
    {
        return $this->channelsV2BookingsPostAsyncWithHttpInfo($post_booking_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelsV2BookingsPostAsyncWithHttpInfo
     *
     * Create a new Booking
     *
     * @param  \Piksel\Kigo\ChannelsV2\Model\PostBookingRequest $post_booking_request Booking object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2BookingsPostAsyncWithHttpInfo($post_booking_request = null)
    {
        $returnType = '\Piksel\Kigo\ChannelsV2\Model\PostBookingResponse';
        $request = $this->channelsV2BookingsPostRequest($post_booking_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelsV2BookingsPost'
     *
     * @param  \Piksel\Kigo\ChannelsV2\Model\PostBookingRequest $post_booking_request Booking object (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelsV2BookingsPostRequest($post_booking_request = null)
    {

        $resourcePath = '/channels/v2/bookings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($post_booking_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($post_booking_request));
            } else {
                $httpBody = $post_booking_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proV1BookingsGet
     *
     * @param  \DateTime $start_date start_date (required)
     * @param  int $account_id account_id (optional)
     * @param  \DateTime $end_date end_date (optional)
     * @param  int $property_id property_id (optional)
     * @param  string $channel channel (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\Kigo\ChannelsV2\Model\GetBookingVm
     */
    public function proV1BookingsGet($start_date, $account_id = null, $end_date = null, $property_id = null, $channel = null)
    {
        list($response) = $this->proV1BookingsGetWithHttpInfo($start_date, $account_id, $end_date, $property_id, $channel);
        return $response;
    }

    /**
     * Operation proV1BookingsGetWithHttpInfo
     *
     * @param  \DateTime $start_date (required)
     * @param  int $account_id (optional)
     * @param  \DateTime $end_date (optional)
     * @param  int $property_id (optional)
     * @param  string $channel (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\Kigo\ChannelsV2\Model\GetBookingVm, HTTP status code, HTTP response headers (array of strings)
     */
    public function proV1BookingsGetWithHttpInfo($start_date, $account_id = null, $end_date = null, $property_id = null, $channel = null)
    {
        $request = $this->proV1BookingsGetRequest($start_date, $account_id, $end_date, $property_id, $channel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Piksel\Kigo\ChannelsV2\Model\GetBookingVm' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\GetBookingVm', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\Kigo\ChannelsV2\Model\GetBookingVm';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\GetBookingVm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proV1BookingsGetAsync
     *
     * @param  \DateTime $start_date (required)
     * @param  int $account_id (optional)
     * @param  \DateTime $end_date (optional)
     * @param  int $property_id (optional)
     * @param  string $channel (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1BookingsGetAsync($start_date, $account_id = null, $end_date = null, $property_id = null, $channel = null)
    {
        return $this->proV1BookingsGetAsyncWithHttpInfo($start_date, $account_id, $end_date, $property_id, $channel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proV1BookingsGetAsyncWithHttpInfo
     *
     * @param  \DateTime $start_date (required)
     * @param  int $account_id (optional)
     * @param  \DateTime $end_date (optional)
     * @param  int $property_id (optional)
     * @param  string $channel (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1BookingsGetAsyncWithHttpInfo($start_date, $account_id = null, $end_date = null, $property_id = null, $channel = null)
    {
        $returnType = '\Piksel\Kigo\ChannelsV2\Model\GetBookingVm';
        $request = $this->proV1BookingsGetRequest($start_date, $account_id, $end_date, $property_id, $channel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proV1BookingsGet'
     *
     * @param  \DateTime $start_date (required)
     * @param  int $account_id (optional)
     * @param  \DateTime $end_date (optional)
     * @param  int $property_id (optional)
     * @param  string $channel (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function proV1BookingsGetRequest($start_date, $account_id = null, $end_date = null, $property_id = null, $channel = null)
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling proV1BookingsGet'
            );
        }

        $resourcePath = '/pro/v1/bookings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($account_id !== null) {
            if('form' === 'form' && is_array($account_id)) {
                foreach($account_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['AccountID'] = $account_id;
            }
        }
        // query params
        if ($start_date !== null) {
            if('form' === 'form' && is_array($start_date)) {
                foreach($start_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['StartDate'] = $start_date;
            }
        }
        // query params
        if ($end_date !== null) {
            if('form' === 'form' && is_array($end_date)) {
                foreach($end_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['EndDate'] = $end_date;
            }
        }
        // query params
        if ($property_id !== null) {
            if('form' === 'form' && is_array($property_id)) {
                foreach($property_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['PropertyID'] = $property_id;
            }
        }
        // query params
        if ($channel !== null) {
            if('form' === 'form' && is_array($channel)) {
                foreach($channel as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['Channel'] = $channel;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proV1BookingsIdGet
     *
     * @param  int $id id (required)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\Kigo\ChannelsV2\Model\GetBookingVm
     */
    public function proV1BookingsIdGet($id)
    {
        list($response) = $this->proV1BookingsIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation proV1BookingsIdGetWithHttpInfo
     *
     * @param  int $id (required)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\Kigo\ChannelsV2\Model\GetBookingVm, HTTP status code, HTTP response headers (array of strings)
     */
    public function proV1BookingsIdGetWithHttpInfo($id)
    {
        $request = $this->proV1BookingsIdGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Piksel\Kigo\ChannelsV2\Model\GetBookingVm' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\GetBookingVm', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\Kigo\ChannelsV2\Model\GetBookingVm';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\GetBookingVm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proV1BookingsIdGetAsync
     *
     * @param  int $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1BookingsIdGetAsync($id)
    {
        return $this->proV1BookingsIdGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proV1BookingsIdGetAsyncWithHttpInfo
     *
     * @param  int $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1BookingsIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\Piksel\Kigo\ChannelsV2\Model\GetBookingVm';
        $request = $this->proV1BookingsIdGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proV1BookingsIdGet'
     *
     * @param  int $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function proV1BookingsIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling proV1BookingsIdGet'
            );
        }

        $resourcePath = '/pro/v1/bookings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
