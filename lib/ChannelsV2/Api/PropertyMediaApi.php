<?php
/**
 * PropertyMediaApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\ChannelsV2\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Piksel\Kigo\ChannelsV2\ApiException;
use Piksel\Kigo\Configuration;
use Piksel\Kigo\HeaderSelector;
use Piksel\Kigo\ObjectSerializer;

/**
 * PropertyMediaApi Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 */
class PropertyMediaApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation proV1ContentPropertiesIdMediasGet
     *
     * @param  int $id id (required)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\Kigo\ChannelsV2\Model\GetPropertyMediaVm
     */
    public function proV1ContentPropertiesIdMediasGet($id)
    {
        list($response) = $this->proV1ContentPropertiesIdMediasGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation proV1ContentPropertiesIdMediasGetWithHttpInfo
     *
     * @param  int $id (required)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\Kigo\ChannelsV2\Model\GetPropertyMediaVm, HTTP status code, HTTP response headers (array of strings)
     */
    public function proV1ContentPropertiesIdMediasGetWithHttpInfo($id)
    {
        $request = $this->proV1ContentPropertiesIdMediasGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Piksel\Kigo\ChannelsV2\Model\GetPropertyMediaVm' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\GetPropertyMediaVm', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\Kigo\ChannelsV2\Model\GetPropertyMediaVm';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\GetPropertyMediaVm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proV1ContentPropertiesIdMediasGetAsync
     *
     * @param  int $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesIdMediasGetAsync($id)
    {
        return $this->proV1ContentPropertiesIdMediasGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proV1ContentPropertiesIdMediasGetAsyncWithHttpInfo
     *
     * @param  int $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesIdMediasGetAsyncWithHttpInfo($id)
    {
        $returnType = '\Piksel\Kigo\ChannelsV2\Model\GetPropertyMediaVm';
        $request = $this->proV1ContentPropertiesIdMediasGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proV1ContentPropertiesIdMediasGet'
     *
     * @param  int $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function proV1ContentPropertiesIdMediasGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling proV1ContentPropertiesIdMediasGet'
            );
        }

        $resourcePath = '/pro/v1/content/properties/{id}/medias';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proV1ContentPropertiesIdMediasImagesPost
     *
     * @param  int $id id (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\PostPropertyMediaCommand $post_property_media_command post_property_media_command (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\Kigo\ChannelsV2\Model\Int32CommandOkEnvelope
     */
    public function proV1ContentPropertiesIdMediasImagesPost($id, $post_property_media_command = null)
    {
        list($response) = $this->proV1ContentPropertiesIdMediasImagesPostWithHttpInfo($id, $post_property_media_command);
        return $response;
    }

    /**
     * Operation proV1ContentPropertiesIdMediasImagesPostWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\PostPropertyMediaCommand $post_property_media_command (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\Kigo\ChannelsV2\Model\Int32CommandOkEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function proV1ContentPropertiesIdMediasImagesPostWithHttpInfo($id, $post_property_media_command = null)
    {
        $request = $this->proV1ContentPropertiesIdMediasImagesPostRequest($id, $post_property_media_command);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Piksel\Kigo\ChannelsV2\Model\Int32CommandOkEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\Int32CommandOkEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\Kigo\ChannelsV2\Model\Int32CommandOkEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\Int32CommandOkEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proV1ContentPropertiesIdMediasImagesPostAsync
     *
     * @param  int $id (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\PostPropertyMediaCommand $post_property_media_command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesIdMediasImagesPostAsync($id, $post_property_media_command = null)
    {
        return $this->proV1ContentPropertiesIdMediasImagesPostAsyncWithHttpInfo($id, $post_property_media_command)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proV1ContentPropertiesIdMediasImagesPostAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\PostPropertyMediaCommand $post_property_media_command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesIdMediasImagesPostAsyncWithHttpInfo($id, $post_property_media_command = null)
    {
        $returnType = '\Piksel\Kigo\ChannelsV2\Model\Int32CommandOkEnvelope';
        $request = $this->proV1ContentPropertiesIdMediasImagesPostRequest($id, $post_property_media_command);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proV1ContentPropertiesIdMediasImagesPost'
     *
     * @param  int $id (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\PostPropertyMediaCommand $post_property_media_command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function proV1ContentPropertiesIdMediasImagesPostRequest($id, $post_property_media_command = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling proV1ContentPropertiesIdMediasImagesPost'
            );
        }

        $resourcePath = '/pro/v1/content/properties/{id}/medias/images';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($post_property_media_command)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($post_property_media_command));
            } else {
                $httpBody = $post_property_media_command;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proV1ContentPropertiesIdMediasMediaIdDelete
     *
     * @param  int $id id (required)
     * @param  int $media_id media_id (required)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\Kigo\ChannelsV2\Model\BooleanCommandOkEnvelope
     */
    public function proV1ContentPropertiesIdMediasMediaIdDelete($id, $media_id)
    {
        list($response) = $this->proV1ContentPropertiesIdMediasMediaIdDeleteWithHttpInfo($id, $media_id);
        return $response;
    }

    /**
     * Operation proV1ContentPropertiesIdMediasMediaIdDeleteWithHttpInfo
     *
     * @param  int $id (required)
     * @param  int $media_id (required)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\Kigo\ChannelsV2\Model\BooleanCommandOkEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function proV1ContentPropertiesIdMediasMediaIdDeleteWithHttpInfo($id, $media_id)
    {
        $request = $this->proV1ContentPropertiesIdMediasMediaIdDeleteRequest($id, $media_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Piksel\Kigo\ChannelsV2\Model\BooleanCommandOkEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\BooleanCommandOkEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\Kigo\ChannelsV2\Model\BooleanCommandOkEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\BooleanCommandOkEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proV1ContentPropertiesIdMediasMediaIdDeleteAsync
     *
     * @param  int $id (required)
     * @param  int $media_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesIdMediasMediaIdDeleteAsync($id, $media_id)
    {
        return $this->proV1ContentPropertiesIdMediasMediaIdDeleteAsyncWithHttpInfo($id, $media_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proV1ContentPropertiesIdMediasMediaIdDeleteAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  int $media_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesIdMediasMediaIdDeleteAsyncWithHttpInfo($id, $media_id)
    {
        $returnType = '\Piksel\Kigo\ChannelsV2\Model\BooleanCommandOkEnvelope';
        $request = $this->proV1ContentPropertiesIdMediasMediaIdDeleteRequest($id, $media_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proV1ContentPropertiesIdMediasMediaIdDelete'
     *
     * @param  int $id (required)
     * @param  int $media_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function proV1ContentPropertiesIdMediasMediaIdDeleteRequest($id, $media_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling proV1ContentPropertiesIdMediasMediaIdDelete'
            );
        }
        // verify the required parameter 'media_id' is set
        if ($media_id === null || (is_array($media_id) && count($media_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $media_id when calling proV1ContentPropertiesIdMediasMediaIdDelete'
            );
        }

        $resourcePath = '/pro/v1/content/properties/{id}/medias/{mediaId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($media_id !== null) {
            $resourcePath = str_replace(
                '{' . 'mediaId' . '}',
                ObjectSerializer::toPathValue($media_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proV1ContentPropertiesIdMediasMediaIdPut
     *
     * @param  int $id id (required)
     * @param  int $media_id media_id (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\PutPropertyMediaTagsAndOrderCommand $put_property_media_tags_and_order_command put_property_media_tags_and_order_command (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\Kigo\ChannelsV2\Model\BooleanCommandOkEnvelope
     */
    public function proV1ContentPropertiesIdMediasMediaIdPut($id, $media_id, $put_property_media_tags_and_order_command = null)
    {
        list($response) = $this->proV1ContentPropertiesIdMediasMediaIdPutWithHttpInfo($id, $media_id, $put_property_media_tags_and_order_command);
        return $response;
    }

    /**
     * Operation proV1ContentPropertiesIdMediasMediaIdPutWithHttpInfo
     *
     * @param  int $id (required)
     * @param  int $media_id (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\PutPropertyMediaTagsAndOrderCommand $put_property_media_tags_and_order_command (optional)
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\Kigo\ChannelsV2\Model\BooleanCommandOkEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function proV1ContentPropertiesIdMediasMediaIdPutWithHttpInfo($id, $media_id, $put_property_media_tags_and_order_command = null)
    {
        $request = $this->proV1ContentPropertiesIdMediasMediaIdPutRequest($id, $media_id, $put_property_media_tags_and_order_command);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Piksel\Kigo\ChannelsV2\Model\BooleanCommandOkEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\BooleanCommandOkEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\Kigo\ChannelsV2\Model\BooleanCommandOkEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\BooleanCommandOkEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proV1ContentPropertiesIdMediasMediaIdPutAsync
     *
     * @param  int $id (required)
     * @param  int $media_id (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\PutPropertyMediaTagsAndOrderCommand $put_property_media_tags_and_order_command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesIdMediasMediaIdPutAsync($id, $media_id, $put_property_media_tags_and_order_command = null)
    {
        return $this->proV1ContentPropertiesIdMediasMediaIdPutAsyncWithHttpInfo($id, $media_id, $put_property_media_tags_and_order_command)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proV1ContentPropertiesIdMediasMediaIdPutAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  int $media_id (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\PutPropertyMediaTagsAndOrderCommand $put_property_media_tags_and_order_command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesIdMediasMediaIdPutAsyncWithHttpInfo($id, $media_id, $put_property_media_tags_and_order_command = null)
    {
        $returnType = '\Piksel\Kigo\ChannelsV2\Model\BooleanCommandOkEnvelope';
        $request = $this->proV1ContentPropertiesIdMediasMediaIdPutRequest($id, $media_id, $put_property_media_tags_and_order_command);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proV1ContentPropertiesIdMediasMediaIdPut'
     *
     * @param  int $id (required)
     * @param  int $media_id (required)
     * @param  \Piksel\Kigo\ChannelsV2\Model\PutPropertyMediaTagsAndOrderCommand $put_property_media_tags_and_order_command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function proV1ContentPropertiesIdMediasMediaIdPutRequest($id, $media_id, $put_property_media_tags_and_order_command = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling proV1ContentPropertiesIdMediasMediaIdPut'
            );
        }
        // verify the required parameter 'media_id' is set
        if ($media_id === null || (is_array($media_id) && count($media_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $media_id when calling proV1ContentPropertiesIdMediasMediaIdPut'
            );
        }

        $resourcePath = '/pro/v1/content/properties/{id}/medias/{mediaId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($media_id !== null) {
            $resourcePath = str_replace(
                '{' . 'mediaId' . '}',
                ObjectSerializer::toPathValue($media_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($put_property_media_tags_and_order_command)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($put_property_media_tags_and_order_command));
            } else {
                $httpBody = $put_property_media_tags_and_order_command;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proV1ContentPropertiesMediatagsGet
     *
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\Kigo\ChannelsV2\Model\GetMediaTagsTagVm[]
     */
    public function proV1ContentPropertiesMediatagsGet()
    {
        list($response) = $this->proV1ContentPropertiesMediatagsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation proV1ContentPropertiesMediatagsGetWithHttpInfo
     *
     *
     * @throws \Piksel\Kigo\ChannelsV2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\Kigo\ChannelsV2\Model\GetMediaTagsTagVm[], HTTP status code, HTTP response headers (array of strings)
     */
    public function proV1ContentPropertiesMediatagsGetWithHttpInfo()
    {
        $request = $this->proV1ContentPropertiesMediatagsGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Piksel\Kigo\ChannelsV2\Model\GetMediaTagsTagVm[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\Kigo\ChannelsV2\Model\GetMediaTagsTagVm[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\Kigo\ChannelsV2\Model\GetMediaTagsTagVm[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\Kigo\ChannelsV2\Model\GetMediaTagsTagVm[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proV1ContentPropertiesMediatagsGetAsync
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesMediatagsGetAsync()
    {
        return $this->proV1ContentPropertiesMediatagsGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proV1ContentPropertiesMediatagsGetAsyncWithHttpInfo
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesMediatagsGetAsyncWithHttpInfo()
    {
        $returnType = '\Piksel\Kigo\ChannelsV2\Model\GetMediaTagsTagVm[]';
        $request = $this->proV1ContentPropertiesMediatagsGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proV1ContentPropertiesMediatagsGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function proV1ContentPropertiesMediatagsGetRequest()
    {

        $resourcePath = '/pro/v1/content/properties/mediatags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
