<?php
/**
 * ContractSettings
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\ChannelsV2\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * ContractSettings Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ContractSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ContractSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'payment_plans' => '\Piksel\Kigo\ChannelsV2\Model\PaymentPlanSetting[]',
        'is_master' => 'bool',
        'version' => 'string',
        'section1_version_id' => 'int',
        'section2_version_id' => 'int',
        'section3_version_id' => 'int',
        'section1' => '\Piksel\Kigo\ChannelsV2\Model\ContractVersion',
        'section2' => '\Piksel\Kigo\ChannelsV2\Model\ContractVersion',
        'section3' => '\Piksel\Kigo\ChannelsV2\Model\ContractVersion',
        'is_configured' => 'bool',
        'min_age' => 'int',
        'contractual_terms' => '\Piksel\Kigo\ChannelsV2\Model\ContractualTerms[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'payment_plans' => null,
        'is_master' => null,
        'version' => 'uuid',
        'section1_version_id' => 'int32',
        'section2_version_id' => 'int32',
        'section3_version_id' => 'int32',
        'section1' => null,
        'section2' => null,
        'section3' => null,
        'is_configured' => null,
        'min_age' => 'int32',
        'contractual_terms' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'payment_plans' => 'paymentPlans',
        'is_master' => 'isMaster',
        'version' => 'version',
        'section1_version_id' => 'section1VersionID',
        'section2_version_id' => 'section2VersionID',
        'section3_version_id' => 'section3VersionID',
        'section1' => 'section1',
        'section2' => 'section2',
        'section3' => 'section3',
        'is_configured' => 'isConfigured',
        'min_age' => 'minAge',
        'contractual_terms' => 'contractualTerms'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'payment_plans' => 'setPaymentPlans',
        'is_master' => 'setIsMaster',
        'version' => 'setVersion',
        'section1_version_id' => 'setSection1VersionId',
        'section2_version_id' => 'setSection2VersionId',
        'section3_version_id' => 'setSection3VersionId',
        'section1' => 'setSection1',
        'section2' => 'setSection2',
        'section3' => 'setSection3',
        'is_configured' => 'setIsConfigured',
        'min_age' => 'setMinAge',
        'contractual_terms' => 'setContractualTerms'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'payment_plans' => 'getPaymentPlans',
        'is_master' => 'getIsMaster',
        'version' => 'getVersion',
        'section1_version_id' => 'getSection1VersionId',
        'section2_version_id' => 'getSection2VersionId',
        'section3_version_id' => 'getSection3VersionId',
        'section1' => 'getSection1',
        'section2' => 'getSection2',
        'section3' => 'getSection3',
        'is_configured' => 'getIsConfigured',
        'min_age' => 'getMinAge',
        'contractual_terms' => 'getContractualTerms'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['payment_plans'] = $data['payment_plans'] ?? null;
        $this->container['is_master'] = $data['is_master'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['section1_version_id'] = $data['section1_version_id'] ?? null;
        $this->container['section2_version_id'] = $data['section2_version_id'] ?? null;
        $this->container['section3_version_id'] = $data['section3_version_id'] ?? null;
        $this->container['section1'] = $data['section1'] ?? null;
        $this->container['section2'] = $data['section2'] ?? null;
        $this->container['section3'] = $data['section3'] ?? null;
        $this->container['is_configured'] = $data['is_configured'] ?? null;
        $this->container['min_age'] = $data['min_age'] ?? null;
        $this->container['contractual_terms'] = $data['contractual_terms'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets payment_plans
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\PaymentPlanSetting[]|null
     */
    public function getPaymentPlans()
    {
        return $this->container['payment_plans'];
    }

    /**
     * Sets payment_plans
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\PaymentPlanSetting[]|null $payment_plans payment_plans
     *
     * @return self
     */
    public function setPaymentPlans($payment_plans)
    {
        $this->container['payment_plans'] = $payment_plans;

        return $this;
    }

    /**
     * Gets is_master
     *
     * @return bool|null
     */
    public function getIsMaster()
    {
        return $this->container['is_master'];
    }

    /**
     * Sets is_master
     *
     * @param bool|null $is_master is_master
     *
     * @return self
     */
    public function setIsMaster($is_master)
    {
        $this->container['is_master'] = $is_master;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets section1_version_id
     *
     * @return int|null
     */
    public function getSection1VersionId()
    {
        return $this->container['section1_version_id'];
    }

    /**
     * Sets section1_version_id
     *
     * @param int|null $section1_version_id section1_version_id
     *
     * @return self
     */
    public function setSection1VersionId($section1_version_id)
    {
        $this->container['section1_version_id'] = $section1_version_id;

        return $this;
    }

    /**
     * Gets section2_version_id
     *
     * @return int|null
     */
    public function getSection2VersionId()
    {
        return $this->container['section2_version_id'];
    }

    /**
     * Sets section2_version_id
     *
     * @param int|null $section2_version_id section2_version_id
     *
     * @return self
     */
    public function setSection2VersionId($section2_version_id)
    {
        $this->container['section2_version_id'] = $section2_version_id;

        return $this;
    }

    /**
     * Gets section3_version_id
     *
     * @return int|null
     */
    public function getSection3VersionId()
    {
        return $this->container['section3_version_id'];
    }

    /**
     * Sets section3_version_id
     *
     * @param int|null $section3_version_id section3_version_id
     *
     * @return self
     */
    public function setSection3VersionId($section3_version_id)
    {
        $this->container['section3_version_id'] = $section3_version_id;

        return $this;
    }

    /**
     * Gets section1
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\ContractVersion|null
     */
    public function getSection1()
    {
        return $this->container['section1'];
    }

    /**
     * Sets section1
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\ContractVersion|null $section1 section1
     *
     * @return self
     */
    public function setSection1($section1)
    {
        $this->container['section1'] = $section1;

        return $this;
    }

    /**
     * Gets section2
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\ContractVersion|null
     */
    public function getSection2()
    {
        return $this->container['section2'];
    }

    /**
     * Sets section2
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\ContractVersion|null $section2 section2
     *
     * @return self
     */
    public function setSection2($section2)
    {
        $this->container['section2'] = $section2;

        return $this;
    }

    /**
     * Gets section3
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\ContractVersion|null
     */
    public function getSection3()
    {
        return $this->container['section3'];
    }

    /**
     * Sets section3
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\ContractVersion|null $section3 section3
     *
     * @return self
     */
    public function setSection3($section3)
    {
        $this->container['section3'] = $section3;

        return $this;
    }

    /**
     * Gets is_configured
     *
     * @return bool|null
     */
    public function getIsConfigured()
    {
        return $this->container['is_configured'];
    }

    /**
     * Sets is_configured
     *
     * @param bool|null $is_configured is_configured
     *
     * @return self
     */
    public function setIsConfigured($is_configured)
    {
        $this->container['is_configured'] = $is_configured;

        return $this;
    }

    /**
     * Gets min_age
     *
     * @return int|null
     */
    public function getMinAge()
    {
        return $this->container['min_age'];
    }

    /**
     * Sets min_age
     *
     * @param int|null $min_age min_age
     *
     * @return self
     */
    public function setMinAge($min_age)
    {
        $this->container['min_age'] = $min_age;

        return $this;
    }

    /**
     * Gets contractual_terms
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\ContractualTerms[]|null
     */
    public function getContractualTerms()
    {
        return $this->container['contractual_terms'];
    }

    /**
     * Sets contractual_terms
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\ContractualTerms[]|null $contractual_terms contractual_terms
     *
     * @return self
     */
    public function setContractualTerms($contractual_terms)
    {
        $this->container['contractual_terms'] = $contractual_terms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


