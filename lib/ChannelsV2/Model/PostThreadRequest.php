<?php
/**
 * PostThreadRequest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\ChannelsV2\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * PostThreadRequest Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PostThreadRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PostThreadRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'thread_external_key' => 'string',
        'channel_connection_id' => 'int',
        'listing_id' => 'int',
        'check_in' => '\DateTime',
        'check_out' => '\DateTime',
        'location_booking_id' => 'int',
        'deadline_for_response' => '\DateTime',
        'guest_external_key' => 'string',
        'guest_first_name' => 'string',
        'guest_last_name' => 'string',
        'guest_email' => 'string',
        'guest_locale' => 'string',
        'guest_location' => 'string',
        'guest_user_id' => 'int',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'thread_external_key' => null,
        'channel_connection_id' => 'int32',
        'listing_id' => 'int32',
        'check_in' => 'date',
        'check_out' => 'date',
        'location_booking_id' => 'int32',
        'deadline_for_response' => 'date-time',
        'guest_external_key' => null,
        'guest_first_name' => null,
        'guest_last_name' => null,
        'guest_email' => null,
        'guest_locale' => null,
        'guest_location' => null,
        'guest_user_id' => 'int32',
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'thread_external_key' => 'threadExternalKey',
        'channel_connection_id' => 'channelConnectionID',
        'listing_id' => 'listingID',
        'check_in' => 'checkIn',
        'check_out' => 'checkOut',
        'location_booking_id' => 'locationBookingID',
        'deadline_for_response' => 'deadlineForResponse',
        'guest_external_key' => 'guestExternalKey',
        'guest_first_name' => 'guestFirstName',
        'guest_last_name' => 'guestLastName',
        'guest_email' => 'guestEmail',
        'guest_locale' => 'guestLocale',
        'guest_location' => 'guestLocation',
        'guest_user_id' => 'guestUserID',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'thread_external_key' => 'setThreadExternalKey',
        'channel_connection_id' => 'setChannelConnectionId',
        'listing_id' => 'setListingId',
        'check_in' => 'setCheckIn',
        'check_out' => 'setCheckOut',
        'location_booking_id' => 'setLocationBookingId',
        'deadline_for_response' => 'setDeadlineForResponse',
        'guest_external_key' => 'setGuestExternalKey',
        'guest_first_name' => 'setGuestFirstName',
        'guest_last_name' => 'setGuestLastName',
        'guest_email' => 'setGuestEmail',
        'guest_locale' => 'setGuestLocale',
        'guest_location' => 'setGuestLocation',
        'guest_user_id' => 'setGuestUserId',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'thread_external_key' => 'getThreadExternalKey',
        'channel_connection_id' => 'getChannelConnectionId',
        'listing_id' => 'getListingId',
        'check_in' => 'getCheckIn',
        'check_out' => 'getCheckOut',
        'location_booking_id' => 'getLocationBookingId',
        'deadline_for_response' => 'getDeadlineForResponse',
        'guest_external_key' => 'getGuestExternalKey',
        'guest_first_name' => 'getGuestFirstName',
        'guest_last_name' => 'getGuestLastName',
        'guest_email' => 'getGuestEmail',
        'guest_locale' => 'getGuestLocale',
        'guest_location' => 'getGuestLocation',
        'guest_user_id' => 'getGuestUserId',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['thread_external_key'] = $data['thread_external_key'] ?? null;
        $this->container['channel_connection_id'] = $data['channel_connection_id'] ?? null;
        $this->container['listing_id'] = $data['listing_id'] ?? null;
        $this->container['check_in'] = $data['check_in'] ?? null;
        $this->container['check_out'] = $data['check_out'] ?? null;
        $this->container['location_booking_id'] = $data['location_booking_id'] ?? null;
        $this->container['deadline_for_response'] = $data['deadline_for_response'] ?? null;
        $this->container['guest_external_key'] = $data['guest_external_key'] ?? null;
        $this->container['guest_first_name'] = $data['guest_first_name'] ?? null;
        $this->container['guest_last_name'] = $data['guest_last_name'] ?? null;
        $this->container['guest_email'] = $data['guest_email'] ?? null;
        $this->container['guest_locale'] = $data['guest_locale'] ?? null;
        $this->container['guest_location'] = $data['guest_location'] ?? null;
        $this->container['guest_user_id'] = $data['guest_user_id'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['thread_external_key']) && (mb_strlen($this->container['thread_external_key']) > 200)) {
            $invalidProperties[] = "invalid value for 'thread_external_key', the character length must be smaller than or equal to 200.";
        }

        if ($this->container['channel_connection_id'] === null) {
            $invalidProperties[] = "'channel_connection_id' can't be null";
        }
        if (!is_null($this->container['guest_external_key']) && (mb_strlen($this->container['guest_external_key']) > 200)) {
            $invalidProperties[] = "invalid value for 'guest_external_key', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['guest_first_name']) && (mb_strlen($this->container['guest_first_name']) > 200)) {
            $invalidProperties[] = "invalid value for 'guest_first_name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['guest_last_name']) && (mb_strlen($this->container['guest_last_name']) > 200)) {
            $invalidProperties[] = "invalid value for 'guest_last_name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['guest_email']) && (mb_strlen($this->container['guest_email']) > 200)) {
            $invalidProperties[] = "invalid value for 'guest_email', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['guest_locale']) && (mb_strlen($this->container['guest_locale']) > 5)) {
            $invalidProperties[] = "invalid value for 'guest_locale', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['guest_location']) && (mb_strlen($this->container['guest_location']) > 200)) {
            $invalidProperties[] = "invalid value for 'guest_location', the character length must be smaller than or equal to 200.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets thread_external_key
     *
     * @return string|null
     */
    public function getThreadExternalKey()
    {
        return $this->container['thread_external_key'];
    }

    /**
     * Sets thread_external_key
     *
     * @param string|null $thread_external_key thread_external_key
     *
     * @return self
     */
    public function setThreadExternalKey($thread_external_key)
    {
        if (!is_null($thread_external_key) && (mb_strlen($thread_external_key) > 200)) {
            throw new \InvalidArgumentException('invalid length for $thread_external_key when calling PostThreadRequest., must be smaller than or equal to 200.');
        }

        $this->container['thread_external_key'] = $thread_external_key;

        return $this;
    }

    /**
     * Gets channel_connection_id
     *
     * @return int
     */
    public function getChannelConnectionId()
    {
        return $this->container['channel_connection_id'];
    }

    /**
     * Sets channel_connection_id
     *
     * @param int $channel_connection_id channel_connection_id
     *
     * @return self
     */
    public function setChannelConnectionId($channel_connection_id)
    {
        $this->container['channel_connection_id'] = $channel_connection_id;

        return $this;
    }

    /**
     * Gets listing_id
     *
     * @return int|null
     */
    public function getListingId()
    {
        return $this->container['listing_id'];
    }

    /**
     * Sets listing_id
     *
     * @param int|null $listing_id listing_id
     *
     * @return self
     */
    public function setListingId($listing_id)
    {
        $this->container['listing_id'] = $listing_id;

        return $this;
    }

    /**
     * Gets check_in
     *
     * @return \DateTime|null
     */
    public function getCheckIn()
    {
        return $this->container['check_in'];
    }

    /**
     * Sets check_in
     *
     * @param \DateTime|null $check_in check_in
     *
     * @return self
     */
    public function setCheckIn($check_in)
    {
        $this->container['check_in'] = $check_in;

        return $this;
    }

    /**
     * Gets check_out
     *
     * @return \DateTime|null
     */
    public function getCheckOut()
    {
        return $this->container['check_out'];
    }

    /**
     * Sets check_out
     *
     * @param \DateTime|null $check_out check_out
     *
     * @return self
     */
    public function setCheckOut($check_out)
    {
        $this->container['check_out'] = $check_out;

        return $this;
    }

    /**
     * Gets location_booking_id
     *
     * @return int|null
     */
    public function getLocationBookingId()
    {
        return $this->container['location_booking_id'];
    }

    /**
     * Sets location_booking_id
     *
     * @param int|null $location_booking_id location_booking_id
     *
     * @return self
     */
    public function setLocationBookingId($location_booking_id)
    {
        $this->container['location_booking_id'] = $location_booking_id;

        return $this;
    }

    /**
     * Gets deadline_for_response
     *
     * @return \DateTime|null
     */
    public function getDeadlineForResponse()
    {
        return $this->container['deadline_for_response'];
    }

    /**
     * Sets deadline_for_response
     *
     * @param \DateTime|null $deadline_for_response deadline_for_response
     *
     * @return self
     */
    public function setDeadlineForResponse($deadline_for_response)
    {
        $this->container['deadline_for_response'] = $deadline_for_response;

        return $this;
    }

    /**
     * Gets guest_external_key
     *
     * @return string|null
     */
    public function getGuestExternalKey()
    {
        return $this->container['guest_external_key'];
    }

    /**
     * Sets guest_external_key
     *
     * @param string|null $guest_external_key guest_external_key
     *
     * @return self
     */
    public function setGuestExternalKey($guest_external_key)
    {
        if (!is_null($guest_external_key) && (mb_strlen($guest_external_key) > 200)) {
            throw new \InvalidArgumentException('invalid length for $guest_external_key when calling PostThreadRequest., must be smaller than or equal to 200.');
        }

        $this->container['guest_external_key'] = $guest_external_key;

        return $this;
    }

    /**
     * Gets guest_first_name
     *
     * @return string|null
     */
    public function getGuestFirstName()
    {
        return $this->container['guest_first_name'];
    }

    /**
     * Sets guest_first_name
     *
     * @param string|null $guest_first_name guest_first_name
     *
     * @return self
     */
    public function setGuestFirstName($guest_first_name)
    {
        if (!is_null($guest_first_name) && (mb_strlen($guest_first_name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $guest_first_name when calling PostThreadRequest., must be smaller than or equal to 200.');
        }

        $this->container['guest_first_name'] = $guest_first_name;

        return $this;
    }

    /**
     * Gets guest_last_name
     *
     * @return string|null
     */
    public function getGuestLastName()
    {
        return $this->container['guest_last_name'];
    }

    /**
     * Sets guest_last_name
     *
     * @param string|null $guest_last_name guest_last_name
     *
     * @return self
     */
    public function setGuestLastName($guest_last_name)
    {
        if (!is_null($guest_last_name) && (mb_strlen($guest_last_name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $guest_last_name when calling PostThreadRequest., must be smaller than or equal to 200.');
        }

        $this->container['guest_last_name'] = $guest_last_name;

        return $this;
    }

    /**
     * Gets guest_email
     *
     * @return string|null
     */
    public function getGuestEmail()
    {
        return $this->container['guest_email'];
    }

    /**
     * Sets guest_email
     *
     * @param string|null $guest_email guest_email
     *
     * @return self
     */
    public function setGuestEmail($guest_email)
    {
        if (!is_null($guest_email) && (mb_strlen($guest_email) > 200)) {
            throw new \InvalidArgumentException('invalid length for $guest_email when calling PostThreadRequest., must be smaller than or equal to 200.');
        }

        $this->container['guest_email'] = $guest_email;

        return $this;
    }

    /**
     * Gets guest_locale
     *
     * @return string|null
     */
    public function getGuestLocale()
    {
        return $this->container['guest_locale'];
    }

    /**
     * Sets guest_locale
     *
     * @param string|null $guest_locale guest_locale
     *
     * @return self
     */
    public function setGuestLocale($guest_locale)
    {
        if (!is_null($guest_locale) && (mb_strlen($guest_locale) > 5)) {
            throw new \InvalidArgumentException('invalid length for $guest_locale when calling PostThreadRequest., must be smaller than or equal to 5.');
        }

        $this->container['guest_locale'] = $guest_locale;

        return $this;
    }

    /**
     * Gets guest_location
     *
     * @return string|null
     */
    public function getGuestLocation()
    {
        return $this->container['guest_location'];
    }

    /**
     * Sets guest_location
     *
     * @param string|null $guest_location guest_location
     *
     * @return self
     */
    public function setGuestLocation($guest_location)
    {
        if (!is_null($guest_location) && (mb_strlen($guest_location) > 200)) {
            throw new \InvalidArgumentException('invalid length for $guest_location when calling PostThreadRequest., must be smaller than or equal to 200.');
        }

        $this->container['guest_location'] = $guest_location;

        return $this;
    }

    /**
     * Gets guest_user_id
     *
     * @return int|null
     */
    public function getGuestUserId()
    {
        return $this->container['guest_user_id'];
    }

    /**
     * Sets guest_user_id
     *
     * @param int|null $guest_user_id guest_user_id
     *
     * @return self
     */
    public function setGuestUserId($guest_user_id)
    {
        $this->container['guest_user_id'] = $guest_user_id;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


