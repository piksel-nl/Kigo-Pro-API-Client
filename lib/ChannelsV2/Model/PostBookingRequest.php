<?php
/**
 * PostBookingRequest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\ChannelsV2\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * PostBookingRequest Class Doc Comment
 *
 * @category Class
 * @description Api Model for posting a new booking without a previous quote (if the channel connection allows it)
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PostBookingRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PostBookingRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'listing_id' => 'int',
        'total_amount' => 'double',
        'check_in_date' => '\DateTime',
        'check_out_date' => '\DateTime',
        'renter' => '\Piksel\Kigo\ChannelsV2\Model\PostPersonRequest',
        'num_adults' => 'int',
        'num_children' => 'int',
        'payment_plan_guid' => 'string',
        'location_id' => 'int',
        'notes' => 'string',
        'special_needs' => 'string',
        'external_booking_id' => 'string',
        'credit_card' => '\Piksel\Kigo\ChannelsV2\Model\CreditCard',
        'channel_collected' => 'bool',
        'point_of_sale_code' => 'string',
        'payment_collection_mode' => 'string',
        'payment_collection_scheduled_date' => '\DateTime',
        'payment_schedule' => '\Piksel\Kigo\ChannelsV2\Model\PaymentScheduleRequest'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'listing_id' => 'int32',
        'total_amount' => 'double',
        'check_in_date' => 'date',
        'check_out_date' => 'date',
        'renter' => null,
        'num_adults' => 'int32',
        'num_children' => 'int32',
        'payment_plan_guid' => 'uuid',
        'location_id' => 'int32',
        'notes' => null,
        'special_needs' => null,
        'external_booking_id' => null,
        'credit_card' => null,
        'channel_collected' => null,
        'point_of_sale_code' => null,
        'payment_collection_mode' => null,
        'payment_collection_scheduled_date' => 'date-time',
        'payment_schedule' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'listing_id' => 'listingID',
        'total_amount' => 'totalAmount',
        'check_in_date' => 'checkInDate',
        'check_out_date' => 'checkOutDate',
        'renter' => 'renter',
        'num_adults' => 'numAdults',
        'num_children' => 'numChildren',
        'payment_plan_guid' => 'paymentPlanGuid',
        'location_id' => 'locationID',
        'notes' => 'notes',
        'special_needs' => 'specialNeeds',
        'external_booking_id' => 'externalBookingID',
        'credit_card' => 'creditCard',
        'channel_collected' => 'channelCollected',
        'point_of_sale_code' => 'pointOfSaleCode',
        'payment_collection_mode' => 'paymentCollectionMode',
        'payment_collection_scheduled_date' => 'paymentCollectionScheduledDate',
        'payment_schedule' => 'paymentSchedule'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'listing_id' => 'setListingId',
        'total_amount' => 'setTotalAmount',
        'check_in_date' => 'setCheckInDate',
        'check_out_date' => 'setCheckOutDate',
        'renter' => 'setRenter',
        'num_adults' => 'setNumAdults',
        'num_children' => 'setNumChildren',
        'payment_plan_guid' => 'setPaymentPlanGuid',
        'location_id' => 'setLocationId',
        'notes' => 'setNotes',
        'special_needs' => 'setSpecialNeeds',
        'external_booking_id' => 'setExternalBookingId',
        'credit_card' => 'setCreditCard',
        'channel_collected' => 'setChannelCollected',
        'point_of_sale_code' => 'setPointOfSaleCode',
        'payment_collection_mode' => 'setPaymentCollectionMode',
        'payment_collection_scheduled_date' => 'setPaymentCollectionScheduledDate',
        'payment_schedule' => 'setPaymentSchedule'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'listing_id' => 'getListingId',
        'total_amount' => 'getTotalAmount',
        'check_in_date' => 'getCheckInDate',
        'check_out_date' => 'getCheckOutDate',
        'renter' => 'getRenter',
        'num_adults' => 'getNumAdults',
        'num_children' => 'getNumChildren',
        'payment_plan_guid' => 'getPaymentPlanGuid',
        'location_id' => 'getLocationId',
        'notes' => 'getNotes',
        'special_needs' => 'getSpecialNeeds',
        'external_booking_id' => 'getExternalBookingId',
        'credit_card' => 'getCreditCard',
        'channel_collected' => 'getChannelCollected',
        'point_of_sale_code' => 'getPointOfSaleCode',
        'payment_collection_mode' => 'getPaymentCollectionMode',
        'payment_collection_scheduled_date' => 'getPaymentCollectionScheduledDate',
        'payment_schedule' => 'getPaymentSchedule'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PAYMENT_COLLECTION_MODE_PMC_COLLECT = 'PmcCollect';
    const PAYMENT_COLLECTION_MODE_VIRTUAL_CC = 'VirtualCc';
    const PAYMENT_COLLECTION_MODE_CHANNEL_COLLECT = 'ChannelCollect';
    const PAYMENT_COLLECTION_MODE_PMC_OFFLINE_COLLECT = 'PmcOfflineCollect';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentCollectionModeAllowableValues()
    {
        return [
            self::PAYMENT_COLLECTION_MODE_PMC_COLLECT,
            self::PAYMENT_COLLECTION_MODE_VIRTUAL_CC,
            self::PAYMENT_COLLECTION_MODE_CHANNEL_COLLECT,
            self::PAYMENT_COLLECTION_MODE_PMC_OFFLINE_COLLECT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['listing_id'] = $data['listing_id'] ?? null;
        $this->container['total_amount'] = $data['total_amount'] ?? null;
        $this->container['check_in_date'] = $data['check_in_date'] ?? null;
        $this->container['check_out_date'] = $data['check_out_date'] ?? null;
        $this->container['renter'] = $data['renter'] ?? null;
        $this->container['num_adults'] = $data['num_adults'] ?? null;
        $this->container['num_children'] = $data['num_children'] ?? null;
        $this->container['payment_plan_guid'] = $data['payment_plan_guid'] ?? null;
        $this->container['location_id'] = $data['location_id'] ?? null;
        $this->container['notes'] = $data['notes'] ?? null;
        $this->container['special_needs'] = $data['special_needs'] ?? null;
        $this->container['external_booking_id'] = $data['external_booking_id'] ?? null;
        $this->container['credit_card'] = $data['credit_card'] ?? null;
        $this->container['channel_collected'] = $data['channel_collected'] ?? null;
        $this->container['point_of_sale_code'] = $data['point_of_sale_code'] ?? null;
        $this->container['payment_collection_mode'] = $data['payment_collection_mode'] ?? null;
        $this->container['payment_collection_scheduled_date'] = $data['payment_collection_scheduled_date'] ?? null;
        $this->container['payment_schedule'] = $data['payment_schedule'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['listing_id'] === null) {
            $invalidProperties[] = "'listing_id' can't be null";
        }
        if ($this->container['total_amount'] === null) {
            $invalidProperties[] = "'total_amount' can't be null";
        }
        if (($this->container['total_amount'] < 1)) {
            $invalidProperties[] = "invalid value for 'total_amount', must be bigger than or equal to 1.";
        }

        if ($this->container['check_in_date'] === null) {
            $invalidProperties[] = "'check_in_date' can't be null";
        }
        if ($this->container['check_out_date'] === null) {
            $invalidProperties[] = "'check_out_date' can't be null";
        }
        if ($this->container['renter'] === null) {
            $invalidProperties[] = "'renter' can't be null";
        }
        if ($this->container['num_adults'] === null) {
            $invalidProperties[] = "'num_adults' can't be null";
        }
        if (($this->container['num_adults'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'num_adults', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['num_adults'] < 1)) {
            $invalidProperties[] = "invalid value for 'num_adults', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['num_children']) && ($this->container['num_children'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'num_children', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['num_children']) && ($this->container['num_children'] < 0)) {
            $invalidProperties[] = "invalid value for 'num_children', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getPaymentCollectionModeAllowableValues();
        if (!is_null($this->container['payment_collection_mode']) && !in_array($this->container['payment_collection_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_collection_mode', must be one of '%s'",
                $this->container['payment_collection_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets listing_id
     *
     * @return int
     */
    public function getListingId()
    {
        return $this->container['listing_id'];
    }

    /**
     * Sets listing_id
     *
     * @param int $listing_id Listing ID
     *
     * @return self
     */
    public function setListingId($listing_id)
    {
        $this->container['listing_id'] = $listing_id;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double $total_amount Total Amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {

        if (($total_amount < 1)) {
            throw new \InvalidArgumentException('invalid value for $total_amount when calling PostBookingRequest., must be bigger than or equal to 1.');
        }

        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets check_in_date
     *
     * @return \DateTime
     */
    public function getCheckInDate()
    {
        return $this->container['check_in_date'];
    }

    /**
     * Sets check_in_date
     *
     * @param \DateTime $check_in_date Check In Date
     *
     * @return self
     */
    public function setCheckInDate($check_in_date)
    {
        $this->container['check_in_date'] = $check_in_date;

        return $this;
    }

    /**
     * Gets check_out_date
     *
     * @return \DateTime
     */
    public function getCheckOutDate()
    {
        return $this->container['check_out_date'];
    }

    /**
     * Sets check_out_date
     *
     * @param \DateTime $check_out_date Check Out Date
     *
     * @return self
     */
    public function setCheckOutDate($check_out_date)
    {
        $this->container['check_out_date'] = $check_out_date;

        return $this;
    }

    /**
     * Gets renter
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\PostPersonRequest
     */
    public function getRenter()
    {
        return $this->container['renter'];
    }

    /**
     * Sets renter
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\PostPersonRequest $renter renter
     *
     * @return self
     */
    public function setRenter($renter)
    {
        $this->container['renter'] = $renter;

        return $this;
    }

    /**
     * Gets num_adults
     *
     * @return int
     */
    public function getNumAdults()
    {
        return $this->container['num_adults'];
    }

    /**
     * Sets num_adults
     *
     * @param int $num_adults Number of Adults
     *
     * @return self
     */
    public function setNumAdults($num_adults)
    {

        if (($num_adults > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $num_adults when calling PostBookingRequest., must be smaller than or equal to 2147483647.');
        }
        if (($num_adults < 1)) {
            throw new \InvalidArgumentException('invalid value for $num_adults when calling PostBookingRequest., must be bigger than or equal to 1.');
        }

        $this->container['num_adults'] = $num_adults;

        return $this;
    }

    /**
     * Gets num_children
     *
     * @return int|null
     */
    public function getNumChildren()
    {
        return $this->container['num_children'];
    }

    /**
     * Sets num_children
     *
     * @param int|null $num_children Number of Children
     *
     * @return self
     */
    public function setNumChildren($num_children)
    {

        if (!is_null($num_children) && ($num_children > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $num_children when calling PostBookingRequest., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($num_children) && ($num_children < 0)) {
            throw new \InvalidArgumentException('invalid value for $num_children when calling PostBookingRequest., must be bigger than or equal to 0.');
        }

        $this->container['num_children'] = $num_children;

        return $this;
    }

    /**
     * Gets payment_plan_guid
     *
     * @return string|null
     */
    public function getPaymentPlanGuid()
    {
        return $this->container['payment_plan_guid'];
    }

    /**
     * Sets payment_plan_guid
     *
     * @param string|null $payment_plan_guid Payment Plan Guid
     *
     * @return self
     */
    public function setPaymentPlanGuid($payment_plan_guid)
    {
        $this->container['payment_plan_guid'] = $payment_plan_guid;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int|null $location_id Location ID. If passed, the system will be forced to use this.
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets special_needs
     *
     * @return string|null
     */
    public function getSpecialNeeds()
    {
        return $this->container['special_needs'];
    }

    /**
     * Sets special_needs
     *
     * @param string|null $special_needs Special Needs
     *
     * @return self
     */
    public function setSpecialNeeds($special_needs)
    {
        $this->container['special_needs'] = $special_needs;

        return $this;
    }

    /**
     * Gets external_booking_id
     *
     * @return string|null
     */
    public function getExternalBookingId()
    {
        return $this->container['external_booking_id'];
    }

    /**
     * Sets external_booking_id
     *
     * @param string|null $external_booking_id External identifier set by the Channel (KVRS AltID)
     *
     * @return self
     */
    public function setExternalBookingId($external_booking_id)
    {
        $this->container['external_booking_id'] = $external_booking_id;

        return $this;
    }

    /**
     * Gets credit_card
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\CreditCard|null
     */
    public function getCreditCard()
    {
        return $this->container['credit_card'];
    }

    /**
     * Sets credit_card
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\CreditCard|null $credit_card credit_card
     *
     * @return self
     */
    public function setCreditCard($credit_card)
    {
        $this->container['credit_card'] = $credit_card;

        return $this;
    }

    /**
     * Gets channel_collected
     *
     * @return bool|null
     */
    public function getChannelCollected()
    {
        return $this->container['channel_collected'];
    }

    /**
     * Sets channel_collected
     *
     * @param bool|null $channel_collected Tells if the channel will process the payments
     *
     * @return self
     */
    public function setChannelCollected($channel_collected)
    {
        $this->container['channel_collected'] = $channel_collected;

        return $this;
    }

    /**
     * Gets point_of_sale_code
     *
     * @return string|null
     */
    public function getPointOfSaleCode()
    {
        return $this->container['point_of_sale_code'];
    }

    /**
     * Sets point_of_sale_code
     *
     * @param string|null $point_of_sale_code Point of Sale (code)
     *
     * @return self
     */
    public function setPointOfSaleCode($point_of_sale_code)
    {
        $this->container['point_of_sale_code'] = $point_of_sale_code;

        return $this;
    }

    /**
     * Gets payment_collection_mode
     *
     * @return string|null
     */
    public function getPaymentCollectionMode()
    {
        return $this->container['payment_collection_mode'];
    }

    /**
     * Sets payment_collection_mode
     *
     * @param string|null $payment_collection_mode Defines how the booking will be paid
     *
     * @return self
     */
    public function setPaymentCollectionMode($payment_collection_mode)
    {
        $allowedValues = $this->getPaymentCollectionModeAllowableValues();
        if (!is_null($payment_collection_mode) && !in_array($payment_collection_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_collection_mode', must be one of '%s'",
                    $payment_collection_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_collection_mode'] = $payment_collection_mode;

        return $this;
    }

    /**
     * Gets payment_collection_scheduled_date
     *
     * @return \DateTime|null
     */
    public function getPaymentCollectionScheduledDate()
    {
        return $this->container['payment_collection_scheduled_date'];
    }

    /**
     * Sets payment_collection_scheduled_date
     *
     * @param \DateTime|null $payment_collection_scheduled_date If PaymentCollectionMode is VirtualCC then the money will be released on this date.  So we have to schedule the transaction to this date or fall back to the payment plan if it's not provided.
     *
     * @return self
     */
    public function setPaymentCollectionScheduledDate($payment_collection_scheduled_date)
    {
        $this->container['payment_collection_scheduled_date'] = $payment_collection_scheduled_date;

        return $this;
    }

    /**
     * Gets payment_schedule
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\PaymentScheduleRequest|null
     */
    public function getPaymentSchedule()
    {
        return $this->container['payment_schedule'];
    }

    /**
     * Sets payment_schedule
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\PaymentScheduleRequest|null $payment_schedule payment_schedule
     *
     * @return self
     */
    public function setPaymentSchedule($payment_schedule)
    {
        $this->container['payment_schedule'] = $payment_schedule;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


