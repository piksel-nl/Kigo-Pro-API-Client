<?php
/**
 * StaySettings
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\ChannelsV2\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * StaySettings Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class StaySettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StaySettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'booking_window_rule' => '\Piksel\Kigo\ChannelsV2\Model\ListingBookingWindowRule',
        'max_stay_rule' => '\Piksel\Kigo\ChannelsV2\Model\ListingMaxStayRule',
        'time_between_reservations_rule' => '\Piksel\Kigo\ChannelsV2\Model\TimeBetweenReservationsRule',
        'rate_adjustment' => '\Piksel\Kigo\ChannelsV2\Model\ListingRateAdjustment'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'booking_window_rule' => null,
        'max_stay_rule' => null,
        'time_between_reservations_rule' => null,
        'rate_adjustment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'booking_window_rule' => 'bookingWindowRule',
        'max_stay_rule' => 'maxStayRule',
        'time_between_reservations_rule' => 'timeBetweenReservationsRule',
        'rate_adjustment' => 'rateAdjustment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'booking_window_rule' => 'setBookingWindowRule',
        'max_stay_rule' => 'setMaxStayRule',
        'time_between_reservations_rule' => 'setTimeBetweenReservationsRule',
        'rate_adjustment' => 'setRateAdjustment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'booking_window_rule' => 'getBookingWindowRule',
        'max_stay_rule' => 'getMaxStayRule',
        'time_between_reservations_rule' => 'getTimeBetweenReservationsRule',
        'rate_adjustment' => 'getRateAdjustment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['booking_window_rule'] = $data['booking_window_rule'] ?? null;
        $this->container['max_stay_rule'] = $data['max_stay_rule'] ?? null;
        $this->container['time_between_reservations_rule'] = $data['time_between_reservations_rule'] ?? null;
        $this->container['rate_adjustment'] = $data['rate_adjustment'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets booking_window_rule
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\ListingBookingWindowRule|null
     */
    public function getBookingWindowRule()
    {
        return $this->container['booking_window_rule'];
    }

    /**
     * Sets booking_window_rule
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\ListingBookingWindowRule|null $booking_window_rule booking_window_rule
     *
     * @return self
     */
    public function setBookingWindowRule($booking_window_rule)
    {
        $this->container['booking_window_rule'] = $booking_window_rule;

        return $this;
    }

    /**
     * Gets max_stay_rule
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\ListingMaxStayRule|null
     */
    public function getMaxStayRule()
    {
        return $this->container['max_stay_rule'];
    }

    /**
     * Sets max_stay_rule
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\ListingMaxStayRule|null $max_stay_rule max_stay_rule
     *
     * @return self
     */
    public function setMaxStayRule($max_stay_rule)
    {
        $this->container['max_stay_rule'] = $max_stay_rule;

        return $this;
    }

    /**
     * Gets time_between_reservations_rule
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\TimeBetweenReservationsRule|null
     */
    public function getTimeBetweenReservationsRule()
    {
        return $this->container['time_between_reservations_rule'];
    }

    /**
     * Sets time_between_reservations_rule
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\TimeBetweenReservationsRule|null $time_between_reservations_rule time_between_reservations_rule
     *
     * @return self
     */
    public function setTimeBetweenReservationsRule($time_between_reservations_rule)
    {
        $this->container['time_between_reservations_rule'] = $time_between_reservations_rule;

        return $this;
    }

    /**
     * Gets rate_adjustment
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\ListingRateAdjustment|null
     */
    public function getRateAdjustment()
    {
        return $this->container['rate_adjustment'];
    }

    /**
     * Sets rate_adjustment
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\ListingRateAdjustment|null $rate_adjustment rate_adjustment
     *
     * @return self
     */
    public function setRateAdjustment($rate_adjustment)
    {
        $this->container['rate_adjustment'] = $rate_adjustment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


