<?php
/**
 * PaymentGateway
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\ChannelsV2\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * PaymentGateway Class Doc Comment
 *
 * @category Class
 * @description Payment Gateway class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PaymentGateway implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentGateway';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'external_id' => 'string',
        'processor_type' => 'string',
        'credentials' => 'string',
        'encryption_version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'external_id' => null,
        'processor_type' => null,
        'credentials' => null,
        'encryption_version' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'external_id' => 'externalID',
        'processor_type' => 'processorType',
        'credentials' => 'credentials',
        'encryption_version' => 'encryptionVersion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'external_id' => 'setExternalId',
        'processor_type' => 'setProcessorType',
        'credentials' => 'setCredentials',
        'encryption_version' => 'setEncryptionVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'external_id' => 'getExternalId',
        'processor_type' => 'getProcessorType',
        'credentials' => 'getCredentials',
        'encryption_version' => 'getEncryptionVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PROCESSOR_TYPE_UNKNOWN = 'Unknown';
    const PROCESSOR_TYPE_AUTHORIZE_NET = 'AuthorizeNet';
    const PROCESSOR_TYPE_SAGE_PAY = 'SagePay';
    const PROCESSOR_TYPE_VACATION_RENTAL_PAYMENT = 'VacationRentalPayment';
    const PROCESSOR_TYPE_VACATION_RENTAL_PAYMENT_INTERNATIONAL = 'VacationRentalPaymentInternational';
    const PROCESSOR_TYPE_PAY_PAL = 'PayPal';
    const PROCESSOR_TYPE_PAY_PAL_PRO = 'PayPalPro';
    const PROCESSOR_TYPE_BRASPAG = 'Braspag';
    const PROCESSOR_TYPE_BRASPAG2 = 'Braspag2';
    const PROCESSOR_TYPE_BRAINTREE = 'Braintree';
    const PROCESSOR_TYPE_SPREEDLY = 'Spreedly';
    const PROCESSOR_TYPE_KIGO_PAY = 'KigoPay';
    const PROCESSOR_TYPE_FORTE = 'Forte';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProcessorTypeAllowableValues()
    {
        return [
            self::PROCESSOR_TYPE_UNKNOWN,
            self::PROCESSOR_TYPE_AUTHORIZE_NET,
            self::PROCESSOR_TYPE_SAGE_PAY,
            self::PROCESSOR_TYPE_VACATION_RENTAL_PAYMENT,
            self::PROCESSOR_TYPE_VACATION_RENTAL_PAYMENT_INTERNATIONAL,
            self::PROCESSOR_TYPE_PAY_PAL,
            self::PROCESSOR_TYPE_PAY_PAL_PRO,
            self::PROCESSOR_TYPE_BRASPAG,
            self::PROCESSOR_TYPE_BRASPAG2,
            self::PROCESSOR_TYPE_BRAINTREE,
            self::PROCESSOR_TYPE_SPREEDLY,
            self::PROCESSOR_TYPE_KIGO_PAY,
            self::PROCESSOR_TYPE_FORTE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['processor_type'] = $data['processor_type'] ?? null;
        $this->container['credentials'] = $data['credentials'] ?? null;
        $this->container['encryption_version'] = $data['encryption_version'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProcessorTypeAllowableValues();
        if (!is_null($this->container['processor_type']) && !in_array($this->container['processor_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'processor_type', must be one of '%s'",
                $this->container['processor_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Payment Gateway ID
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id The external identifier of the Payment Gateway
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets processor_type
     *
     * @return string|null
     */
    public function getProcessorType()
    {
        return $this->container['processor_type'];
    }

    /**
     * Sets processor_type
     *
     * @param string|null $processor_type The type of payment gateway
     *
     * @return self
     */
    public function setProcessorType($processor_type)
    {
        $allowedValues = $this->getProcessorTypeAllowableValues();
        if (!is_null($processor_type) && !in_array($processor_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'processor_type', must be one of '%s'",
                    $processor_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['processor_type'] = $processor_type;

        return $this;
    }

    /**
     * Gets credentials
     *
     * @return string|null
     */
    public function getCredentials()
    {
        return $this->container['credentials'];
    }

    /**
     * Sets credentials
     *
     * @param string|null $credentials Payment Gateway credentials
     *
     * @return self
     */
    public function setCredentials($credentials)
    {
        $this->container['credentials'] = $credentials;

        return $this;
    }

    /**
     * Gets encryption_version
     *
     * @return int|null
     */
    public function getEncryptionVersion()
    {
        return $this->container['encryption_version'];
    }

    /**
     * Sets encryption_version
     *
     * @param int|null $encryption_version The encryption key version used to encrypt the credentials
     *
     * @return self
     */
    public function setEncryptionVersion($encryption_version)
    {
        $this->container['encryption_version'] = $encryption_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


