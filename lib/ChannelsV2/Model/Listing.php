<?php
/**
 * Listing
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\ChannelsV2\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * Listing Class Doc Comment
 *
 * @category Class
 * @description Listing
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Listing implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Listing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'stay_settings' => '\Piksel\Kigo\ChannelsV2\Model\StaySettings',
        'blocked_out_nights_settings' => '\Piksel\Kigo\ChannelsV2\Model\BlockedOutNightsSettings',
        'fee_settings' => '\Piksel\Kigo\ChannelsV2\Model\FeeSettings',
        'contract_settings' => '\Piksel\Kigo\ChannelsV2\Model\ContractSettings',
        'locations' => '\Piksel\Kigo\ChannelsV2\Model\Location[]',
        'rooms' => '\Piksel\Kigo\ChannelsV2\Model\RoomList',
        'listing_collection_id' => 'int',
        'listing_group_id' => 'int',
        'external_id' => 'string',
        'property_id' => 'int',
        'property_override' => 'string',
        'account_id' => 'int',
        'sleeps' => 'int',
        'metadata' => 'string',
        'time_zone_id' => 'string',
        'check_in_time' => 'string',
        'check_out_time' => 'string',
        'rental_agreement_url' => 'string',
        'associated_channel_connection_ids' => 'int[]',
        'associated_channel_connections' => '\Piksel\Kigo\ChannelsV2\Model\ChannelConnectionListing[]',
        'accepted_payment_methods' => 'string[]',
        'square_feet' => 'double',
        'unit_size_type' => 'string',
        'category_type' => 'string',
        'local_tax_id' => 'string',
        'bedrooms' => 'int',
        'bathrooms' => 'double',
        'half_bathrooms' => 'int',
        'floor' => 'int',
        'parking_spaces' => 'int',
        'garage_spaces' => 'int',
        'year_built' => 'int',
        'stories' => 'int',
        'address' => '\Piksel\Kigo\ChannelsV2\Model\PropertyAddress',
        'descriptions' => '\Piksel\Kigo\ChannelsV2\Model\PropertyDescription[]',
        'check_in_policy' => '\Piksel\Kigo\ChannelsV2\Model\CheckInPolicy',
        'media' => '\Piksel\Kigo\ChannelsV2\Model\Media[]',
        'amenities' => '\Piksel\Kigo\ChannelsV2\Model\Amenity[]',
        'default_rate_schedule' => '\Piksel\Kigo\ChannelsV2\Model\RateSchedule',
        'sunrise_date' => '\DateTime',
        'sunset_date' => '\DateTime',
        'listing_origin' => 'string',
        'show_location' => 'bool',
        'promotion_settings' => '\Piksel\Kigo\ChannelsV2\Model\PromotionSetting[]',
        'license_number' => 'string',
        'reviews' => '\Piksel\Kigo\ChannelsV2\Model\Review[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'stay_settings' => null,
        'blocked_out_nights_settings' => null,
        'fee_settings' => null,
        'contract_settings' => null,
        'locations' => null,
        'rooms' => null,
        'listing_collection_id' => 'int32',
        'listing_group_id' => 'int32',
        'external_id' => null,
        'property_id' => 'int32',
        'property_override' => null,
        'account_id' => 'int32',
        'sleeps' => 'int32',
        'metadata' => null,
        'time_zone_id' => null,
        'check_in_time' => 'date-span',
        'check_out_time' => 'date-span',
        'rental_agreement_url' => null,
        'associated_channel_connection_ids' => 'int32',
        'associated_channel_connections' => null,
        'accepted_payment_methods' => null,
        'square_feet' => 'double',
        'unit_size_type' => null,
        'category_type' => null,
        'local_tax_id' => null,
        'bedrooms' => 'int32',
        'bathrooms' => 'double',
        'half_bathrooms' => 'int32',
        'floor' => 'int32',
        'parking_spaces' => 'int32',
        'garage_spaces' => 'int32',
        'year_built' => 'int32',
        'stories' => 'int32',
        'address' => null,
        'descriptions' => null,
        'check_in_policy' => null,
        'media' => null,
        'amenities' => null,
        'default_rate_schedule' => null,
        'sunrise_date' => 'date-time',
        'sunset_date' => 'date-time',
        'listing_origin' => null,
        'show_location' => null,
        'promotion_settings' => null,
        'license_number' => null,
        'reviews' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'stay_settings' => 'staySettings',
        'blocked_out_nights_settings' => 'blockedOutNightsSettings',
        'fee_settings' => 'feeSettings',
        'contract_settings' => 'contractSettings',
        'locations' => 'locations',
        'rooms' => 'rooms',
        'listing_collection_id' => 'listingCollectionID',
        'listing_group_id' => 'listingGroupID',
        'external_id' => 'externalID',
        'property_id' => 'propertyID',
        'property_override' => 'propertyOverride',
        'account_id' => 'accountID',
        'sleeps' => 'sleeps',
        'metadata' => 'metadata',
        'time_zone_id' => 'timeZoneID',
        'check_in_time' => 'checkInTime',
        'check_out_time' => 'checkOutTime',
        'rental_agreement_url' => 'rentalAgreementUrl',
        'associated_channel_connection_ids' => 'associatedChannelConnectionIDs',
        'associated_channel_connections' => 'associatedChannelConnections',
        'accepted_payment_methods' => 'acceptedPaymentMethods',
        'square_feet' => 'squareFeet',
        'unit_size_type' => 'unitSizeType',
        'category_type' => 'categoryType',
        'local_tax_id' => 'localTaxID',
        'bedrooms' => 'bedrooms',
        'bathrooms' => 'bathrooms',
        'half_bathrooms' => 'halfBathrooms',
        'floor' => 'floor',
        'parking_spaces' => 'parkingSpaces',
        'garage_spaces' => 'garageSpaces',
        'year_built' => 'yearBuilt',
        'stories' => 'stories',
        'address' => 'address',
        'descriptions' => 'descriptions',
        'check_in_policy' => 'checkInPolicy',
        'media' => 'media',
        'amenities' => 'amenities',
        'default_rate_schedule' => 'defaultRateSchedule',
        'sunrise_date' => 'sunriseDate',
        'sunset_date' => 'sunsetDate',
        'listing_origin' => 'listingOrigin',
        'show_location' => 'showLocation',
        'promotion_settings' => 'promotionSettings',
        'license_number' => 'licenseNumber',
        'reviews' => 'reviews'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'stay_settings' => 'setStaySettings',
        'blocked_out_nights_settings' => 'setBlockedOutNightsSettings',
        'fee_settings' => 'setFeeSettings',
        'contract_settings' => 'setContractSettings',
        'locations' => 'setLocations',
        'rooms' => 'setRooms',
        'listing_collection_id' => 'setListingCollectionId',
        'listing_group_id' => 'setListingGroupId',
        'external_id' => 'setExternalId',
        'property_id' => 'setPropertyId',
        'property_override' => 'setPropertyOverride',
        'account_id' => 'setAccountId',
        'sleeps' => 'setSleeps',
        'metadata' => 'setMetadata',
        'time_zone_id' => 'setTimeZoneId',
        'check_in_time' => 'setCheckInTime',
        'check_out_time' => 'setCheckOutTime',
        'rental_agreement_url' => 'setRentalAgreementUrl',
        'associated_channel_connection_ids' => 'setAssociatedChannelConnectionIds',
        'associated_channel_connections' => 'setAssociatedChannelConnections',
        'accepted_payment_methods' => 'setAcceptedPaymentMethods',
        'square_feet' => 'setSquareFeet',
        'unit_size_type' => 'setUnitSizeType',
        'category_type' => 'setCategoryType',
        'local_tax_id' => 'setLocalTaxId',
        'bedrooms' => 'setBedrooms',
        'bathrooms' => 'setBathrooms',
        'half_bathrooms' => 'setHalfBathrooms',
        'floor' => 'setFloor',
        'parking_spaces' => 'setParkingSpaces',
        'garage_spaces' => 'setGarageSpaces',
        'year_built' => 'setYearBuilt',
        'stories' => 'setStories',
        'address' => 'setAddress',
        'descriptions' => 'setDescriptions',
        'check_in_policy' => 'setCheckInPolicy',
        'media' => 'setMedia',
        'amenities' => 'setAmenities',
        'default_rate_schedule' => 'setDefaultRateSchedule',
        'sunrise_date' => 'setSunriseDate',
        'sunset_date' => 'setSunsetDate',
        'listing_origin' => 'setListingOrigin',
        'show_location' => 'setShowLocation',
        'promotion_settings' => 'setPromotionSettings',
        'license_number' => 'setLicenseNumber',
        'reviews' => 'setReviews'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'stay_settings' => 'getStaySettings',
        'blocked_out_nights_settings' => 'getBlockedOutNightsSettings',
        'fee_settings' => 'getFeeSettings',
        'contract_settings' => 'getContractSettings',
        'locations' => 'getLocations',
        'rooms' => 'getRooms',
        'listing_collection_id' => 'getListingCollectionId',
        'listing_group_id' => 'getListingGroupId',
        'external_id' => 'getExternalId',
        'property_id' => 'getPropertyId',
        'property_override' => 'getPropertyOverride',
        'account_id' => 'getAccountId',
        'sleeps' => 'getSleeps',
        'metadata' => 'getMetadata',
        'time_zone_id' => 'getTimeZoneId',
        'check_in_time' => 'getCheckInTime',
        'check_out_time' => 'getCheckOutTime',
        'rental_agreement_url' => 'getRentalAgreementUrl',
        'associated_channel_connection_ids' => 'getAssociatedChannelConnectionIds',
        'associated_channel_connections' => 'getAssociatedChannelConnections',
        'accepted_payment_methods' => 'getAcceptedPaymentMethods',
        'square_feet' => 'getSquareFeet',
        'unit_size_type' => 'getUnitSizeType',
        'category_type' => 'getCategoryType',
        'local_tax_id' => 'getLocalTaxId',
        'bedrooms' => 'getBedrooms',
        'bathrooms' => 'getBathrooms',
        'half_bathrooms' => 'getHalfBathrooms',
        'floor' => 'getFloor',
        'parking_spaces' => 'getParkingSpaces',
        'garage_spaces' => 'getGarageSpaces',
        'year_built' => 'getYearBuilt',
        'stories' => 'getStories',
        'address' => 'getAddress',
        'descriptions' => 'getDescriptions',
        'check_in_policy' => 'getCheckInPolicy',
        'media' => 'getMedia',
        'amenities' => 'getAmenities',
        'default_rate_schedule' => 'getDefaultRateSchedule',
        'sunrise_date' => 'getSunriseDate',
        'sunset_date' => 'getSunsetDate',
        'listing_origin' => 'getListingOrigin',
        'show_location' => 'getShowLocation',
        'promotion_settings' => 'getPromotionSettings',
        'license_number' => 'getLicenseNumber',
        'reviews' => 'getReviews'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ACCEPTED_PAYMENT_METHODS_NOT_SET = 'NotSet';
    const ACCEPTED_PAYMENT_METHODS_VISA = 'Visa';
    const ACCEPTED_PAYMENT_METHODS_MASTER_CARD = 'MasterCard';
    const ACCEPTED_PAYMENT_METHODS_AMERICAN_EXPRESS = 'AmericanExpress';
    const ACCEPTED_PAYMENT_METHODS_DISCOVER = 'Discover';
    const ACCEPTED_PAYMENT_METHODS_OTHER = 'Other';
    const ACCEPTED_PAYMENT_METHODS_DINERS_CLUB = 'DinersClub';
    const ACCEPTED_PAYMENT_METHODS_OFFLINE = 'Offline';
    const UNIT_SIZE_TYPE_SQUARE_FEET = 'SquareFeet';
    const UNIT_SIZE_TYPE_SQUARE_METERS = 'SquareMeters';
    const CATEGORY_TYPE_UNKNOWN = 'Unknown';
    const CATEGORY_TYPE_TOWNHOUSE = 'Townhouse';
    const CATEGORY_TYPE_CONDOMINIUM = 'Condominium';
    const CATEGORY_TYPE_HOTEL = 'Hotel';
    const CATEGORY_TYPE_APARTMENT = 'Apartment';
    const CATEGORY_TYPE_BUNGALOW = 'Bungalow';
    const CATEGORY_TYPE_CASTLE = 'Castle';
    const CATEGORY_TYPE_CHALET = 'Chalet';
    const CATEGORY_TYPE_COTTAGE = 'Cottage';
    const CATEGORY_TYPE_FARMHOUSE = 'Farmhouse';
    const CATEGORY_TYPE_LODGE = 'Lodge';
    const CATEGORY_TYPE_STUDIO = 'Studio';
    const CATEGORY_TYPE_VILLA = 'Villa';
    const CATEGORY_TYPE_BARN = 'Barn';
    const CATEGORY_TYPE_HOUSEBOAT = 'Houseboat';
    const CATEGORY_TYPE_CABIN = 'Cabin';
    const CATEGORY_TYPE_YACHT = 'Yacht';
    const CATEGORY_TYPE_APARTHOTEL = 'Aparthotel';
    const CATEGORY_TYPE_HOUSE = 'House';
    const CATEGORY_TYPE_RESORT = 'Resort';
    const CATEGORY_TYPE_TREEHOUSE = 'Treehouse';
    const CATEGORY_TYPE_WINDMILL = 'Windmill';
    const CATEGORY_TYPE_YURT = 'Yurt';
    const LISTING_ORIGIN_OTHER = 'Other';
    const LISTING_ORIGIN_KIGO = 'Kigo';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAcceptedPaymentMethodsAllowableValues()
    {
        return [
            self::ACCEPTED_PAYMENT_METHODS_NOT_SET,
            self::ACCEPTED_PAYMENT_METHODS_VISA,
            self::ACCEPTED_PAYMENT_METHODS_MASTER_CARD,
            self::ACCEPTED_PAYMENT_METHODS_AMERICAN_EXPRESS,
            self::ACCEPTED_PAYMENT_METHODS_DISCOVER,
            self::ACCEPTED_PAYMENT_METHODS_OTHER,
            self::ACCEPTED_PAYMENT_METHODS_DINERS_CLUB,
            self::ACCEPTED_PAYMENT_METHODS_OFFLINE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnitSizeTypeAllowableValues()
    {
        return [
            self::UNIT_SIZE_TYPE_SQUARE_FEET,
            self::UNIT_SIZE_TYPE_SQUARE_METERS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoryTypeAllowableValues()
    {
        return [
            self::CATEGORY_TYPE_UNKNOWN,
            self::CATEGORY_TYPE_TOWNHOUSE,
            self::CATEGORY_TYPE_CONDOMINIUM,
            self::CATEGORY_TYPE_HOTEL,
            self::CATEGORY_TYPE_APARTMENT,
            self::CATEGORY_TYPE_BUNGALOW,
            self::CATEGORY_TYPE_CASTLE,
            self::CATEGORY_TYPE_CHALET,
            self::CATEGORY_TYPE_COTTAGE,
            self::CATEGORY_TYPE_FARMHOUSE,
            self::CATEGORY_TYPE_LODGE,
            self::CATEGORY_TYPE_STUDIO,
            self::CATEGORY_TYPE_VILLA,
            self::CATEGORY_TYPE_BARN,
            self::CATEGORY_TYPE_HOUSEBOAT,
            self::CATEGORY_TYPE_CABIN,
            self::CATEGORY_TYPE_YACHT,
            self::CATEGORY_TYPE_APARTHOTEL,
            self::CATEGORY_TYPE_HOUSE,
            self::CATEGORY_TYPE_RESORT,
            self::CATEGORY_TYPE_TREEHOUSE,
            self::CATEGORY_TYPE_WINDMILL,
            self::CATEGORY_TYPE_YURT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getListingOriginAllowableValues()
    {
        return [
            self::LISTING_ORIGIN_OTHER,
            self::LISTING_ORIGIN_KIGO,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['stay_settings'] = $data['stay_settings'] ?? null;
        $this->container['blocked_out_nights_settings'] = $data['blocked_out_nights_settings'] ?? null;
        $this->container['fee_settings'] = $data['fee_settings'] ?? null;
        $this->container['contract_settings'] = $data['contract_settings'] ?? null;
        $this->container['locations'] = $data['locations'] ?? null;
        $this->container['rooms'] = $data['rooms'] ?? null;
        $this->container['listing_collection_id'] = $data['listing_collection_id'] ?? null;
        $this->container['listing_group_id'] = $data['listing_group_id'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['property_id'] = $data['property_id'] ?? null;
        $this->container['property_override'] = $data['property_override'] ?? null;
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['sleeps'] = $data['sleeps'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['time_zone_id'] = $data['time_zone_id'] ?? null;
        $this->container['check_in_time'] = $data['check_in_time'] ?? null;
        $this->container['check_out_time'] = $data['check_out_time'] ?? null;
        $this->container['rental_agreement_url'] = $data['rental_agreement_url'] ?? null;
        $this->container['associated_channel_connection_ids'] = $data['associated_channel_connection_ids'] ?? null;
        $this->container['associated_channel_connections'] = $data['associated_channel_connections'] ?? null;
        $this->container['accepted_payment_methods'] = $data['accepted_payment_methods'] ?? null;
        $this->container['square_feet'] = $data['square_feet'] ?? null;
        $this->container['unit_size_type'] = $data['unit_size_type'] ?? null;
        $this->container['category_type'] = $data['category_type'] ?? null;
        $this->container['local_tax_id'] = $data['local_tax_id'] ?? null;
        $this->container['bedrooms'] = $data['bedrooms'] ?? null;
        $this->container['bathrooms'] = $data['bathrooms'] ?? null;
        $this->container['half_bathrooms'] = $data['half_bathrooms'] ?? null;
        $this->container['floor'] = $data['floor'] ?? null;
        $this->container['parking_spaces'] = $data['parking_spaces'] ?? null;
        $this->container['garage_spaces'] = $data['garage_spaces'] ?? null;
        $this->container['year_built'] = $data['year_built'] ?? null;
        $this->container['stories'] = $data['stories'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['descriptions'] = $data['descriptions'] ?? null;
        $this->container['check_in_policy'] = $data['check_in_policy'] ?? null;
        $this->container['media'] = $data['media'] ?? null;
        $this->container['amenities'] = $data['amenities'] ?? null;
        $this->container['default_rate_schedule'] = $data['default_rate_schedule'] ?? null;
        $this->container['sunrise_date'] = $data['sunrise_date'] ?? null;
        $this->container['sunset_date'] = $data['sunset_date'] ?? null;
        $this->container['listing_origin'] = $data['listing_origin'] ?? null;
        $this->container['show_location'] = $data['show_location'] ?? null;
        $this->container['promotion_settings'] = $data['promotion_settings'] ?? null;
        $this->container['license_number'] = $data['license_number'] ?? null;
        $this->container['reviews'] = $data['reviews'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUnitSizeTypeAllowableValues();
        if (!is_null($this->container['unit_size_type']) && !in_array($this->container['unit_size_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unit_size_type', must be one of '%s'",
                $this->container['unit_size_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCategoryTypeAllowableValues();
        if (!is_null($this->container['category_type']) && !in_array($this->container['category_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'category_type', must be one of '%s'",
                $this->container['category_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getListingOriginAllowableValues();
        if (!is_null($this->container['listing_origin']) && !in_array($this->container['listing_origin'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'listing_origin', must be one of '%s'",
                $this->container['listing_origin'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Listing ID
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets stay_settings
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\StaySettings|null
     */
    public function getStaySettings()
    {
        return $this->container['stay_settings'];
    }

    /**
     * Sets stay_settings
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\StaySettings|null $stay_settings stay_settings
     *
     * @return self
     */
    public function setStaySettings($stay_settings)
    {
        $this->container['stay_settings'] = $stay_settings;

        return $this;
    }

    /**
     * Gets blocked_out_nights_settings
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\BlockedOutNightsSettings|null
     */
    public function getBlockedOutNightsSettings()
    {
        return $this->container['blocked_out_nights_settings'];
    }

    /**
     * Sets blocked_out_nights_settings
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\BlockedOutNightsSettings|null $blocked_out_nights_settings blocked_out_nights_settings
     *
     * @return self
     */
    public function setBlockedOutNightsSettings($blocked_out_nights_settings)
    {
        $this->container['blocked_out_nights_settings'] = $blocked_out_nights_settings;

        return $this;
    }

    /**
     * Gets fee_settings
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\FeeSettings|null
     */
    public function getFeeSettings()
    {
        return $this->container['fee_settings'];
    }

    /**
     * Sets fee_settings
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\FeeSettings|null $fee_settings fee_settings
     *
     * @return self
     */
    public function setFeeSettings($fee_settings)
    {
        $this->container['fee_settings'] = $fee_settings;

        return $this;
    }

    /**
     * Gets contract_settings
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\ContractSettings|null
     */
    public function getContractSettings()
    {
        return $this->container['contract_settings'];
    }

    /**
     * Sets contract_settings
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\ContractSettings|null $contract_settings contract_settings
     *
     * @return self
     */
    public function setContractSettings($contract_settings)
    {
        $this->container['contract_settings'] = $contract_settings;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\Location[]|null
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\Location[]|null $locations Locations
     *
     * @return self
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets rooms
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\RoomList|null
     */
    public function getRooms()
    {
        return $this->container['rooms'];
    }

    /**
     * Sets rooms
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\RoomList|null $rooms rooms
     *
     * @return self
     */
    public function setRooms($rooms)
    {
        $this->container['rooms'] = $rooms;

        return $this;
    }

    /**
     * Gets listing_collection_id
     *
     * @return int|null
     */
    public function getListingCollectionId()
    {
        return $this->container['listing_collection_id'];
    }

    /**
     * Sets listing_collection_id
     *
     * @param int|null $listing_collection_id Listing Collection ID
     *
     * @return self
     */
    public function setListingCollectionId($listing_collection_id)
    {
        $this->container['listing_collection_id'] = $listing_collection_id;

        return $this;
    }

    /**
     * Gets listing_group_id
     *
     * @return int|null
     */
    public function getListingGroupId()
    {
        return $this->container['listing_group_id'];
    }

    /**
     * Sets listing_group_id
     *
     * @param int|null $listing_group_id Listing Group ID
     *
     * @return self
     */
    public function setListingGroupId($listing_group_id)
    {
        $this->container['listing_group_id'] = $listing_group_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id External ID
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets property_id
     *
     * @return int|null
     */
    public function getPropertyId()
    {
        return $this->container['property_id'];
    }

    /**
     * Sets property_id
     *
     * @param int|null $property_id Property ID
     *
     * @return self
     */
    public function setPropertyId($property_id)
    {
        $this->container['property_id'] = $property_id;

        return $this;
    }

    /**
     * Gets property_override
     *
     * @return string|null
     */
    public function getPropertyOverride()
    {
        return $this->container['property_override'];
    }

    /**
     * Sets property_override
     *
     * @param string|null $property_override Property Override
     *
     * @return self
     */
    public function setPropertyOverride($property_override)
    {
        $this->container['property_override'] = $property_override;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id AccountID
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets sleeps
     *
     * @return int|null
     */
    public function getSleeps()
    {
        return $this->container['sleeps'];
    }

    /**
     * Sets sleeps
     *
     * @param int|null $sleeps Sleeps
     *
     * @return self
     */
    public function setSleeps($sleeps)
    {
        $this->container['sleeps'] = $sleeps;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata Metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets time_zone_id
     *
     * @return string|null
     */
    public function getTimeZoneId()
    {
        return $this->container['time_zone_id'];
    }

    /**
     * Sets time_zone_id
     *
     * @param string|null $time_zone_id Time Zone ID
     *
     * @return self
     */
    public function setTimeZoneId($time_zone_id)
    {
        $this->container['time_zone_id'] = $time_zone_id;

        return $this;
    }

    /**
     * Gets check_in_time
     *
     * @return string|null
     */
    public function getCheckInTime()
    {
        return $this->container['check_in_time'];
    }

    /**
     * Sets check_in_time
     *
     * @param string|null $check_in_time Check-in time
     *
     * @return self
     */
    public function setCheckInTime($check_in_time)
    {
        $this->container['check_in_time'] = $check_in_time;

        return $this;
    }

    /**
     * Gets check_out_time
     *
     * @return string|null
     */
    public function getCheckOutTime()
    {
        return $this->container['check_out_time'];
    }

    /**
     * Sets check_out_time
     *
     * @param string|null $check_out_time Check-out time
     *
     * @return self
     */
    public function setCheckOutTime($check_out_time)
    {
        $this->container['check_out_time'] = $check_out_time;

        return $this;
    }

    /**
     * Gets rental_agreement_url
     *
     * @return string|null
     */
    public function getRentalAgreementUrl()
    {
        return $this->container['rental_agreement_url'];
    }

    /**
     * Sets rental_agreement_url
     *
     * @param string|null $rental_agreement_url Rental agreement URL
     *
     * @return self
     */
    public function setRentalAgreementUrl($rental_agreement_url)
    {
        $this->container['rental_agreement_url'] = $rental_agreement_url;

        return $this;
    }

    /**
     * Gets associated_channel_connection_ids
     *
     * @return int[]|null
     */
    public function getAssociatedChannelConnectionIds()
    {
        return $this->container['associated_channel_connection_ids'];
    }

    /**
     * Sets associated_channel_connection_ids
     *
     * @param int[]|null $associated_channel_connection_ids Channel Connection IDs associated to the Listing
     *
     * @return self
     */
    public function setAssociatedChannelConnectionIds($associated_channel_connection_ids)
    {
        $this->container['associated_channel_connection_ids'] = $associated_channel_connection_ids;

        return $this;
    }

    /**
     * Gets associated_channel_connections
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\ChannelConnectionListing[]|null
     */
    public function getAssociatedChannelConnections()
    {
        return $this->container['associated_channel_connections'];
    }

    /**
     * Sets associated_channel_connections
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\ChannelConnectionListing[]|null $associated_channel_connections associated_channel_connections
     *
     * @return self
     */
    public function setAssociatedChannelConnections($associated_channel_connections)
    {
        $this->container['associated_channel_connections'] = $associated_channel_connections;

        return $this;
    }

    /**
     * Gets accepted_payment_methods
     *
     * @return string[]|null
     */
    public function getAcceptedPaymentMethods()
    {
        return $this->container['accepted_payment_methods'];
    }

    /**
     * Sets accepted_payment_methods
     *
     * @param string[]|null $accepted_payment_methods Credit card brands which the PMC accepts for booking payment
     *
     * @return self
     */
    public function setAcceptedPaymentMethods($accepted_payment_methods)
    {
        $allowedValues = $this->getAcceptedPaymentMethodsAllowableValues();
        if (!is_null($accepted_payment_methods) && array_diff($accepted_payment_methods, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'accepted_payment_methods', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accepted_payment_methods'] = $accepted_payment_methods;

        return $this;
    }

    /**
     * Gets square_feet
     *
     * @return double|null
     */
    public function getSquareFeet()
    {
        return $this->container['square_feet'];
    }

    /**
     * Sets square_feet
     *
     * @param double|null $square_feet Unit size in square feet (it is the responsibility of the consumer to convert it  if for example they wanted to display square meters.
     *
     * @return self
     */
    public function setSquareFeet($square_feet)
    {
        $this->container['square_feet'] = $square_feet;

        return $this;
    }

    /**
     * Gets unit_size_type
     *
     * @return string|null
     */
    public function getUnitSizeType()
    {
        return $this->container['unit_size_type'];
    }

    /**
     * Sets unit_size_type
     *
     * @param string|null $unit_size_type unit_size_type
     *
     * @return self
     */
    public function setUnitSizeType($unit_size_type)
    {
        $allowedValues = $this->getUnitSizeTypeAllowableValues();
        if (!is_null($unit_size_type) && !in_array($unit_size_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unit_size_type', must be one of '%s'",
                    $unit_size_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unit_size_type'] = $unit_size_type;

        return $this;
    }

    /**
     * Gets category_type
     *
     * @return string|null
     */
    public function getCategoryType()
    {
        return $this->container['category_type'];
    }

    /**
     * Sets category_type
     *
     * @param string|null $category_type Category type of the property (e.g. Condo, House, Townhouse)
     *
     * @return self
     */
    public function setCategoryType($category_type)
    {
        $allowedValues = $this->getCategoryTypeAllowableValues();
        if (!is_null($category_type) && !in_array($category_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'category_type', must be one of '%s'",
                    $category_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['category_type'] = $category_type;

        return $this;
    }

    /**
     * Gets local_tax_id
     *
     * @return string|null
     */
    public function getLocalTaxId()
    {
        return $this->container['local_tax_id'];
    }

    /**
     * Sets local_tax_id
     *
     * @param string|null $local_tax_id local_tax_id
     *
     * @return self
     */
    public function setLocalTaxId($local_tax_id)
    {
        $this->container['local_tax_id'] = $local_tax_id;

        return $this;
    }

    /**
     * Gets bedrooms
     *
     * @return int|null
     */
    public function getBedrooms()
    {
        return $this->container['bedrooms'];
    }

    /**
     * Sets bedrooms
     *
     * @param int|null $bedrooms bedrooms
     *
     * @return self
     */
    public function setBedrooms($bedrooms)
    {
        $this->container['bedrooms'] = $bedrooms;

        return $this;
    }

    /**
     * Gets bathrooms
     *
     * @return double|null
     */
    public function getBathrooms()
    {
        return $this->container['bathrooms'];
    }

    /**
     * Sets bathrooms
     *
     * @param double|null $bathrooms bathrooms
     *
     * @return self
     */
    public function setBathrooms($bathrooms)
    {
        $this->container['bathrooms'] = $bathrooms;

        return $this;
    }

    /**
     * Gets half_bathrooms
     *
     * @return int|null
     */
    public function getHalfBathrooms()
    {
        return $this->container['half_bathrooms'];
    }

    /**
     * Sets half_bathrooms
     *
     * @param int|null $half_bathrooms half_bathrooms
     *
     * @return self
     */
    public function setHalfBathrooms($half_bathrooms)
    {
        $this->container['half_bathrooms'] = $half_bathrooms;

        return $this;
    }

    /**
     * Gets floor
     *
     * @return int|null
     */
    public function getFloor()
    {
        return $this->container['floor'];
    }

    /**
     * Sets floor
     *
     * @param int|null $floor floor
     *
     * @return self
     */
    public function setFloor($floor)
    {
        $this->container['floor'] = $floor;

        return $this;
    }

    /**
     * Gets parking_spaces
     *
     * @return int|null
     */
    public function getParkingSpaces()
    {
        return $this->container['parking_spaces'];
    }

    /**
     * Sets parking_spaces
     *
     * @param int|null $parking_spaces parking_spaces
     *
     * @return self
     */
    public function setParkingSpaces($parking_spaces)
    {
        $this->container['parking_spaces'] = $parking_spaces;

        return $this;
    }

    /**
     * Gets garage_spaces
     *
     * @return int|null
     */
    public function getGarageSpaces()
    {
        return $this->container['garage_spaces'];
    }

    /**
     * Sets garage_spaces
     *
     * @param int|null $garage_spaces garage_spaces
     *
     * @return self
     */
    public function setGarageSpaces($garage_spaces)
    {
        $this->container['garage_spaces'] = $garage_spaces;

        return $this;
    }

    /**
     * Gets year_built
     *
     * @return int|null
     */
    public function getYearBuilt()
    {
        return $this->container['year_built'];
    }

    /**
     * Sets year_built
     *
     * @param int|null $year_built year_built
     *
     * @return self
     */
    public function setYearBuilt($year_built)
    {
        $this->container['year_built'] = $year_built;

        return $this;
    }

    /**
     * Gets stories
     *
     * @return int|null
     */
    public function getStories()
    {
        return $this->container['stories'];
    }

    /**
     * Sets stories
     *
     * @param int|null $stories stories
     *
     * @return self
     */
    public function setStories($stories)
    {
        $this->container['stories'] = $stories;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\PropertyAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\PropertyAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets descriptions
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\PropertyDescription[]|null
     */
    public function getDescriptions()
    {
        return $this->container['descriptions'];
    }

    /**
     * Sets descriptions
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\PropertyDescription[]|null $descriptions descriptions
     *
     * @return self
     */
    public function setDescriptions($descriptions)
    {
        $this->container['descriptions'] = $descriptions;

        return $this;
    }

    /**
     * Gets check_in_policy
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\CheckInPolicy|null
     */
    public function getCheckInPolicy()
    {
        return $this->container['check_in_policy'];
    }

    /**
     * Sets check_in_policy
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\CheckInPolicy|null $check_in_policy check_in_policy
     *
     * @return self
     */
    public function setCheckInPolicy($check_in_policy)
    {
        $this->container['check_in_policy'] = $check_in_policy;

        return $this;
    }

    /**
     * Gets media
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\Media[]|null
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\Media[]|null $media media
     *
     * @return self
     */
    public function setMedia($media)
    {
        $this->container['media'] = $media;

        return $this;
    }

    /**
     * Gets amenities
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\Amenity[]|null
     */
    public function getAmenities()
    {
        return $this->container['amenities'];
    }

    /**
     * Sets amenities
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\Amenity[]|null $amenities amenities
     *
     * @return self
     */
    public function setAmenities($amenities)
    {
        $this->container['amenities'] = $amenities;

        return $this;
    }

    /**
     * Gets default_rate_schedule
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\RateSchedule|null
     */
    public function getDefaultRateSchedule()
    {
        return $this->container['default_rate_schedule'];
    }

    /**
     * Sets default_rate_schedule
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\RateSchedule|null $default_rate_schedule default_rate_schedule
     *
     * @return self
     */
    public function setDefaultRateSchedule($default_rate_schedule)
    {
        $this->container['default_rate_schedule'] = $default_rate_schedule;

        return $this;
    }

    /**
     * Gets sunrise_date
     *
     * @return \DateTime|null
     */
    public function getSunriseDate()
    {
        return $this->container['sunrise_date'];
    }

    /**
     * Sets sunrise_date
     *
     * @param \DateTime|null $sunrise_date The date when the listing can start being occupied
     *
     * @return self
     */
    public function setSunriseDate($sunrise_date)
    {
        $this->container['sunrise_date'] = $sunrise_date;

        return $this;
    }

    /**
     * Gets sunset_date
     *
     * @return \DateTime|null
     */
    public function getSunsetDate()
    {
        return $this->container['sunset_date'];
    }

    /**
     * Sets sunset_date
     *
     * @param \DateTime|null $sunset_date The date when the listing must end being occupied
     *
     * @return self
     */
    public function setSunsetDate($sunset_date)
    {
        $this->container['sunset_date'] = $sunset_date;

        return $this;
    }

    /**
     * Gets listing_origin
     *
     * @return string|null
     */
    public function getListingOrigin()
    {
        return $this->container['listing_origin'];
    }

    /**
     * Sets listing_origin
     *
     * @param string|null $listing_origin Tells from where the Listing will be created and managed
     *
     * @return self
     */
    public function setListingOrigin($listing_origin)
    {
        $allowedValues = $this->getListingOriginAllowableValues();
        if (!is_null($listing_origin) && !in_array($listing_origin, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'listing_origin', must be one of '%s'",
                    $listing_origin,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['listing_origin'] = $listing_origin;

        return $this;
    }

    /**
     * Gets show_location
     *
     * @return bool|null
     */
    public function getShowLocation()
    {
        return $this->container['show_location'];
    }

    /**
     * Sets show_location
     *
     * @param bool|null $show_location Defines if the exact location of listings should be visible
     *
     * @return self
     */
    public function setShowLocation($show_location)
    {
        $this->container['show_location'] = $show_location;

        return $this;
    }

    /**
     * Gets promotion_settings
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\PromotionSetting[]|null
     */
    public function getPromotionSettings()
    {
        return $this->container['promotion_settings'];
    }

    /**
     * Sets promotion_settings
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\PromotionSetting[]|null $promotion_settings All promotions the listing is associated to
     *
     * @return self
     */
    public function setPromotionSettings($promotion_settings)
    {
        $this->container['promotion_settings'] = $promotion_settings;

        return $this;
    }

    /**
     * Gets license_number
     *
     * @return string|null
     */
    public function getLicenseNumber()
    {
        return $this->container['license_number'];
    }

    /**
     * Sets license_number
     *
     * @param string|null $license_number license_number
     *
     * @return self
     */
    public function setLicenseNumber($license_number)
    {
        $this->container['license_number'] = $license_number;

        return $this;
    }

    /**
     * Gets reviews
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\Review[]|null
     */
    public function getReviews()
    {
        return $this->container['reviews'];
    }

    /**
     * Sets reviews
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\Review[]|null $reviews reviews
     *
     * @return self
     */
    public function setReviews($reviews)
    {
        $this->container['reviews'] = $reviews;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


