<?php
/**
 * CreditCardAuthorizationError
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\ChannelsV2\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * CreditCardAuthorizationError Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CreditCardAuthorizationError implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreditCardAuthorizationError';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'gateway_error_code' => 'string',
        'gateway_error_message' => 'string',
        'code' => 'string',
        'message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'gateway_error_code' => null,
        'gateway_error_message' => null,
        'code' => null,
        'message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gateway_error_code' => 'gatewayErrorCode',
        'gateway_error_message' => 'gatewayErrorMessage',
        'code' => 'code',
        'message' => 'message'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gateway_error_code' => 'setGatewayErrorCode',
        'gateway_error_message' => 'setGatewayErrorMessage',
        'code' => 'setCode',
        'message' => 'setMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gateway_error_code' => 'getGatewayErrorCode',
        'gateway_error_message' => 'getGatewayErrorMessage',
        'code' => 'getCode',
        'message' => 'getMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CODE_CREDIT_CARD_DECLINED = 'CreditCardDeclined';
    const CODE_CREDIT_CARD_EXPIRED = 'CreditCardExpired';
    const CODE_INVALID_STATE_CODE = 'InvalidStateCode';
    const CODE_INVALID_COUNTRY_CODE = 'InvalidCountryCode';
    const CODE_INVALID_ZIP_CODE = 'InvalidZipCode';
    const CODE_MAXIMUM_AMOUNT_EXCEEDED_FOR_THIS_PROCESSOR = 'MaximumAmountExceededForThisProcessor';
    const CODE_MINIMUM_AMOUNT_NOT_MET_FOR_THIS_PROCESSOR = 'MinimumAmountNotMetForThisProcessor';
    const CODE_INVALID_REFERENCE_TRANSACTION = 'InvalidReferenceTransaction';
    const CODE_CANNOT_REFUND_THIS_PAYMENT = 'CannotRefundThisPayment';
    const CODE_CANNOT_REVERSE_THIS_PAYMENT = 'CannotReverseThisPayment';
    const CODE_INVALID_PAYMENT_AMOUNT = 'InvalidPaymentAmount';
    const CODE_INVALID_CARD_TYPE = 'InvalidCardType';
    const CODE_EMAIL_INCORRECT = 'EmailIncorrect';
    const CODE_CURRENCY_CODE_MISMATCH = 'CurrencyCodeMismatch';
    const CODE_INVALID_CREDENTIALS = 'InvalidCredentials';
    const CODE_TOKEN_DOES_NOT_EXIST = 'TokenDoesNotExist';
    const CODE_COULD_NOT_ISSUE_REFUND = 'CouldNotIssueRefund';
    const CODE_NOT_ALL_REQUIRED_FIELDS_FOUND = 'NotAllRequiredFieldsFound';
    const CODE_INVALID_ARRIVAL_DATE = 'InvalidArrivalDate';
    const CODE_INVALID_DEPARTURE_DATE = 'InvalidDepartureDate';
    const CODE_INVALID_REFUND_AMOUNT = 'InvalidRefundAmount';
    const CODE_CARD_TYPE_NOT_ACCEPTED = 'CardTypeNotAccepted';
    const CODE_INVALID_TOKEN = 'InvalidToken';
    const CODE_INVALID_CHARACTER_SUBMITTED = 'InvalidCharacterSubmitted';
    const CODE_INVALID_CURRENCY = 'InvalidCurrency';
    const CODE_REQUEST_TIMED_OUT = 'RequestTimedOut';
    const CODE_INVALID_PARAMETER = 'InvalidParameter';
    const CODE_INVALID_CONFIGURATION = 'InvalidConfiguration';
    const CODE_INVALID_CVV = 'InvalidCVV';
    const CODE_INVALID_CARD_NUMBER = 'InvalidCardNumber';
    const CODE_EXTERNAL_SERVER_ERROR = 'ExternalServerError';
    const CODE_TRANSACTION_CANNOT_BE_PROCESSED = 'TransactionCannotBeProcessed';
    const CODE_INVALID_INVOICE = 'InvalidInvoice';
    const CODE_INVALID_BILLING_ADDRESS = 'InvalidBillingAddress';
    const CODE_DUPLICATE_TRANSACTION_SUBMITTED = 'DuplicateTransactionSubmitted';
    const CODE_INVALID_SETTLEMENT_AMOUNT = 'InvalidSettlementAmount';
    const CODE_PARTIAL_REVERSALS_NOT_SUPPORTED = 'PartialReversalsNotSupported';
    const CODE_INVALID_AUTHENTICATION_AMOUNT = 'InvalidAuthenticationAmount';
    const CODE_INVALID_REQUEST = 'InvalidRequest';
    const CODE_INVALID_CARD_HOLDER_NAME = 'InvalidCardHolderName';
    const CODE_CURRENCY_NOT_SPECIFIED = 'CurrencyNotSpecified';
    const CODE_CURRENCY_WRONG_FORMAT = 'CurrencyWrongFormat';
    const CODE_EXPIRATION_NOT_SPECIFIED = 'ExpirationNotSpecified';
    const CODE_NAME_ON_CARD_NOT_SPECIFIED = 'NameOnCardNotSpecified';
    const CODE_LAST_NAME_ON_CARD_NOT_SPECIFIED = 'LastNameOnCardNotSpecified';
    const CODE_CARD_NUMBER_NOT_SPECIFIED = 'CardNumberNotSpecified';
    const CODE_INVALID_METHOD = 'InvalidMethod';
    const CODE_PROCESSOR_NOT_SET = 'ProcessorNotSet';
    const CODE_UNMAPPED_ERROR = 'UnmappedError';
    const CODE_NO_STATEMENT = 'NoStatement';
    const CODE_NO_STATEMENT_LINES = 'NoStatementLines';
    const CODE_CURRENCY_DIFFERENT_THAN_SOLUTION = 'CurrencyDifferentThanSolution';
    const CODE_STATEMENT_AMOUNT0 = 'StatementAmount0';
    const CODE_CURRENCY_DIFFERENT_THAN_STATEMENT = 'CurrencyDifferentThanStatement';
    const CODE_NO_CREDIT_CARD_PROCESSOR = 'NoCreditCardProcessor';
    const CODE_NO_CREDIT_CARD_AVAILABLE = 'NoCreditCardAvailable';
    const CODE_PROCESSOR_ONLY_SUPPORTS_DO_CAPTURE = 'ProcessorOnlySupportsDoCapture';
    const CODE_BOOKING_NOT_FOUND = 'BookingNotFound';
    const CODE_GATEWAY_CONNECTION_FAILED = 'GatewayConnectionFailed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeAllowableValues()
    {
        return [
            self::CODE_CREDIT_CARD_DECLINED,
            self::CODE_CREDIT_CARD_EXPIRED,
            self::CODE_INVALID_STATE_CODE,
            self::CODE_INVALID_COUNTRY_CODE,
            self::CODE_INVALID_ZIP_CODE,
            self::CODE_MAXIMUM_AMOUNT_EXCEEDED_FOR_THIS_PROCESSOR,
            self::CODE_MINIMUM_AMOUNT_NOT_MET_FOR_THIS_PROCESSOR,
            self::CODE_INVALID_REFERENCE_TRANSACTION,
            self::CODE_CANNOT_REFUND_THIS_PAYMENT,
            self::CODE_CANNOT_REVERSE_THIS_PAYMENT,
            self::CODE_INVALID_PAYMENT_AMOUNT,
            self::CODE_INVALID_CARD_TYPE,
            self::CODE_EMAIL_INCORRECT,
            self::CODE_CURRENCY_CODE_MISMATCH,
            self::CODE_INVALID_CREDENTIALS,
            self::CODE_TOKEN_DOES_NOT_EXIST,
            self::CODE_COULD_NOT_ISSUE_REFUND,
            self::CODE_NOT_ALL_REQUIRED_FIELDS_FOUND,
            self::CODE_INVALID_ARRIVAL_DATE,
            self::CODE_INVALID_DEPARTURE_DATE,
            self::CODE_INVALID_REFUND_AMOUNT,
            self::CODE_CARD_TYPE_NOT_ACCEPTED,
            self::CODE_INVALID_TOKEN,
            self::CODE_INVALID_CHARACTER_SUBMITTED,
            self::CODE_INVALID_CURRENCY,
            self::CODE_REQUEST_TIMED_OUT,
            self::CODE_INVALID_PARAMETER,
            self::CODE_INVALID_CONFIGURATION,
            self::CODE_INVALID_CVV,
            self::CODE_INVALID_CARD_NUMBER,
            self::CODE_EXTERNAL_SERVER_ERROR,
            self::CODE_TRANSACTION_CANNOT_BE_PROCESSED,
            self::CODE_INVALID_INVOICE,
            self::CODE_INVALID_BILLING_ADDRESS,
            self::CODE_DUPLICATE_TRANSACTION_SUBMITTED,
            self::CODE_INVALID_SETTLEMENT_AMOUNT,
            self::CODE_PARTIAL_REVERSALS_NOT_SUPPORTED,
            self::CODE_INVALID_AUTHENTICATION_AMOUNT,
            self::CODE_INVALID_REQUEST,
            self::CODE_INVALID_CARD_HOLDER_NAME,
            self::CODE_CURRENCY_NOT_SPECIFIED,
            self::CODE_CURRENCY_WRONG_FORMAT,
            self::CODE_EXPIRATION_NOT_SPECIFIED,
            self::CODE_NAME_ON_CARD_NOT_SPECIFIED,
            self::CODE_LAST_NAME_ON_CARD_NOT_SPECIFIED,
            self::CODE_CARD_NUMBER_NOT_SPECIFIED,
            self::CODE_INVALID_METHOD,
            self::CODE_PROCESSOR_NOT_SET,
            self::CODE_UNMAPPED_ERROR,
            self::CODE_NO_STATEMENT,
            self::CODE_NO_STATEMENT_LINES,
            self::CODE_CURRENCY_DIFFERENT_THAN_SOLUTION,
            self::CODE_STATEMENT_AMOUNT0,
            self::CODE_CURRENCY_DIFFERENT_THAN_STATEMENT,
            self::CODE_NO_CREDIT_CARD_PROCESSOR,
            self::CODE_NO_CREDIT_CARD_AVAILABLE,
            self::CODE_PROCESSOR_ONLY_SUPPORTS_DO_CAPTURE,
            self::CODE_BOOKING_NOT_FOUND,
            self::CODE_GATEWAY_CONNECTION_FAILED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gateway_error_code'] = $data['gateway_error_code'] ?? null;
        $this->container['gateway_error_message'] = $data['gateway_error_message'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['message'] = $data['message'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($this->container['code']) && !in_array($this->container['code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'code', must be one of '%s'",
                $this->container['code'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gateway_error_code
     *
     * @return string|null
     */
    public function getGatewayErrorCode()
    {
        return $this->container['gateway_error_code'];
    }

    /**
     * Sets gateway_error_code
     *
     * @param string|null $gateway_error_code The original message from the payment gateway
     *
     * @return self
     */
    public function setGatewayErrorCode($gateway_error_code)
    {
        $this->container['gateway_error_code'] = $gateway_error_code;

        return $this;
    }

    /**
     * Gets gateway_error_message
     *
     * @return string|null
     */
    public function getGatewayErrorMessage()
    {
        return $this->container['gateway_error_message'];
    }

    /**
     * Sets gateway_error_message
     *
     * @param string|null $gateway_error_message The original error message from the payment gateway
     *
     * @return self
     */
    public function setGatewayErrorMessage($gateway_error_message)
    {
        $this->container['gateway_error_message'] = $gateway_error_message;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code Unified error code (flattened Core API, KVRS and Pro errors) constructed by Kigo
     *
     * @return self
     */
    public function setCode($code)
    {
        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($code) && !in_array($code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'code', must be one of '%s'",
                    $code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message Unified error message constructed by Kigo
     *
     * @return self
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


