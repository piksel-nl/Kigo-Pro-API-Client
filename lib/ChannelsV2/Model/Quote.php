<?php
/**
 * Quote
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\ChannelsV2\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * Quote Class Doc Comment
 *
 * @category Class
 * @description A Quote contains error information, property data, and a statement
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Quote implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Quote';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'guid' => 'string',
        'success' => 'bool',
        'error_message' => 'string',
        'error_code' => 'string',
        'currency' => 'string',
        'accepted_payment_methods' => 'string[]',
        'valid_until' => '\DateTime',
        'plans' => '\Piksel\Kigo\ChannelsV2\Model\QuotePlan[]',
        'payment_gateway' => '\Piksel\Kigo\ChannelsV2\Model\PaymentGateway',
        'listing_id' => 'int',
        'check_in_date' => '\DateTime',
        'check_out_date' => '\DateTime',
        'num_adults' => 'int',
        'num_children' => 'int',
        'booked_on_date' => '\DateTime',
        'requested_optional_fees' => '\Piksel\Kigo\ChannelsV2\Model\OptionalFee[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'guid' => 'uuid',
        'success' => null,
        'error_message' => null,
        'error_code' => null,
        'currency' => null,
        'accepted_payment_methods' => null,
        'valid_until' => 'date-time',
        'plans' => null,
        'payment_gateway' => null,
        'listing_id' => 'int32',
        'check_in_date' => 'date',
        'check_out_date' => 'date',
        'num_adults' => 'int32',
        'num_children' => 'int32',
        'booked_on_date' => 'date-time',
        'requested_optional_fees' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'guid' => 'guid',
        'success' => 'success',
        'error_message' => 'errorMessage',
        'error_code' => 'errorCode',
        'currency' => 'currency',
        'accepted_payment_methods' => 'acceptedPaymentMethods',
        'valid_until' => 'validUntil',
        'plans' => 'plans',
        'payment_gateway' => 'paymentGateway',
        'listing_id' => 'listingID',
        'check_in_date' => 'checkInDate',
        'check_out_date' => 'checkOutDate',
        'num_adults' => 'numAdults',
        'num_children' => 'numChildren',
        'booked_on_date' => 'bookedOnDate',
        'requested_optional_fees' => 'requestedOptionalFees'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'guid' => 'setGuid',
        'success' => 'setSuccess',
        'error_message' => 'setErrorMessage',
        'error_code' => 'setErrorCode',
        'currency' => 'setCurrency',
        'accepted_payment_methods' => 'setAcceptedPaymentMethods',
        'valid_until' => 'setValidUntil',
        'plans' => 'setPlans',
        'payment_gateway' => 'setPaymentGateway',
        'listing_id' => 'setListingId',
        'check_in_date' => 'setCheckInDate',
        'check_out_date' => 'setCheckOutDate',
        'num_adults' => 'setNumAdults',
        'num_children' => 'setNumChildren',
        'booked_on_date' => 'setBookedOnDate',
        'requested_optional_fees' => 'setRequestedOptionalFees'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'guid' => 'getGuid',
        'success' => 'getSuccess',
        'error_message' => 'getErrorMessage',
        'error_code' => 'getErrorCode',
        'currency' => 'getCurrency',
        'accepted_payment_methods' => 'getAcceptedPaymentMethods',
        'valid_until' => 'getValidUntil',
        'plans' => 'getPlans',
        'payment_gateway' => 'getPaymentGateway',
        'listing_id' => 'getListingId',
        'check_in_date' => 'getCheckInDate',
        'check_out_date' => 'getCheckOutDate',
        'num_adults' => 'getNumAdults',
        'num_children' => 'getNumChildren',
        'booked_on_date' => 'getBookedOnDate',
        'requested_optional_fees' => 'getRequestedOptionalFees'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ERROR_CODE_INVALID = 'Invalid';
    const ERROR_CODE_ALREADY_USED = 'AlreadyUsed';
    const ERROR_CODE_EXPIRED = 'Expired';
    const ERROR_CODE_INVALID_LISTING = 'InvalidListing';
    const ERROR_CODE_LOCATION_NOT_FOUND = 'LocationNotFound';
    const ERROR_CODE_PLAN_NOT_FOUND = 'PlanNotFound';
    const ERROR_CODE_PRICE_NOT_AVAILABLE = 'PriceNotAvailable';
    const ERROR_CODE_INVALID_RATE_PLANS = 'InvalidRatePlans';
    const ERROR_CODE_INVALID_CONTRACT = 'InvalidContract';
    const ERROR_CODE_INVALID_FEES = 'InvalidFees';
    const CURRENCY_UNKNOWN = 'Unknown';
    const CURRENCY_USD = 'USD';
    const CURRENCY_AUD = 'AUD';
    const CURRENCY_BRL = 'BRL';
    const CURRENCY_CAD = 'CAD';
    const CURRENCY_CNY = 'CNY';
    const CURRENCY_DKK = 'DKK';
    const CURRENCY_EUR = 'EUR';
    const CURRENCY_HKD = 'HKD';
    const CURRENCY_INR = 'INR';
    const CURRENCY_JPY = 'JPY';
    const CURRENCY_MYR = 'MYR';
    const CURRENCY_MXN = 'MXN';
    const CURRENCY_NZD = 'NZD';
    const CURRENCY_NOK = 'NOK';
    const CURRENCY_SGD = 'SGD';
    const CURRENCY_ZAR = 'ZAR';
    const CURRENCY_KRW = 'KRW';
    const CURRENCY_LKR = 'LKR';
    const CURRENCY_SEK = 'SEK';
    const CURRENCY_CHF = 'CHF';
    const CURRENCY_TWD = 'TWD';
    const CURRENCY_THB = 'THB';
    const CURRENCY_GBP = 'GBP';
    const CURRENCY_EGP = 'EGP';
    const CURRENCY_XPF = 'XPF';
    const CURRENCY_AED = 'AED';
    const CURRENCY_ANG = 'ANG';
    const CURRENCY_ARS = 'ARS';
    const CURRENCY_BGN = 'BGN';
    const CURRENCY_BHD = 'BHD';
    const CURRENCY_BOB = 'BOB';
    const CURRENCY_BTN = 'BTN';
    const CURRENCY_BZD = 'BZD';
    const CURRENCY_CLP = 'CLP';
    const CURRENCY_COP = 'COP';
    const CURRENCY_CRC = 'CRC';
    const CURRENCY_CZK = 'CZK';
    const CURRENCY_GNF = 'GNF';
    const CURRENCY_GTQ = 'GTQ';
    const CURRENCY_GYD = 'GYD';
    const CURRENCY_HNL = 'HNL';
    const CURRENCY_HRK = 'HRK';
    const CURRENCY_HUF = 'HUF';
    const CURRENCY_IDR = 'IDR';
    const CURRENCY_ILS = 'ILS';
    const CURRENCY_ISK = 'ISK';
    const CURRENCY_JOD = 'JOD';
    const CURRENCY_KHR = 'KHR';
    const CURRENCY_KWD = 'KWD';
    const CURRENCY_KZT = 'KZT';
    const CURRENCY_LAK = 'LAK';
    const CURRENCY_LBP = 'LBP';
    const CURRENCY_MAD = 'MAD';
    const CURRENCY_MOP = 'MOP';
    const CURRENCY_NIO = 'NIO';
    const CURRENCY_OMR = 'OMR';
    const CURRENCY_PAB = 'PAB';
    const CURRENCY_PEN = 'PEN';
    const CURRENCY_PHP = 'PHP';
    const CURRENCY_PKR = 'PKR';
    const CURRENCY_PLN = 'PLN';
    const CURRENCY_PYG = 'PYG';
    const CURRENCY_QAR = 'QAR';
    const CURRENCY_RON = 'RON';
    const CURRENCY_RUB = 'RUB';
    const CURRENCY_SAR = 'SAR';
    const CURRENCY_SRD = 'SRD';
    const CURRENCY_TND = 'TND';
    const CURRENCY__TRY = 'TRY';
    const CURRENCY_UAH = 'UAH';
    const CURRENCY_UYU = 'UYU';
    const CURRENCY_VEF = 'VEF';
    const CURRENCY_VND = 'VND';
    const CURRENCY_AZN = 'AZN';
    const ACCEPTED_PAYMENT_METHODS_NOT_SET = 'NotSet';
    const ACCEPTED_PAYMENT_METHODS_VISA = 'Visa';
    const ACCEPTED_PAYMENT_METHODS_MASTER_CARD = 'MasterCard';
    const ACCEPTED_PAYMENT_METHODS_AMERICAN_EXPRESS = 'AmericanExpress';
    const ACCEPTED_PAYMENT_METHODS_DISCOVER = 'Discover';
    const ACCEPTED_PAYMENT_METHODS_OTHER = 'Other';
    const ACCEPTED_PAYMENT_METHODS_DINERS_CLUB = 'DinersClub';
    const ACCEPTED_PAYMENT_METHODS_OFFLINE = 'Offline';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getErrorCodeAllowableValues()
    {
        return [
            self::ERROR_CODE_INVALID,
            self::ERROR_CODE_ALREADY_USED,
            self::ERROR_CODE_EXPIRED,
            self::ERROR_CODE_INVALID_LISTING,
            self::ERROR_CODE_LOCATION_NOT_FOUND,
            self::ERROR_CODE_PLAN_NOT_FOUND,
            self::ERROR_CODE_PRICE_NOT_AVAILABLE,
            self::ERROR_CODE_INVALID_RATE_PLANS,
            self::ERROR_CODE_INVALID_CONTRACT,
            self::ERROR_CODE_INVALID_FEES,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_UNKNOWN,
            self::CURRENCY_USD,
            self::CURRENCY_AUD,
            self::CURRENCY_BRL,
            self::CURRENCY_CAD,
            self::CURRENCY_CNY,
            self::CURRENCY_DKK,
            self::CURRENCY_EUR,
            self::CURRENCY_HKD,
            self::CURRENCY_INR,
            self::CURRENCY_JPY,
            self::CURRENCY_MYR,
            self::CURRENCY_MXN,
            self::CURRENCY_NZD,
            self::CURRENCY_NOK,
            self::CURRENCY_SGD,
            self::CURRENCY_ZAR,
            self::CURRENCY_KRW,
            self::CURRENCY_LKR,
            self::CURRENCY_SEK,
            self::CURRENCY_CHF,
            self::CURRENCY_TWD,
            self::CURRENCY_THB,
            self::CURRENCY_GBP,
            self::CURRENCY_EGP,
            self::CURRENCY_XPF,
            self::CURRENCY_AED,
            self::CURRENCY_ANG,
            self::CURRENCY_ARS,
            self::CURRENCY_BGN,
            self::CURRENCY_BHD,
            self::CURRENCY_BOB,
            self::CURRENCY_BTN,
            self::CURRENCY_BZD,
            self::CURRENCY_CLP,
            self::CURRENCY_COP,
            self::CURRENCY_CRC,
            self::CURRENCY_CZK,
            self::CURRENCY_GNF,
            self::CURRENCY_GTQ,
            self::CURRENCY_GYD,
            self::CURRENCY_HNL,
            self::CURRENCY_HRK,
            self::CURRENCY_HUF,
            self::CURRENCY_IDR,
            self::CURRENCY_ILS,
            self::CURRENCY_ISK,
            self::CURRENCY_JOD,
            self::CURRENCY_KHR,
            self::CURRENCY_KWD,
            self::CURRENCY_KZT,
            self::CURRENCY_LAK,
            self::CURRENCY_LBP,
            self::CURRENCY_MAD,
            self::CURRENCY_MOP,
            self::CURRENCY_NIO,
            self::CURRENCY_OMR,
            self::CURRENCY_PAB,
            self::CURRENCY_PEN,
            self::CURRENCY_PHP,
            self::CURRENCY_PKR,
            self::CURRENCY_PLN,
            self::CURRENCY_PYG,
            self::CURRENCY_QAR,
            self::CURRENCY_RON,
            self::CURRENCY_RUB,
            self::CURRENCY_SAR,
            self::CURRENCY_SRD,
            self::CURRENCY_TND,
            self::CURRENCY__TRY,
            self::CURRENCY_UAH,
            self::CURRENCY_UYU,
            self::CURRENCY_VEF,
            self::CURRENCY_VND,
            self::CURRENCY_AZN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAcceptedPaymentMethodsAllowableValues()
    {
        return [
            self::ACCEPTED_PAYMENT_METHODS_NOT_SET,
            self::ACCEPTED_PAYMENT_METHODS_VISA,
            self::ACCEPTED_PAYMENT_METHODS_MASTER_CARD,
            self::ACCEPTED_PAYMENT_METHODS_AMERICAN_EXPRESS,
            self::ACCEPTED_PAYMENT_METHODS_DISCOVER,
            self::ACCEPTED_PAYMENT_METHODS_OTHER,
            self::ACCEPTED_PAYMENT_METHODS_DINERS_CLUB,
            self::ACCEPTED_PAYMENT_METHODS_OFFLINE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['guid'] = $data['guid'] ?? null;
        $this->container['success'] = $data['success'] ?? null;
        $this->container['error_message'] = $data['error_message'] ?? null;
        $this->container['error_code'] = $data['error_code'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['accepted_payment_methods'] = $data['accepted_payment_methods'] ?? null;
        $this->container['valid_until'] = $data['valid_until'] ?? null;
        $this->container['plans'] = $data['plans'] ?? null;
        $this->container['payment_gateway'] = $data['payment_gateway'] ?? null;
        $this->container['listing_id'] = $data['listing_id'] ?? null;
        $this->container['check_in_date'] = $data['check_in_date'] ?? null;
        $this->container['check_out_date'] = $data['check_out_date'] ?? null;
        $this->container['num_adults'] = $data['num_adults'] ?? null;
        $this->container['num_children'] = $data['num_children'] ?? null;
        $this->container['booked_on_date'] = $data['booked_on_date'] ?? null;
        $this->container['requested_optional_fees'] = $data['requested_optional_fees'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getErrorCodeAllowableValues();
        if (!is_null($this->container['error_code']) && !in_array($this->container['error_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'error_code', must be one of '%s'",
                $this->container['error_code'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets guid
     *
     * @return string|null
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string|null $guid Guid used for referencing the Quote in the call for book
     *
     * @return self
     */
    public function setGuid($guid)
    {
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets success
     *
     * @return bool|null
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool|null $success If the Quote is valid
     *
     * @return self
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message Error Message
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return string|null
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param string|null $error_code Error Code
     *
     * @return self
     */
    public function setErrorCode($error_code)
    {
        $allowedValues = $this->getErrorCodeAllowableValues();
        if (!is_null($error_code) && !in_array($error_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'error_code', must be one of '%s'",
                    $error_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($currency) && !in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets accepted_payment_methods
     *
     * @return string[]|null
     */
    public function getAcceptedPaymentMethods()
    {
        return $this->container['accepted_payment_methods'];
    }

    /**
     * Sets accepted_payment_methods
     *
     * @param string[]|null $accepted_payment_methods accepted_payment_methods
     *
     * @return self
     */
    public function setAcceptedPaymentMethods($accepted_payment_methods)
    {
        $allowedValues = $this->getAcceptedPaymentMethodsAllowableValues();
        if (!is_null($accepted_payment_methods) && array_diff($accepted_payment_methods, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'accepted_payment_methods', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accepted_payment_methods'] = $accepted_payment_methods;

        return $this;
    }

    /**
     * Gets valid_until
     *
     * @return \DateTime|null
     */
    public function getValidUntil()
    {
        return $this->container['valid_until'];
    }

    /**
     * Sets valid_until
     *
     * @param \DateTime|null $valid_until Last date the Quote may be converted to a Booking
     *
     * @return self
     */
    public function setValidUntil($valid_until)
    {
        $this->container['valid_until'] = $valid_until;

        return $this;
    }

    /**
     * Gets plans
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\QuotePlan[]|null
     */
    public function getPlans()
    {
        return $this->container['plans'];
    }

    /**
     * Sets plans
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\QuotePlan[]|null $plans plans
     *
     * @return self
     */
    public function setPlans($plans)
    {
        $this->container['plans'] = $plans;

        return $this;
    }

    /**
     * Gets payment_gateway
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\PaymentGateway|null
     */
    public function getPaymentGateway()
    {
        return $this->container['payment_gateway'];
    }

    /**
     * Sets payment_gateway
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\PaymentGateway|null $payment_gateway payment_gateway
     *
     * @return self
     */
    public function setPaymentGateway($payment_gateway)
    {
        $this->container['payment_gateway'] = $payment_gateway;

        return $this;
    }

    /**
     * Gets listing_id
     *
     * @return int|null
     */
    public function getListingId()
    {
        return $this->container['listing_id'];
    }

    /**
     * Sets listing_id
     *
     * @param int|null $listing_id Listing ID
     *
     * @return self
     */
    public function setListingId($listing_id)
    {
        $this->container['listing_id'] = $listing_id;

        return $this;
    }

    /**
     * Gets check_in_date
     *
     * @return \DateTime|null
     */
    public function getCheckInDate()
    {
        return $this->container['check_in_date'];
    }

    /**
     * Sets check_in_date
     *
     * @param \DateTime|null $check_in_date Check-In Date
     *
     * @return self
     */
    public function setCheckInDate($check_in_date)
    {
        $this->container['check_in_date'] = $check_in_date;

        return $this;
    }

    /**
     * Gets check_out_date
     *
     * @return \DateTime|null
     */
    public function getCheckOutDate()
    {
        return $this->container['check_out_date'];
    }

    /**
     * Sets check_out_date
     *
     * @param \DateTime|null $check_out_date Check-Out Date
     *
     * @return self
     */
    public function setCheckOutDate($check_out_date)
    {
        $this->container['check_out_date'] = $check_out_date;

        return $this;
    }

    /**
     * Gets num_adults
     *
     * @return int|null
     */
    public function getNumAdults()
    {
        return $this->container['num_adults'];
    }

    /**
     * Sets num_adults
     *
     * @param int|null $num_adults Number of Adults
     *
     * @return self
     */
    public function setNumAdults($num_adults)
    {
        $this->container['num_adults'] = $num_adults;

        return $this;
    }

    /**
     * Gets num_children
     *
     * @return int|null
     */
    public function getNumChildren()
    {
        return $this->container['num_children'];
    }

    /**
     * Sets num_children
     *
     * @param int|null $num_children Number of Children
     *
     * @return self
     */
    public function setNumChildren($num_children)
    {
        $this->container['num_children'] = $num_children;

        return $this;
    }

    /**
     * Gets booked_on_date
     *
     * @return \DateTime|null
     */
    public function getBookedOnDate()
    {
        return $this->container['booked_on_date'];
    }

    /**
     * Sets booked_on_date
     *
     * @param \DateTime|null $booked_on_date Booking Date (optional, UTC)
     *
     * @return self
     */
    public function setBookedOnDate($booked_on_date)
    {
        $this->container['booked_on_date'] = $booked_on_date;

        return $this;
    }

    /**
     * Gets requested_optional_fees
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\OptionalFee[]|null
     */
    public function getRequestedOptionalFees()
    {
        return $this->container['requested_optional_fees'];
    }

    /**
     * Sets requested_optional_fees
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\OptionalFee[]|null $requested_optional_fees Guid(s) of the optional fee(s) that you want to consider in the quote
     *
     * @return self
     */
    public function setRequestedOptionalFees($requested_optional_fees)
    {
        $this->container['requested_optional_fees'] = $requested_optional_fees;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


