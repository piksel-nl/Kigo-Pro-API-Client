<?php
/**
 * Booking
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\ChannelsV2\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * Booking Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Booking implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Booking';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'listing_id' => 'int',
        'id' => 'int',
        'external_key' => 'string',
        'account_id' => 'int',
        'location_id' => 'int',
        'reservation_number' => 'string',
        'confirmation_number' => 'string',
        'notes' => 'string',
        'renter' => '\Piksel\Kigo\ChannelsV2\Model\Person',
        'total_amount' => 'double',
        'paid_amount' => 'double',
        'currency' => 'string',
        'booked_on_date' => '\DateTime',
        'check_in_date' => '\DateTime',
        'check_out_date' => '\DateTime',
        'type' => 'string',
        'status' => 'string',
        'payment_status' => 'string',
        'short_code' => 'string',
        'special_needs' => 'string',
        'num_adults' => 'int',
        'num_children' => 'int',
        'originating_channel_connection_id' => 'int',
        'statement' => '\Piksel\Kigo\ChannelsV2\Model\GuestStatement',
        'deposits' => '\Piksel\Kigo\ChannelsV2\Model\DepositStatement',
        'deposit_schedule' => '\Piksel\Kigo\ChannelsV2\Model\ScheduledTransaction[]',
        'payments' => '\Piksel\Kigo\ChannelsV2\Model\Transaction[]',
        'accepted_payment_methods' => 'string[]',
        'payment_schedule' => '\Piksel\Kigo\ChannelsV2\Model\PaymentSchedule',
        'cancellation_policy' => '\Piksel\Kigo\ChannelsV2\Model\CancellationPolicy',
        'cancellation_date' => '\DateTime',
        'cancellation_source' => 'string',
        'cancelled_by_role' => 'string',
        'cancelled_by_user_id' => 'int',
        'cancellation_reason' => 'string',
        'rental_agreement_url' => 'string',
        'channel_collected' => 'bool',
        'payment_collection_mode' => 'string',
        'past_due_scheduled_installment_amount' => 'double',
        'past_due_initiated_payments' => 'double',
        'past_due_scheduled_deposit_amount' => 'double',
        'past_due_scheduled_amount' => 'double',
        'credit_card' => '\Piksel\Kigo\ChannelsV2\Model\CreditCardResponse',
        'booking_source_code' => 'string',
        'point_of_sale_code' => 'string',
        'payment_gateway' => '\Piksel\Kigo\ChannelsV2\Model\PaymentGateway'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'listing_id' => 'int32',
        'id' => 'int32',
        'external_key' => null,
        'account_id' => 'int32',
        'location_id' => 'int32',
        'reservation_number' => null,
        'confirmation_number' => null,
        'notes' => null,
        'renter' => null,
        'total_amount' => 'double',
        'paid_amount' => 'double',
        'currency' => null,
        'booked_on_date' => 'date-time',
        'check_in_date' => 'date',
        'check_out_date' => 'date',
        'type' => null,
        'status' => null,
        'payment_status' => null,
        'short_code' => null,
        'special_needs' => null,
        'num_adults' => 'int32',
        'num_children' => 'int32',
        'originating_channel_connection_id' => 'int32',
        'statement' => null,
        'deposits' => null,
        'deposit_schedule' => null,
        'payments' => null,
        'accepted_payment_methods' => null,
        'payment_schedule' => null,
        'cancellation_policy' => null,
        'cancellation_date' => 'date-time',
        'cancellation_source' => null,
        'cancelled_by_role' => null,
        'cancelled_by_user_id' => 'int32',
        'cancellation_reason' => null,
        'rental_agreement_url' => null,
        'channel_collected' => null,
        'payment_collection_mode' => null,
        'past_due_scheduled_installment_amount' => 'double',
        'past_due_initiated_payments' => 'double',
        'past_due_scheduled_deposit_amount' => 'double',
        'past_due_scheduled_amount' => 'double',
        'credit_card' => null,
        'booking_source_code' => null,
        'point_of_sale_code' => null,
        'payment_gateway' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'listing_id' => 'listingID',
        'id' => 'id',
        'external_key' => 'externalKey',
        'account_id' => 'accountID',
        'location_id' => 'locationID',
        'reservation_number' => 'reservationNumber',
        'confirmation_number' => 'confirmationNumber',
        'notes' => 'notes',
        'renter' => 'renter',
        'total_amount' => 'totalAmount',
        'paid_amount' => 'paidAmount',
        'currency' => 'currency',
        'booked_on_date' => 'bookedOnDate',
        'check_in_date' => 'checkInDate',
        'check_out_date' => 'checkOutDate',
        'type' => 'type',
        'status' => 'status',
        'payment_status' => 'paymentStatus',
        'short_code' => 'shortCode',
        'special_needs' => 'specialNeeds',
        'num_adults' => 'numAdults',
        'num_children' => 'numChildren',
        'originating_channel_connection_id' => 'originatingChannelConnectionID',
        'statement' => 'statement',
        'deposits' => 'deposits',
        'deposit_schedule' => 'depositSchedule',
        'payments' => 'payments',
        'accepted_payment_methods' => 'acceptedPaymentMethods',
        'payment_schedule' => 'paymentSchedule',
        'cancellation_policy' => 'cancellationPolicy',
        'cancellation_date' => 'cancellationDate',
        'cancellation_source' => 'cancellationSource',
        'cancelled_by_role' => 'cancelledByRole',
        'cancelled_by_user_id' => 'cancelledByUserID',
        'cancellation_reason' => 'cancellationReason',
        'rental_agreement_url' => 'rentalAgreementUrl',
        'channel_collected' => 'channelCollected',
        'payment_collection_mode' => 'paymentCollectionMode',
        'past_due_scheduled_installment_amount' => 'pastDueScheduledInstallmentAmount',
        'past_due_initiated_payments' => 'pastDueInitiatedPayments',
        'past_due_scheduled_deposit_amount' => 'pastDueScheduledDepositAmount',
        'past_due_scheduled_amount' => 'pastDueScheduledAmount',
        'credit_card' => 'creditCard',
        'booking_source_code' => 'bookingSourceCode',
        'point_of_sale_code' => 'pointOfSaleCode',
        'payment_gateway' => 'paymentGateway'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'listing_id' => 'setListingId',
        'id' => 'setId',
        'external_key' => 'setExternalKey',
        'account_id' => 'setAccountId',
        'location_id' => 'setLocationId',
        'reservation_number' => 'setReservationNumber',
        'confirmation_number' => 'setConfirmationNumber',
        'notes' => 'setNotes',
        'renter' => 'setRenter',
        'total_amount' => 'setTotalAmount',
        'paid_amount' => 'setPaidAmount',
        'currency' => 'setCurrency',
        'booked_on_date' => 'setBookedOnDate',
        'check_in_date' => 'setCheckInDate',
        'check_out_date' => 'setCheckOutDate',
        'type' => 'setType',
        'status' => 'setStatus',
        'payment_status' => 'setPaymentStatus',
        'short_code' => 'setShortCode',
        'special_needs' => 'setSpecialNeeds',
        'num_adults' => 'setNumAdults',
        'num_children' => 'setNumChildren',
        'originating_channel_connection_id' => 'setOriginatingChannelConnectionId',
        'statement' => 'setStatement',
        'deposits' => 'setDeposits',
        'deposit_schedule' => 'setDepositSchedule',
        'payments' => 'setPayments',
        'accepted_payment_methods' => 'setAcceptedPaymentMethods',
        'payment_schedule' => 'setPaymentSchedule',
        'cancellation_policy' => 'setCancellationPolicy',
        'cancellation_date' => 'setCancellationDate',
        'cancellation_source' => 'setCancellationSource',
        'cancelled_by_role' => 'setCancelledByRole',
        'cancelled_by_user_id' => 'setCancelledByUserId',
        'cancellation_reason' => 'setCancellationReason',
        'rental_agreement_url' => 'setRentalAgreementUrl',
        'channel_collected' => 'setChannelCollected',
        'payment_collection_mode' => 'setPaymentCollectionMode',
        'past_due_scheduled_installment_amount' => 'setPastDueScheduledInstallmentAmount',
        'past_due_initiated_payments' => 'setPastDueInitiatedPayments',
        'past_due_scheduled_deposit_amount' => 'setPastDueScheduledDepositAmount',
        'past_due_scheduled_amount' => 'setPastDueScheduledAmount',
        'credit_card' => 'setCreditCard',
        'booking_source_code' => 'setBookingSourceCode',
        'point_of_sale_code' => 'setPointOfSaleCode',
        'payment_gateway' => 'setPaymentGateway'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'listing_id' => 'getListingId',
        'id' => 'getId',
        'external_key' => 'getExternalKey',
        'account_id' => 'getAccountId',
        'location_id' => 'getLocationId',
        'reservation_number' => 'getReservationNumber',
        'confirmation_number' => 'getConfirmationNumber',
        'notes' => 'getNotes',
        'renter' => 'getRenter',
        'total_amount' => 'getTotalAmount',
        'paid_amount' => 'getPaidAmount',
        'currency' => 'getCurrency',
        'booked_on_date' => 'getBookedOnDate',
        'check_in_date' => 'getCheckInDate',
        'check_out_date' => 'getCheckOutDate',
        'type' => 'getType',
        'status' => 'getStatus',
        'payment_status' => 'getPaymentStatus',
        'short_code' => 'getShortCode',
        'special_needs' => 'getSpecialNeeds',
        'num_adults' => 'getNumAdults',
        'num_children' => 'getNumChildren',
        'originating_channel_connection_id' => 'getOriginatingChannelConnectionId',
        'statement' => 'getStatement',
        'deposits' => 'getDeposits',
        'deposit_schedule' => 'getDepositSchedule',
        'payments' => 'getPayments',
        'accepted_payment_methods' => 'getAcceptedPaymentMethods',
        'payment_schedule' => 'getPaymentSchedule',
        'cancellation_policy' => 'getCancellationPolicy',
        'cancellation_date' => 'getCancellationDate',
        'cancellation_source' => 'getCancellationSource',
        'cancelled_by_role' => 'getCancelledByRole',
        'cancelled_by_user_id' => 'getCancelledByUserId',
        'cancellation_reason' => 'getCancellationReason',
        'rental_agreement_url' => 'getRentalAgreementUrl',
        'channel_collected' => 'getChannelCollected',
        'payment_collection_mode' => 'getPaymentCollectionMode',
        'past_due_scheduled_installment_amount' => 'getPastDueScheduledInstallmentAmount',
        'past_due_initiated_payments' => 'getPastDueInitiatedPayments',
        'past_due_scheduled_deposit_amount' => 'getPastDueScheduledDepositAmount',
        'past_due_scheduled_amount' => 'getPastDueScheduledAmount',
        'credit_card' => 'getCreditCard',
        'booking_source_code' => 'getBookingSourceCode',
        'point_of_sale_code' => 'getPointOfSaleCode',
        'payment_gateway' => 'getPaymentGateway'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CURRENCY_UNKNOWN = 'Unknown';
    const CURRENCY_USD = 'USD';
    const CURRENCY_AUD = 'AUD';
    const CURRENCY_BRL = 'BRL';
    const CURRENCY_CAD = 'CAD';
    const CURRENCY_CNY = 'CNY';
    const CURRENCY_DKK = 'DKK';
    const CURRENCY_EUR = 'EUR';
    const CURRENCY_HKD = 'HKD';
    const CURRENCY_INR = 'INR';
    const CURRENCY_JPY = 'JPY';
    const CURRENCY_MYR = 'MYR';
    const CURRENCY_MXN = 'MXN';
    const CURRENCY_NZD = 'NZD';
    const CURRENCY_NOK = 'NOK';
    const CURRENCY_SGD = 'SGD';
    const CURRENCY_ZAR = 'ZAR';
    const CURRENCY_KRW = 'KRW';
    const CURRENCY_LKR = 'LKR';
    const CURRENCY_SEK = 'SEK';
    const CURRENCY_CHF = 'CHF';
    const CURRENCY_TWD = 'TWD';
    const CURRENCY_THB = 'THB';
    const CURRENCY_GBP = 'GBP';
    const CURRENCY_EGP = 'EGP';
    const CURRENCY_XPF = 'XPF';
    const CURRENCY_AED = 'AED';
    const CURRENCY_ANG = 'ANG';
    const CURRENCY_ARS = 'ARS';
    const CURRENCY_BGN = 'BGN';
    const CURRENCY_BHD = 'BHD';
    const CURRENCY_BOB = 'BOB';
    const CURRENCY_BTN = 'BTN';
    const CURRENCY_BZD = 'BZD';
    const CURRENCY_CLP = 'CLP';
    const CURRENCY_COP = 'COP';
    const CURRENCY_CRC = 'CRC';
    const CURRENCY_CZK = 'CZK';
    const CURRENCY_GNF = 'GNF';
    const CURRENCY_GTQ = 'GTQ';
    const CURRENCY_GYD = 'GYD';
    const CURRENCY_HNL = 'HNL';
    const CURRENCY_HRK = 'HRK';
    const CURRENCY_HUF = 'HUF';
    const CURRENCY_IDR = 'IDR';
    const CURRENCY_ILS = 'ILS';
    const CURRENCY_ISK = 'ISK';
    const CURRENCY_JOD = 'JOD';
    const CURRENCY_KHR = 'KHR';
    const CURRENCY_KWD = 'KWD';
    const CURRENCY_KZT = 'KZT';
    const CURRENCY_LAK = 'LAK';
    const CURRENCY_LBP = 'LBP';
    const CURRENCY_MAD = 'MAD';
    const CURRENCY_MOP = 'MOP';
    const CURRENCY_NIO = 'NIO';
    const CURRENCY_OMR = 'OMR';
    const CURRENCY_PAB = 'PAB';
    const CURRENCY_PEN = 'PEN';
    const CURRENCY_PHP = 'PHP';
    const CURRENCY_PKR = 'PKR';
    const CURRENCY_PLN = 'PLN';
    const CURRENCY_PYG = 'PYG';
    const CURRENCY_QAR = 'QAR';
    const CURRENCY_RON = 'RON';
    const CURRENCY_RUB = 'RUB';
    const CURRENCY_SAR = 'SAR';
    const CURRENCY_SRD = 'SRD';
    const CURRENCY_TND = 'TND';
    const CURRENCY__TRY = 'TRY';
    const CURRENCY_UAH = 'UAH';
    const CURRENCY_UYU = 'UYU';
    const CURRENCY_VEF = 'VEF';
    const CURRENCY_VND = 'VND';
    const CURRENCY_AZN = 'AZN';
    const TYPE_UNKNOWN = 'Unknown';
    const TYPE_INTERNET = 'Internet';
    const TYPE_IN_HOUSE = 'InHouse';
    const TYPE_AGENT = 'Agent';
    const TYPE_OWNER = 'Owner';
    const TYPE_BLOCK = 'Block';
    const TYPE_PMS = 'PMS';
    const TYPE_STANDARD = 'Standard';
    const STATUS_UNKNOWN = 'Unknown';
    const STATUS_CANCELED = 'Canceled';
    const STATUS_HELD = 'Held';
    const STATUS_PENDING_CONFIRMATION = 'PendingConfirmation';
    const STATUS_CONFIRMED = 'Confirmed';
    const STATUS_CHECKED_IN = 'CheckedIn';
    const STATUS_CHECKED_OUT = 'CheckedOut';
    const STATUS_QUOTE = 'Quote';
    const STATUS_PROCESSING = 'Processing';
    const STATUS_REQUEST_TO_BOOK = 'RequestToBook';
    const STATUS_ACCEPTED = 'Accepted';
    const STATUS_OVERBOOKING = 'Overbooking';
    const STATUS_FAILED = 'Failed';
    const PAYMENT_STATUS_NOT_APPLICABLE = 'NotApplicable';
    const PAYMENT_STATUS_UNPAID = 'Unpaid';
    const PAYMENT_STATUS_PARTIALLY_PAID = 'PartiallyPaid';
    const PAYMENT_STATUS_PAID = 'Paid';
    const SHORT_CODE_NONE = 'None';
    const SHORT_CODE_EARLY_CHECK_IN = 'EarlyCheckIn';
    const SHORT_CODE_PRE_CHECK_OUT_INSPECTION = 'PreCheckOutInspection';
    const SHORT_CODE_CONTRACT_OVERRIDE = 'ContractOverride';
    const SHORT_CODE_NO_CONTRACT = 'NoContract';
    const SHORT_CODE_UPDATE_SPECIAL_REQUESTS = 'UpdateSpecialRequests';
    const ACCEPTED_PAYMENT_METHODS_NOT_SET = 'NotSet';
    const ACCEPTED_PAYMENT_METHODS_VISA = 'Visa';
    const ACCEPTED_PAYMENT_METHODS_MASTER_CARD = 'MasterCard';
    const ACCEPTED_PAYMENT_METHODS_AMERICAN_EXPRESS = 'AmericanExpress';
    const ACCEPTED_PAYMENT_METHODS_DISCOVER = 'Discover';
    const ACCEPTED_PAYMENT_METHODS_OTHER = 'Other';
    const ACCEPTED_PAYMENT_METHODS_DINERS_CLUB = 'DinersClub';
    const ACCEPTED_PAYMENT_METHODS_OFFLINE = 'Offline';
    const CANCELLATION_SOURCE_SYSTEM = 'System';
    const CANCELLATION_SOURCE_API = 'Api';
    const CANCELLED_BY_ROLE_UNKNOWN = 'Unknown';
    const CANCELLED_BY_ROLE_CHANNEL = 'Channel';
    const CANCELLED_BY_ROLE_HOST = 'Host';
    const CANCELLED_BY_ROLE_GUEST = 'Guest';
    const CANCELLED_BY_ROLE_KIGO = 'Kigo';
    const CANCELLATION_REASON_UNKNOWN = 'Unknown';
    const CANCELLATION_REASON_DENIED = 'Denied';
    const CANCELLATION_REASON_GUEST_INITIATED = 'GuestInitiated';
    const CANCELLATION_REASON_MISTAKE = 'Mistake';
    const CANCELLATION_REASON_BREACH_OF_POLICY = 'BreachOfPolicy';
    const CANCELLATION_REASON_FRAUD = 'Fraud';
    const CANCELLATION_REASON_INVALID_CREDIT_CARD = 'InvalidCreditCard';
    const CANCELLATION_REASON_NO_SHOW_WITH_REFUND = 'NoShowWithRefund';
    const CANCELLATION_REASON_NO_SHOW_WITHOUT_REFUND = 'NoShowWithoutRefund';
    const PAYMENT_COLLECTION_MODE_PMC_COLLECT = 'PmcCollect';
    const PAYMENT_COLLECTION_MODE_VIRTUAL_CC = 'VirtualCc';
    const PAYMENT_COLLECTION_MODE_CHANNEL_COLLECT = 'ChannelCollect';
    const PAYMENT_COLLECTION_MODE_PMC_OFFLINE_COLLECT = 'PmcOfflineCollect';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_UNKNOWN,
            self::CURRENCY_USD,
            self::CURRENCY_AUD,
            self::CURRENCY_BRL,
            self::CURRENCY_CAD,
            self::CURRENCY_CNY,
            self::CURRENCY_DKK,
            self::CURRENCY_EUR,
            self::CURRENCY_HKD,
            self::CURRENCY_INR,
            self::CURRENCY_JPY,
            self::CURRENCY_MYR,
            self::CURRENCY_MXN,
            self::CURRENCY_NZD,
            self::CURRENCY_NOK,
            self::CURRENCY_SGD,
            self::CURRENCY_ZAR,
            self::CURRENCY_KRW,
            self::CURRENCY_LKR,
            self::CURRENCY_SEK,
            self::CURRENCY_CHF,
            self::CURRENCY_TWD,
            self::CURRENCY_THB,
            self::CURRENCY_GBP,
            self::CURRENCY_EGP,
            self::CURRENCY_XPF,
            self::CURRENCY_AED,
            self::CURRENCY_ANG,
            self::CURRENCY_ARS,
            self::CURRENCY_BGN,
            self::CURRENCY_BHD,
            self::CURRENCY_BOB,
            self::CURRENCY_BTN,
            self::CURRENCY_BZD,
            self::CURRENCY_CLP,
            self::CURRENCY_COP,
            self::CURRENCY_CRC,
            self::CURRENCY_CZK,
            self::CURRENCY_GNF,
            self::CURRENCY_GTQ,
            self::CURRENCY_GYD,
            self::CURRENCY_HNL,
            self::CURRENCY_HRK,
            self::CURRENCY_HUF,
            self::CURRENCY_IDR,
            self::CURRENCY_ILS,
            self::CURRENCY_ISK,
            self::CURRENCY_JOD,
            self::CURRENCY_KHR,
            self::CURRENCY_KWD,
            self::CURRENCY_KZT,
            self::CURRENCY_LAK,
            self::CURRENCY_LBP,
            self::CURRENCY_MAD,
            self::CURRENCY_MOP,
            self::CURRENCY_NIO,
            self::CURRENCY_OMR,
            self::CURRENCY_PAB,
            self::CURRENCY_PEN,
            self::CURRENCY_PHP,
            self::CURRENCY_PKR,
            self::CURRENCY_PLN,
            self::CURRENCY_PYG,
            self::CURRENCY_QAR,
            self::CURRENCY_RON,
            self::CURRENCY_RUB,
            self::CURRENCY_SAR,
            self::CURRENCY_SRD,
            self::CURRENCY_TND,
            self::CURRENCY__TRY,
            self::CURRENCY_UAH,
            self::CURRENCY_UYU,
            self::CURRENCY_VEF,
            self::CURRENCY_VND,
            self::CURRENCY_AZN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_UNKNOWN,
            self::TYPE_INTERNET,
            self::TYPE_IN_HOUSE,
            self::TYPE_AGENT,
            self::TYPE_OWNER,
            self::TYPE_BLOCK,
            self::TYPE_PMS,
            self::TYPE_STANDARD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNKNOWN,
            self::STATUS_CANCELED,
            self::STATUS_HELD,
            self::STATUS_PENDING_CONFIRMATION,
            self::STATUS_CONFIRMED,
            self::STATUS_CHECKED_IN,
            self::STATUS_CHECKED_OUT,
            self::STATUS_QUOTE,
            self::STATUS_PROCESSING,
            self::STATUS_REQUEST_TO_BOOK,
            self::STATUS_ACCEPTED,
            self::STATUS_OVERBOOKING,
            self::STATUS_FAILED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_NOT_APPLICABLE,
            self::PAYMENT_STATUS_UNPAID,
            self::PAYMENT_STATUS_PARTIALLY_PAID,
            self::PAYMENT_STATUS_PAID,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShortCodeAllowableValues()
    {
        return [
            self::SHORT_CODE_NONE,
            self::SHORT_CODE_EARLY_CHECK_IN,
            self::SHORT_CODE_PRE_CHECK_OUT_INSPECTION,
            self::SHORT_CODE_CONTRACT_OVERRIDE,
            self::SHORT_CODE_NO_CONTRACT,
            self::SHORT_CODE_UPDATE_SPECIAL_REQUESTS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAcceptedPaymentMethodsAllowableValues()
    {
        return [
            self::ACCEPTED_PAYMENT_METHODS_NOT_SET,
            self::ACCEPTED_PAYMENT_METHODS_VISA,
            self::ACCEPTED_PAYMENT_METHODS_MASTER_CARD,
            self::ACCEPTED_PAYMENT_METHODS_AMERICAN_EXPRESS,
            self::ACCEPTED_PAYMENT_METHODS_DISCOVER,
            self::ACCEPTED_PAYMENT_METHODS_OTHER,
            self::ACCEPTED_PAYMENT_METHODS_DINERS_CLUB,
            self::ACCEPTED_PAYMENT_METHODS_OFFLINE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCancellationSourceAllowableValues()
    {
        return [
            self::CANCELLATION_SOURCE_SYSTEM,
            self::CANCELLATION_SOURCE_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCancelledByRoleAllowableValues()
    {
        return [
            self::CANCELLED_BY_ROLE_UNKNOWN,
            self::CANCELLED_BY_ROLE_CHANNEL,
            self::CANCELLED_BY_ROLE_HOST,
            self::CANCELLED_BY_ROLE_GUEST,
            self::CANCELLED_BY_ROLE_KIGO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCancellationReasonAllowableValues()
    {
        return [
            self::CANCELLATION_REASON_UNKNOWN,
            self::CANCELLATION_REASON_DENIED,
            self::CANCELLATION_REASON_GUEST_INITIATED,
            self::CANCELLATION_REASON_MISTAKE,
            self::CANCELLATION_REASON_BREACH_OF_POLICY,
            self::CANCELLATION_REASON_FRAUD,
            self::CANCELLATION_REASON_INVALID_CREDIT_CARD,
            self::CANCELLATION_REASON_NO_SHOW_WITH_REFUND,
            self::CANCELLATION_REASON_NO_SHOW_WITHOUT_REFUND,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentCollectionModeAllowableValues()
    {
        return [
            self::PAYMENT_COLLECTION_MODE_PMC_COLLECT,
            self::PAYMENT_COLLECTION_MODE_VIRTUAL_CC,
            self::PAYMENT_COLLECTION_MODE_CHANNEL_COLLECT,
            self::PAYMENT_COLLECTION_MODE_PMC_OFFLINE_COLLECT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['listing_id'] = $data['listing_id'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['external_key'] = $data['external_key'] ?? null;
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['location_id'] = $data['location_id'] ?? null;
        $this->container['reservation_number'] = $data['reservation_number'] ?? null;
        $this->container['confirmation_number'] = $data['confirmation_number'] ?? null;
        $this->container['notes'] = $data['notes'] ?? null;
        $this->container['renter'] = $data['renter'] ?? null;
        $this->container['total_amount'] = $data['total_amount'] ?? null;
        $this->container['paid_amount'] = $data['paid_amount'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['booked_on_date'] = $data['booked_on_date'] ?? null;
        $this->container['check_in_date'] = $data['check_in_date'] ?? null;
        $this->container['check_out_date'] = $data['check_out_date'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['payment_status'] = $data['payment_status'] ?? null;
        $this->container['short_code'] = $data['short_code'] ?? null;
        $this->container['special_needs'] = $data['special_needs'] ?? null;
        $this->container['num_adults'] = $data['num_adults'] ?? null;
        $this->container['num_children'] = $data['num_children'] ?? null;
        $this->container['originating_channel_connection_id'] = $data['originating_channel_connection_id'] ?? null;
        $this->container['statement'] = $data['statement'] ?? null;
        $this->container['deposits'] = $data['deposits'] ?? null;
        $this->container['deposit_schedule'] = $data['deposit_schedule'] ?? null;
        $this->container['payments'] = $data['payments'] ?? null;
        $this->container['accepted_payment_methods'] = $data['accepted_payment_methods'] ?? null;
        $this->container['payment_schedule'] = $data['payment_schedule'] ?? null;
        $this->container['cancellation_policy'] = $data['cancellation_policy'] ?? null;
        $this->container['cancellation_date'] = $data['cancellation_date'] ?? null;
        $this->container['cancellation_source'] = $data['cancellation_source'] ?? null;
        $this->container['cancelled_by_role'] = $data['cancelled_by_role'] ?? null;
        $this->container['cancelled_by_user_id'] = $data['cancelled_by_user_id'] ?? null;
        $this->container['cancellation_reason'] = $data['cancellation_reason'] ?? null;
        $this->container['rental_agreement_url'] = $data['rental_agreement_url'] ?? null;
        $this->container['channel_collected'] = $data['channel_collected'] ?? null;
        $this->container['payment_collection_mode'] = $data['payment_collection_mode'] ?? null;
        $this->container['past_due_scheduled_installment_amount'] = $data['past_due_scheduled_installment_amount'] ?? null;
        $this->container['past_due_initiated_payments'] = $data['past_due_initiated_payments'] ?? null;
        $this->container['past_due_scheduled_deposit_amount'] = $data['past_due_scheduled_deposit_amount'] ?? null;
        $this->container['past_due_scheduled_amount'] = $data['past_due_scheduled_amount'] ?? null;
        $this->container['credit_card'] = $data['credit_card'] ?? null;
        $this->container['booking_source_code'] = $data['booking_source_code'] ?? null;
        $this->container['point_of_sale_code'] = $data['point_of_sale_code'] ?? null;
        $this->container['payment_gateway'] = $data['payment_gateway'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_status', must be one of '%s'",
                $this->container['payment_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShortCodeAllowableValues();
        if (!is_null($this->container['short_code']) && !in_array($this->container['short_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'short_code', must be one of '%s'",
                $this->container['short_code'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCancellationSourceAllowableValues();
        if (!is_null($this->container['cancellation_source']) && !in_array($this->container['cancellation_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cancellation_source', must be one of '%s'",
                $this->container['cancellation_source'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCancelledByRoleAllowableValues();
        if (!is_null($this->container['cancelled_by_role']) && !in_array($this->container['cancelled_by_role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cancelled_by_role', must be one of '%s'",
                $this->container['cancelled_by_role'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCancellationReasonAllowableValues();
        if (!is_null($this->container['cancellation_reason']) && !in_array($this->container['cancellation_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cancellation_reason', must be one of '%s'",
                $this->container['cancellation_reason'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentCollectionModeAllowableValues();
        if (!is_null($this->container['payment_collection_mode']) && !in_array($this->container['payment_collection_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_collection_mode', must be one of '%s'",
                $this->container['payment_collection_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets listing_id
     *
     * @return int|null
     */
    public function getListingId()
    {
        return $this->container['listing_id'];
    }

    /**
     * Sets listing_id
     *
     * @param int|null $listing_id Listing ID
     *
     * @return self
     */
    public function setListingId($listing_id)
    {
        $this->container['listing_id'] = $listing_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Location Booking ID
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_key
     *
     * @return string|null
     */
    public function getExternalKey()
    {
        return $this->container['external_key'];
    }

    /**
     * Sets external_key
     *
     * @param string|null $external_key KVRS ID for a Booking
     *
     * @return self
     */
    public function setExternalKey($external_key)
    {
        $this->container['external_key'] = $external_key;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id Account ID
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int|null $location_id Location ID
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets reservation_number
     *
     * @return string|null
     */
    public function getReservationNumber()
    {
        return $this->container['reservation_number'];
    }

    /**
     * Sets reservation_number
     *
     * @param string|null $reservation_number Reservation Number
     *
     * @return self
     */
    public function setReservationNumber($reservation_number)
    {
        $this->container['reservation_number'] = $reservation_number;

        return $this;
    }

    /**
     * Gets confirmation_number
     *
     * @return string|null
     */
    public function getConfirmationNumber()
    {
        return $this->container['confirmation_number'];
    }

    /**
     * Sets confirmation_number
     *
     * @param string|null $confirmation_number Confirmation Number
     *
     * @return self
     */
    public function setConfirmationNumber($confirmation_number)
    {
        $this->container['confirmation_number'] = $confirmation_number;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets renter
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\Person|null
     */
    public function getRenter()
    {
        return $this->container['renter'];
    }

    /**
     * Sets renter
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\Person|null $renter renter
     *
     * @return self
     */
    public function setRenter($renter)
    {
        $this->container['renter'] = $renter;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double|null $total_amount Total Amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets paid_amount
     *
     * @return double|null
     */
    public function getPaidAmount()
    {
        return $this->container['paid_amount'];
    }

    /**
     * Sets paid_amount
     *
     * @param double|null $paid_amount Paid Amount
     *
     * @return self
     */
    public function setPaidAmount($paid_amount)
    {
        $this->container['paid_amount'] = $paid_amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency used for the Statements and Payments
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($currency) && !in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets booked_on_date
     *
     * @return \DateTime|null
     */
    public function getBookedOnDate()
    {
        return $this->container['booked_on_date'];
    }

    /**
     * Sets booked_on_date
     *
     * @param \DateTime|null $booked_on_date Booking Date (UTC)
     *
     * @return self
     */
    public function setBookedOnDate($booked_on_date)
    {
        $this->container['booked_on_date'] = $booked_on_date;

        return $this;
    }

    /**
     * Gets check_in_date
     *
     * @return \DateTime|null
     */
    public function getCheckInDate()
    {
        return $this->container['check_in_date'];
    }

    /**
     * Sets check_in_date
     *
     * @param \DateTime|null $check_in_date Check In Date
     *
     * @return self
     */
    public function setCheckInDate($check_in_date)
    {
        $this->container['check_in_date'] = $check_in_date;

        return $this;
    }

    /**
     * Gets check_out_date
     *
     * @return \DateTime|null
     */
    public function getCheckOutDate()
    {
        return $this->container['check_out_date'];
    }

    /**
     * Sets check_out_date
     *
     * @param \DateTime|null $check_out_date Check Out Date
     *
     * @return self
     */
    public function setCheckOutDate($check_out_date)
    {
        $this->container['check_out_date'] = $check_out_date;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type ID
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status ID
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string|null
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string|null $payment_status Status ID
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($payment_status) && !in_array($payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_status', must be one of '%s'",
                    $payment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets short_code
     *
     * @return string|null
     */
    public function getShortCode()
    {
        return $this->container['short_code'];
    }

    /**
     * Sets short_code
     *
     * @param string|null $short_code Short Code ID
     *
     * @return self
     */
    public function setShortCode($short_code)
    {
        $allowedValues = $this->getShortCodeAllowableValues();
        if (!is_null($short_code) && !in_array($short_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'short_code', must be one of '%s'",
                    $short_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['short_code'] = $short_code;

        return $this;
    }

    /**
     * Gets special_needs
     *
     * @return string|null
     */
    public function getSpecialNeeds()
    {
        return $this->container['special_needs'];
    }

    /**
     * Sets special_needs
     *
     * @param string|null $special_needs Special Needs
     *
     * @return self
     */
    public function setSpecialNeeds($special_needs)
    {
        $this->container['special_needs'] = $special_needs;

        return $this;
    }

    /**
     * Gets num_adults
     *
     * @return int|null
     */
    public function getNumAdults()
    {
        return $this->container['num_adults'];
    }

    /**
     * Sets num_adults
     *
     * @param int|null $num_adults Number of Adults
     *
     * @return self
     */
    public function setNumAdults($num_adults)
    {
        $this->container['num_adults'] = $num_adults;

        return $this;
    }

    /**
     * Gets num_children
     *
     * @return int|null
     */
    public function getNumChildren()
    {
        return $this->container['num_children'];
    }

    /**
     * Sets num_children
     *
     * @param int|null $num_children Number of Children
     *
     * @return self
     */
    public function setNumChildren($num_children)
    {
        $this->container['num_children'] = $num_children;

        return $this;
    }

    /**
     * Gets originating_channel_connection_id
     *
     * @return int|null
     */
    public function getOriginatingChannelConnectionId()
    {
        return $this->container['originating_channel_connection_id'];
    }

    /**
     * Sets originating_channel_connection_id
     *
     * @param int|null $originating_channel_connection_id ChannelConnection ID that created the booking
     *
     * @return self
     */
    public function setOriginatingChannelConnectionId($originating_channel_connection_id)
    {
        $this->container['originating_channel_connection_id'] = $originating_channel_connection_id;

        return $this;
    }

    /**
     * Gets statement
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\GuestStatement|null
     */
    public function getStatement()
    {
        return $this->container['statement'];
    }

    /**
     * Sets statement
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\GuestStatement|null $statement statement
     *
     * @return self
     */
    public function setStatement($statement)
    {
        $this->container['statement'] = $statement;

        return $this;
    }

    /**
     * Gets deposits
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\DepositStatement|null
     */
    public function getDeposits()
    {
        return $this->container['deposits'];
    }

    /**
     * Sets deposits
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\DepositStatement|null $deposits deposits
     *
     * @return self
     */
    public function setDeposits($deposits)
    {
        $this->container['deposits'] = $deposits;

        return $this;
    }

    /**
     * Gets deposit_schedule
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\ScheduledTransaction[]|null
     */
    public function getDepositSchedule()
    {
        return $this->container['deposit_schedule'];
    }

    /**
     * Sets deposit_schedule
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\ScheduledTransaction[]|null $deposit_schedule A collection of refundable payments
     *
     * @return self
     */
    public function setDepositSchedule($deposit_schedule)
    {
        $this->container['deposit_schedule'] = $deposit_schedule;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\Transaction[]|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\Transaction[]|null $payments Paid Transactions and Scheduled Payments
     *
     * @return self
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets accepted_payment_methods
     *
     * @return string[]|null
     */
    public function getAcceptedPaymentMethods()
    {
        return $this->container['accepted_payment_methods'];
    }

    /**
     * Sets accepted_payment_methods
     *
     * @param string[]|null $accepted_payment_methods Accepted Credit Card Brands
     *
     * @return self
     */
    public function setAcceptedPaymentMethods($accepted_payment_methods)
    {
        $allowedValues = $this->getAcceptedPaymentMethodsAllowableValues();
        if (!is_null($accepted_payment_methods) && array_diff($accepted_payment_methods, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'accepted_payment_methods', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accepted_payment_methods'] = $accepted_payment_methods;

        return $this;
    }

    /**
     * Gets payment_schedule
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\PaymentSchedule|null
     */
    public function getPaymentSchedule()
    {
        return $this->container['payment_schedule'];
    }

    /**
     * Sets payment_schedule
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\PaymentSchedule|null $payment_schedule payment_schedule
     *
     * @return self
     */
    public function setPaymentSchedule($payment_schedule)
    {
        $this->container['payment_schedule'] = $payment_schedule;

        return $this;
    }

    /**
     * Gets cancellation_policy
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\CancellationPolicy|null
     */
    public function getCancellationPolicy()
    {
        return $this->container['cancellation_policy'];
    }

    /**
     * Sets cancellation_policy
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\CancellationPolicy|null $cancellation_policy cancellation_policy
     *
     * @return self
     */
    public function setCancellationPolicy($cancellation_policy)
    {
        $this->container['cancellation_policy'] = $cancellation_policy;

        return $this;
    }

    /**
     * Gets cancellation_date
     *
     * @return \DateTime|null
     */
    public function getCancellationDate()
    {
        return $this->container['cancellation_date'];
    }

    /**
     * Sets cancellation_date
     *
     * @param \DateTime|null $cancellation_date cancellation_date
     *
     * @return self
     */
    public function setCancellationDate($cancellation_date)
    {
        $this->container['cancellation_date'] = $cancellation_date;

        return $this;
    }

    /**
     * Gets cancellation_source
     *
     * @return string|null
     */
    public function getCancellationSource()
    {
        return $this->container['cancellation_source'];
    }

    /**
     * Sets cancellation_source
     *
     * @param string|null $cancellation_source cancellation_source
     *
     * @return self
     */
    public function setCancellationSource($cancellation_source)
    {
        $allowedValues = $this->getCancellationSourceAllowableValues();
        if (!is_null($cancellation_source) && !in_array($cancellation_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cancellation_source', must be one of '%s'",
                    $cancellation_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cancellation_source'] = $cancellation_source;

        return $this;
    }

    /**
     * Gets cancelled_by_role
     *
     * @return string|null
     */
    public function getCancelledByRole()
    {
        return $this->container['cancelled_by_role'];
    }

    /**
     * Sets cancelled_by_role
     *
     * @param string|null $cancelled_by_role cancelled_by_role
     *
     * @return self
     */
    public function setCancelledByRole($cancelled_by_role)
    {
        $allowedValues = $this->getCancelledByRoleAllowableValues();
        if (!is_null($cancelled_by_role) && !in_array($cancelled_by_role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cancelled_by_role', must be one of '%s'",
                    $cancelled_by_role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cancelled_by_role'] = $cancelled_by_role;

        return $this;
    }

    /**
     * Gets cancelled_by_user_id
     *
     * @return int|null
     */
    public function getCancelledByUserId()
    {
        return $this->container['cancelled_by_user_id'];
    }

    /**
     * Sets cancelled_by_user_id
     *
     * @param int|null $cancelled_by_user_id cancelled_by_user_id
     *
     * @return self
     */
    public function setCancelledByUserId($cancelled_by_user_id)
    {
        $this->container['cancelled_by_user_id'] = $cancelled_by_user_id;

        return $this;
    }

    /**
     * Gets cancellation_reason
     *
     * @return string|null
     */
    public function getCancellationReason()
    {
        return $this->container['cancellation_reason'];
    }

    /**
     * Sets cancellation_reason
     *
     * @param string|null $cancellation_reason cancellation_reason
     *
     * @return self
     */
    public function setCancellationReason($cancellation_reason)
    {
        $allowedValues = $this->getCancellationReasonAllowableValues();
        if (!is_null($cancellation_reason) && !in_array($cancellation_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cancellation_reason', must be one of '%s'",
                    $cancellation_reason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cancellation_reason'] = $cancellation_reason;

        return $this;
    }

    /**
     * Gets rental_agreement_url
     *
     * @return string|null
     */
    public function getRentalAgreementUrl()
    {
        return $this->container['rental_agreement_url'];
    }

    /**
     * Sets rental_agreement_url
     *
     * @param string|null $rental_agreement_url Terms And Conditions Url (Taken from Contract Plan)
     *
     * @return self
     */
    public function setRentalAgreementUrl($rental_agreement_url)
    {
        $this->container['rental_agreement_url'] = $rental_agreement_url;

        return $this;
    }

    /**
     * Gets channel_collected
     *
     * @return bool|null
     */
    public function getChannelCollected()
    {
        return $this->container['channel_collected'];
    }

    /**
     * Sets channel_collected
     *
     * @param bool|null $channel_collected Tells if the channel will process the payments
     *
     * @return self
     */
    public function setChannelCollected($channel_collected)
    {
        $this->container['channel_collected'] = $channel_collected;

        return $this;
    }

    /**
     * Gets payment_collection_mode
     *
     * @return string|null
     */
    public function getPaymentCollectionMode()
    {
        return $this->container['payment_collection_mode'];
    }

    /**
     * Sets payment_collection_mode
     *
     * @param string|null $payment_collection_mode Defines how the booking will be paid
     *
     * @return self
     */
    public function setPaymentCollectionMode($payment_collection_mode)
    {
        $allowedValues = $this->getPaymentCollectionModeAllowableValues();
        if (!is_null($payment_collection_mode) && !in_array($payment_collection_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_collection_mode', must be one of '%s'",
                    $payment_collection_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_collection_mode'] = $payment_collection_mode;

        return $this;
    }

    /**
     * Gets past_due_scheduled_installment_amount
     *
     * @return double|null
     */
    public function getPastDueScheduledInstallmentAmount()
    {
        return $this->container['past_due_scheduled_installment_amount'];
    }

    /**
     * Sets past_due_scheduled_installment_amount
     *
     * @param double|null $past_due_scheduled_installment_amount Sum Pending Past Scheduled Installment Payments
     *
     * @return self
     */
    public function setPastDueScheduledInstallmentAmount($past_due_scheduled_installment_amount)
    {
        $this->container['past_due_scheduled_installment_amount'] = $past_due_scheduled_installment_amount;

        return $this;
    }

    /**
     * Gets past_due_initiated_payments
     *
     * @return double|null
     */
    public function getPastDueInitiatedPayments()
    {
        return $this->container['past_due_initiated_payments'];
    }

    /**
     * Sets past_due_initiated_payments
     *
     * @param double|null $past_due_initiated_payments Sum of Initiated Payments
     *
     * @return self
     */
    public function setPastDueInitiatedPayments($past_due_initiated_payments)
    {
        $this->container['past_due_initiated_payments'] = $past_due_initiated_payments;

        return $this;
    }

    /**
     * Gets past_due_scheduled_deposit_amount
     *
     * @return double|null
     */
    public function getPastDueScheduledDepositAmount()
    {
        return $this->container['past_due_scheduled_deposit_amount'];
    }

    /**
     * Sets past_due_scheduled_deposit_amount
     *
     * @param double|null $past_due_scheduled_deposit_amount Sum Pending Past Scheduled Deposit Payment
     *
     * @return self
     */
    public function setPastDueScheduledDepositAmount($past_due_scheduled_deposit_amount)
    {
        $this->container['past_due_scheduled_deposit_amount'] = $past_due_scheduled_deposit_amount;

        return $this;
    }

    /**
     * Gets past_due_scheduled_amount
     *
     * @return double|null
     */
    public function getPastDueScheduledAmount()
    {
        return $this->container['past_due_scheduled_amount'];
    }

    /**
     * Sets past_due_scheduled_amount
     *
     * @param double|null $past_due_scheduled_amount Sum All Pending Past Scheduled Payments
     *
     * @return self
     */
    public function setPastDueScheduledAmount($past_due_scheduled_amount)
    {
        $this->container['past_due_scheduled_amount'] = $past_due_scheduled_amount;

        return $this;
    }

    /**
     * Gets credit_card
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\CreditCardResponse|null
     */
    public function getCreditCard()
    {
        return $this->container['credit_card'];
    }

    /**
     * Sets credit_card
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\CreditCardResponse|null $credit_card credit_card
     *
     * @return self
     */
    public function setCreditCard($credit_card)
    {
        $this->container['credit_card'] = $credit_card;

        return $this;
    }

    /**
     * Gets booking_source_code
     *
     * @return string|null
     */
    public function getBookingSourceCode()
    {
        return $this->container['booking_source_code'];
    }

    /**
     * Sets booking_source_code
     *
     * @param string|null $booking_source_code Booking Source (code)
     *
     * @return self
     */
    public function setBookingSourceCode($booking_source_code)
    {
        $this->container['booking_source_code'] = $booking_source_code;

        return $this;
    }

    /**
     * Gets point_of_sale_code
     *
     * @return string|null
     */
    public function getPointOfSaleCode()
    {
        return $this->container['point_of_sale_code'];
    }

    /**
     * Sets point_of_sale_code
     *
     * @param string|null $point_of_sale_code Point of Sale (code)
     *
     * @return self
     */
    public function setPointOfSaleCode($point_of_sale_code)
    {
        $this->container['point_of_sale_code'] = $point_of_sale_code;

        return $this;
    }

    /**
     * Gets payment_gateway
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\PaymentGateway|null
     */
    public function getPaymentGateway()
    {
        return $this->container['payment_gateway'];
    }

    /**
     * Sets payment_gateway
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\PaymentGateway|null $payment_gateway payment_gateway
     *
     * @return self
     */
    public function setPaymentGateway($payment_gateway)
    {
        $this->container['payment_gateway'] = $payment_gateway;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


