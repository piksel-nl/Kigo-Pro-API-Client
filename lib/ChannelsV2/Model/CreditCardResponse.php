<?php
/**
 * CreditCardResponse
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\ChannelsV2\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * CreditCardResponse Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CreditCardResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreditCardResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cardholder_name' => 'string',
        'number' => 'string',
        'avs_address' => 'string',
        'avs_city' => 'string',
        'avs_state' => 'string',
        'avs_zip' => 'string',
        'avs_country' => 'string',
        'expiration_date' => 'string',
        'type' => 'string',
        'status' => 'string',
        'gateway_specific_fields' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cardholder_name' => null,
        'number' => null,
        'avs_address' => null,
        'avs_city' => null,
        'avs_state' => null,
        'avs_zip' => null,
        'avs_country' => null,
        'expiration_date' => null,
        'type' => null,
        'status' => null,
        'gateway_specific_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cardholder_name' => 'cardholderName',
        'number' => 'number',
        'avs_address' => 'avsAddress',
        'avs_city' => 'avsCity',
        'avs_state' => 'avsState',
        'avs_zip' => 'avsZip',
        'avs_country' => 'avsCountry',
        'expiration_date' => 'expirationDate',
        'type' => 'type',
        'status' => 'status',
        'gateway_specific_fields' => 'gatewaySpecificFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cardholder_name' => 'setCardholderName',
        'number' => 'setNumber',
        'avs_address' => 'setAvsAddress',
        'avs_city' => 'setAvsCity',
        'avs_state' => 'setAvsState',
        'avs_zip' => 'setAvsZip',
        'avs_country' => 'setAvsCountry',
        'expiration_date' => 'setExpirationDate',
        'type' => 'setType',
        'status' => 'setStatus',
        'gateway_specific_fields' => 'setGatewaySpecificFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cardholder_name' => 'getCardholderName',
        'number' => 'getNumber',
        'avs_address' => 'getAvsAddress',
        'avs_city' => 'getAvsCity',
        'avs_state' => 'getAvsState',
        'avs_zip' => 'getAvsZip',
        'avs_country' => 'getAvsCountry',
        'expiration_date' => 'getExpirationDate',
        'type' => 'getType',
        'status' => 'getStatus',
        'gateway_specific_fields' => 'getGatewaySpecificFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_NOT_SET = 'NotSet';
    const TYPE_VISA = 'Visa';
    const TYPE_MASTER_CARD = 'MasterCard';
    const TYPE_AMERICAN_EXPRESS = 'AmericanExpress';
    const TYPE_DISCOVER = 'Discover';
    const TYPE_OTHER = 'Other';
    const TYPE_DINERS_CLUB = 'DinersClub';
    const TYPE_OFFLINE = 'Offline';
    const STATUS_UNKNOWN = 'Unknown';
    const STATUS_VALID = 'Valid';
    const STATUS_MARK_AS_INVALID = 'MarkAsInvalid';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_NOT_SET,
            self::TYPE_VISA,
            self::TYPE_MASTER_CARD,
            self::TYPE_AMERICAN_EXPRESS,
            self::TYPE_DISCOVER,
            self::TYPE_OTHER,
            self::TYPE_DINERS_CLUB,
            self::TYPE_OFFLINE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNKNOWN,
            self::STATUS_VALID,
            self::STATUS_MARK_AS_INVALID,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cardholder_name'] = $data['cardholder_name'] ?? null;
        $this->container['number'] = $data['number'] ?? null;
        $this->container['avs_address'] = $data['avs_address'] ?? null;
        $this->container['avs_city'] = $data['avs_city'] ?? null;
        $this->container['avs_state'] = $data['avs_state'] ?? null;
        $this->container['avs_zip'] = $data['avs_zip'] ?? null;
        $this->container['avs_country'] = $data['avs_country'] ?? null;
        $this->container['expiration_date'] = $data['expiration_date'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['gateway_specific_fields'] = $data['gateway_specific_fields'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cardholder_name
     *
     * @return string|null
     */
    public function getCardholderName()
    {
        return $this->container['cardholder_name'];
    }

    /**
     * Sets cardholder_name
     *
     * @param string|null $cardholder_name cardholder_name
     *
     * @return self
     */
    public function setCardholderName($cardholder_name)
    {
        $this->container['cardholder_name'] = $cardholder_name;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets avs_address
     *
     * @return string|null
     */
    public function getAvsAddress()
    {
        return $this->container['avs_address'];
    }

    /**
     * Sets avs_address
     *
     * @param string|null $avs_address avs_address
     *
     * @return self
     */
    public function setAvsAddress($avs_address)
    {
        $this->container['avs_address'] = $avs_address;

        return $this;
    }

    /**
     * Gets avs_city
     *
     * @return string|null
     */
    public function getAvsCity()
    {
        return $this->container['avs_city'];
    }

    /**
     * Sets avs_city
     *
     * @param string|null $avs_city avs_city
     *
     * @return self
     */
    public function setAvsCity($avs_city)
    {
        $this->container['avs_city'] = $avs_city;

        return $this;
    }

    /**
     * Gets avs_state
     *
     * @return string|null
     */
    public function getAvsState()
    {
        return $this->container['avs_state'];
    }

    /**
     * Sets avs_state
     *
     * @param string|null $avs_state avs_state
     *
     * @return self
     */
    public function setAvsState($avs_state)
    {
        $this->container['avs_state'] = $avs_state;

        return $this;
    }

    /**
     * Gets avs_zip
     *
     * @return string|null
     */
    public function getAvsZip()
    {
        return $this->container['avs_zip'];
    }

    /**
     * Sets avs_zip
     *
     * @param string|null $avs_zip avs_zip
     *
     * @return self
     */
    public function setAvsZip($avs_zip)
    {
        $this->container['avs_zip'] = $avs_zip;

        return $this;
    }

    /**
     * Gets avs_country
     *
     * @return string|null
     */
    public function getAvsCountry()
    {
        return $this->container['avs_country'];
    }

    /**
     * Sets avs_country
     *
     * @param string|null $avs_country avs_country
     *
     * @return self
     */
    public function setAvsCountry($avs_country)
    {
        $this->container['avs_country'] = $avs_country;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string|null $expiration_date expiration_date
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets gateway_specific_fields
     *
     * @return array<string,string>|null
     */
    public function getGatewaySpecificFields()
    {
        return $this->container['gateway_specific_fields'];
    }

    /**
     * Sets gateway_specific_fields
     *
     * @param array<string,string>|null $gateway_specific_fields gateway_specific_fields
     *
     * @return self
     */
    public function setGatewaySpecificFields($gateway_specific_fields)
    {
        $this->container['gateway_specific_fields'] = $gateway_specific_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


