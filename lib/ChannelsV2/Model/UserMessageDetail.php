<?php
/**
 * UserMessageDetail
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\ChannelsV2\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * UserMessageDetail Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class UserMessageDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserMessageDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'thread_id' => 'int',
        'thread_external_key' => 'string',
        'text' => 'string',
        'message_external_key' => 'string',
        'in_reply_to_user_message_id' => 'int',
        'source' => 'string',
        'status' => 'string',
        'sent_date' => '\DateTime',
        'sender' => 'string',
        'sender_external_key' => 'string',
        'sender_first_name' => 'string',
        'sender_last_name' => 'string',
        'sender_email' => 'string',
        'sender_locale' => 'string',
        'sender_location' => 'string',
        'sender_user_id' => 'int',
        'attachments' => '\Piksel\Kigo\ChannelsV2\Model\UserMessageAttachment[]',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'thread_id' => 'int64',
        'thread_external_key' => null,
        'text' => null,
        'message_external_key' => null,
        'in_reply_to_user_message_id' => 'int32',
        'source' => null,
        'status' => null,
        'sent_date' => 'date-time',
        'sender' => null,
        'sender_external_key' => null,
        'sender_first_name' => null,
        'sender_last_name' => null,
        'sender_email' => null,
        'sender_locale' => null,
        'sender_location' => null,
        'sender_user_id' => 'int32',
        'attachments' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'thread_id' => 'threadID',
        'thread_external_key' => 'threadExternalKey',
        'text' => 'text',
        'message_external_key' => 'messageExternalKey',
        'in_reply_to_user_message_id' => 'inReplyToUserMessageID',
        'source' => 'source',
        'status' => 'status',
        'sent_date' => 'sentDate',
        'sender' => 'sender',
        'sender_external_key' => 'senderExternalKey',
        'sender_first_name' => 'senderFirstName',
        'sender_last_name' => 'senderLastName',
        'sender_email' => 'senderEmail',
        'sender_locale' => 'senderLocale',
        'sender_location' => 'senderLocation',
        'sender_user_id' => 'senderUserID',
        'attachments' => 'attachments',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'thread_id' => 'setThreadId',
        'thread_external_key' => 'setThreadExternalKey',
        'text' => 'setText',
        'message_external_key' => 'setMessageExternalKey',
        'in_reply_to_user_message_id' => 'setInReplyToUserMessageId',
        'source' => 'setSource',
        'status' => 'setStatus',
        'sent_date' => 'setSentDate',
        'sender' => 'setSender',
        'sender_external_key' => 'setSenderExternalKey',
        'sender_first_name' => 'setSenderFirstName',
        'sender_last_name' => 'setSenderLastName',
        'sender_email' => 'setSenderEmail',
        'sender_locale' => 'setSenderLocale',
        'sender_location' => 'setSenderLocation',
        'sender_user_id' => 'setSenderUserId',
        'attachments' => 'setAttachments',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'thread_id' => 'getThreadId',
        'thread_external_key' => 'getThreadExternalKey',
        'text' => 'getText',
        'message_external_key' => 'getMessageExternalKey',
        'in_reply_to_user_message_id' => 'getInReplyToUserMessageId',
        'source' => 'getSource',
        'status' => 'getStatus',
        'sent_date' => 'getSentDate',
        'sender' => 'getSender',
        'sender_external_key' => 'getSenderExternalKey',
        'sender_first_name' => 'getSenderFirstName',
        'sender_last_name' => 'getSenderLastName',
        'sender_email' => 'getSenderEmail',
        'sender_locale' => 'getSenderLocale',
        'sender_location' => 'getSenderLocation',
        'sender_user_id' => 'getSenderUserId',
        'attachments' => 'getAttachments',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SOURCE_KIGO = 'Kigo';
    const SOURCE_EXTERNAL = 'External';
    const STATUS_PENDING = 'Pending';
    const STATUS_DELIVERED = 'Delivered';
    const STATUS_FAILED = 'Failed';
    const STATUS_EXPIRED = 'Expired';
    const SENDER_GUEST = 'Guest';
    const SENDER_HOST = 'Host';
    const SENDER_CO_HOST = 'CoHost';
    const SENDER_CO_GUEST = 'CoGuest';
    const SENDER_AUTO_RESPONDER = 'AutoResponder';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_KIGO,
            self::SOURCE_EXTERNAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
            self::STATUS_DELIVERED,
            self::STATUS_FAILED,
            self::STATUS_EXPIRED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSenderAllowableValues()
    {
        return [
            self::SENDER_GUEST,
            self::SENDER_HOST,
            self::SENDER_CO_HOST,
            self::SENDER_CO_GUEST,
            self::SENDER_AUTO_RESPONDER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['thread_id'] = $data['thread_id'] ?? null;
        $this->container['thread_external_key'] = $data['thread_external_key'] ?? null;
        $this->container['text'] = $data['text'] ?? null;
        $this->container['message_external_key'] = $data['message_external_key'] ?? null;
        $this->container['in_reply_to_user_message_id'] = $data['in_reply_to_user_message_id'] ?? null;
        $this->container['source'] = $data['source'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['sent_date'] = $data['sent_date'] ?? null;
        $this->container['sender'] = $data['sender'] ?? null;
        $this->container['sender_external_key'] = $data['sender_external_key'] ?? null;
        $this->container['sender_first_name'] = $data['sender_first_name'] ?? null;
        $this->container['sender_last_name'] = $data['sender_last_name'] ?? null;
        $this->container['sender_email'] = $data['sender_email'] ?? null;
        $this->container['sender_locale'] = $data['sender_locale'] ?? null;
        $this->container['sender_location'] = $data['sender_location'] ?? null;
        $this->container['sender_user_id'] = $data['sender_user_id'] ?? null;
        $this->container['attachments'] = $data['attachments'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source', must be one of '%s'",
                $this->container['source'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSenderAllowableValues();
        if (!is_null($this->container['sender']) && !in_array($this->container['sender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sender', must be one of '%s'",
                $this->container['sender'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets thread_id
     *
     * @return int|null
     */
    public function getThreadId()
    {
        return $this->container['thread_id'];
    }

    /**
     * Sets thread_id
     *
     * @param int|null $thread_id thread_id
     *
     * @return self
     */
    public function setThreadId($thread_id)
    {
        $this->container['thread_id'] = $thread_id;

        return $this;
    }

    /**
     * Gets thread_external_key
     *
     * @return string|null
     */
    public function getThreadExternalKey()
    {
        return $this->container['thread_external_key'];
    }

    /**
     * Sets thread_external_key
     *
     * @param string|null $thread_external_key thread_external_key
     *
     * @return self
     */
    public function setThreadExternalKey($thread_external_key)
    {
        $this->container['thread_external_key'] = $thread_external_key;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text text
     *
     * @return self
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets message_external_key
     *
     * @return string|null
     */
    public function getMessageExternalKey()
    {
        return $this->container['message_external_key'];
    }

    /**
     * Sets message_external_key
     *
     * @param string|null $message_external_key message_external_key
     *
     * @return self
     */
    public function setMessageExternalKey($message_external_key)
    {
        $this->container['message_external_key'] = $message_external_key;

        return $this;
    }

    /**
     * Gets in_reply_to_user_message_id
     *
     * @return int|null
     */
    public function getInReplyToUserMessageId()
    {
        return $this->container['in_reply_to_user_message_id'];
    }

    /**
     * Sets in_reply_to_user_message_id
     *
     * @param int|null $in_reply_to_user_message_id in_reply_to_user_message_id
     *
     * @return self
     */
    public function setInReplyToUserMessageId($in_reply_to_user_message_id)
    {
        $this->container['in_reply_to_user_message_id'] = $in_reply_to_user_message_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($source) && !in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source', must be one of '%s'",
                    $source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sent_date
     *
     * @return \DateTime|null
     */
    public function getSentDate()
    {
        return $this->container['sent_date'];
    }

    /**
     * Sets sent_date
     *
     * @param \DateTime|null $sent_date sent_date
     *
     * @return self
     */
    public function setSentDate($sent_date)
    {
        $this->container['sent_date'] = $sent_date;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return string|null
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string|null $sender sender
     *
     * @return self
     */
    public function setSender($sender)
    {
        $allowedValues = $this->getSenderAllowableValues();
        if (!is_null($sender) && !in_array($sender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sender', must be one of '%s'",
                    $sender,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets sender_external_key
     *
     * @return string|null
     */
    public function getSenderExternalKey()
    {
        return $this->container['sender_external_key'];
    }

    /**
     * Sets sender_external_key
     *
     * @param string|null $sender_external_key sender_external_key
     *
     * @return self
     */
    public function setSenderExternalKey($sender_external_key)
    {
        $this->container['sender_external_key'] = $sender_external_key;

        return $this;
    }

    /**
     * Gets sender_first_name
     *
     * @return string|null
     */
    public function getSenderFirstName()
    {
        return $this->container['sender_first_name'];
    }

    /**
     * Sets sender_first_name
     *
     * @param string|null $sender_first_name sender_first_name
     *
     * @return self
     */
    public function setSenderFirstName($sender_first_name)
    {
        $this->container['sender_first_name'] = $sender_first_name;

        return $this;
    }

    /**
     * Gets sender_last_name
     *
     * @return string|null
     */
    public function getSenderLastName()
    {
        return $this->container['sender_last_name'];
    }

    /**
     * Sets sender_last_name
     *
     * @param string|null $sender_last_name sender_last_name
     *
     * @return self
     */
    public function setSenderLastName($sender_last_name)
    {
        $this->container['sender_last_name'] = $sender_last_name;

        return $this;
    }

    /**
     * Gets sender_email
     *
     * @return string|null
     */
    public function getSenderEmail()
    {
        return $this->container['sender_email'];
    }

    /**
     * Sets sender_email
     *
     * @param string|null $sender_email sender_email
     *
     * @return self
     */
    public function setSenderEmail($sender_email)
    {
        $this->container['sender_email'] = $sender_email;

        return $this;
    }

    /**
     * Gets sender_locale
     *
     * @return string|null
     */
    public function getSenderLocale()
    {
        return $this->container['sender_locale'];
    }

    /**
     * Sets sender_locale
     *
     * @param string|null $sender_locale sender_locale
     *
     * @return self
     */
    public function setSenderLocale($sender_locale)
    {
        $this->container['sender_locale'] = $sender_locale;

        return $this;
    }

    /**
     * Gets sender_location
     *
     * @return string|null
     */
    public function getSenderLocation()
    {
        return $this->container['sender_location'];
    }

    /**
     * Sets sender_location
     *
     * @param string|null $sender_location sender_location
     *
     * @return self
     */
    public function setSenderLocation($sender_location)
    {
        $this->container['sender_location'] = $sender_location;

        return $this;
    }

    /**
     * Gets sender_user_id
     *
     * @return int|null
     */
    public function getSenderUserId()
    {
        return $this->container['sender_user_id'];
    }

    /**
     * Sets sender_user_id
     *
     * @param int|null $sender_user_id sender_user_id
     *
     * @return self
     */
    public function setSenderUserId($sender_user_id)
    {
        $this->container['sender_user_id'] = $sender_user_id;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\UserMessageAttachment[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\UserMessageAttachment[]|null $attachments attachments
     *
     * @return self
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


