<?php
/**
 * GetListingsResult
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\ChannelsV2\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * GetListingsResult Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class GetListingsResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetListingsResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'time_zone_id' => 'string',
        'metadata' => 'mixed',
        'external_id' => 'string',
        'show_location' => 'bool',
        'associated_channel_connection_ids' => 'int[]',
        'associated_channel_connections' => '\Piksel\Kigo\ChannelsV2\Model\ChannelConnectionListing[]',
        'listing_origin' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'time_zone_id' => null,
        'metadata' => null,
        'external_id' => null,
        'show_location' => null,
        'associated_channel_connection_ids' => 'int32',
        'associated_channel_connections' => null,
        'listing_origin' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'time_zone_id' => 'timeZoneID',
        'metadata' => 'metadata',
        'external_id' => 'externalID',
        'show_location' => 'showLocation',
        'associated_channel_connection_ids' => 'associatedChannelConnectionIDs',
        'associated_channel_connections' => 'associatedChannelConnections',
        'listing_origin' => 'listingOrigin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'time_zone_id' => 'setTimeZoneId',
        'metadata' => 'setMetadata',
        'external_id' => 'setExternalId',
        'show_location' => 'setShowLocation',
        'associated_channel_connection_ids' => 'setAssociatedChannelConnectionIds',
        'associated_channel_connections' => 'setAssociatedChannelConnections',
        'listing_origin' => 'setListingOrigin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'time_zone_id' => 'getTimeZoneId',
        'metadata' => 'getMetadata',
        'external_id' => 'getExternalId',
        'show_location' => 'getShowLocation',
        'associated_channel_connection_ids' => 'getAssociatedChannelConnectionIds',
        'associated_channel_connections' => 'getAssociatedChannelConnections',
        'listing_origin' => 'getListingOrigin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LISTING_ORIGIN_OTHER = 'Other';
    const LISTING_ORIGIN_KIGO = 'Kigo';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getListingOriginAllowableValues()
    {
        return [
            self::LISTING_ORIGIN_OTHER,
            self::LISTING_ORIGIN_KIGO,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['time_zone_id'] = $data['time_zone_id'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['show_location'] = $data['show_location'] ?? null;
        $this->container['associated_channel_connection_ids'] = $data['associated_channel_connection_ids'] ?? null;
        $this->container['associated_channel_connections'] = $data['associated_channel_connections'] ?? null;
        $this->container['listing_origin'] = $data['listing_origin'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getListingOriginAllowableValues();
        if (!is_null($this->container['listing_origin']) && !in_array($this->container['listing_origin'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'listing_origin', must be one of '%s'",
                $this->container['listing_origin'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Listing ID
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets time_zone_id
     *
     * @return string|null
     */
    public function getTimeZoneId()
    {
        return $this->container['time_zone_id'];
    }

    /**
     * Sets time_zone_id
     *
     * @param string|null $time_zone_id Time Zone ID
     *
     * @return self
     */
    public function setTimeZoneId($time_zone_id)
    {
        $this->container['time_zone_id'] = $time_zone_id;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return mixed|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param mixed|null $metadata Metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id External ID
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets show_location
     *
     * @return bool|null
     */
    public function getShowLocation()
    {
        return $this->container['show_location'];
    }

    /**
     * Sets show_location
     *
     * @param bool|null $show_location Defines if the exact location of listings should be visible
     *
     * @return self
     */
    public function setShowLocation($show_location)
    {
        $this->container['show_location'] = $show_location;

        return $this;
    }

    /**
     * Gets associated_channel_connection_ids
     *
     * @return int[]|null
     */
    public function getAssociatedChannelConnectionIds()
    {
        return $this->container['associated_channel_connection_ids'];
    }

    /**
     * Sets associated_channel_connection_ids
     *
     * @param int[]|null $associated_channel_connection_ids Channel Connection IDs associated to the Listing
     *
     * @return self
     */
    public function setAssociatedChannelConnectionIds($associated_channel_connection_ids)
    {
        $this->container['associated_channel_connection_ids'] = $associated_channel_connection_ids;

        return $this;
    }

    /**
     * Gets associated_channel_connections
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\ChannelConnectionListing[]|null
     */
    public function getAssociatedChannelConnections()
    {
        return $this->container['associated_channel_connections'];
    }

    /**
     * Sets associated_channel_connections
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\ChannelConnectionListing[]|null $associated_channel_connections associated_channel_connections
     *
     * @return self
     */
    public function setAssociatedChannelConnections($associated_channel_connections)
    {
        $this->container['associated_channel_connections'] = $associated_channel_connections;

        return $this;
    }

    /**
     * Gets listing_origin
     *
     * @return string|null
     */
    public function getListingOrigin()
    {
        return $this->container['listing_origin'];
    }

    /**
     * Sets listing_origin
     *
     * @param string|null $listing_origin Tells from where the Listing will be created and managed
     *
     * @return self
     */
    public function setListingOrigin($listing_origin)
    {
        $allowedValues = $this->getListingOriginAllowableValues();
        if (!is_null($listing_origin) && !in_array($listing_origin, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'listing_origin', must be one of '%s'",
                    $listing_origin,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['listing_origin'] = $listing_origin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


