<?php
/**
 * ListingFeeRule
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\ChannelsV2\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * ListingFeeRule Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ListingFeeRule implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ListingFeeRule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'guid' => 'string',
        'name' => 'string',
        'public_name' => 'string',
        'type' => 'string',
        'application' => 'string',
        'qualification' => 'string',
        'calculation_mode' => 'string',
        'rate_value' => 'double',
        'is_mandatory' => 'bool',
        'guest_range_min' => 'int',
        'guest_range_max' => 'int',
        'los_min' => 'int',
        'los_max' => 'int',
        'payee_id' => 'int',
        'max_quantity' => 'int',
        'is_commissionable' => 'bool',
        'is_taxable' => 'bool',
        'type_application' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'guid' => 'uuid',
        'name' => null,
        'public_name' => null,
        'type' => null,
        'application' => null,
        'qualification' => null,
        'calculation_mode' => null,
        'rate_value' => 'double',
        'is_mandatory' => null,
        'guest_range_min' => 'int32',
        'guest_range_max' => 'int32',
        'los_min' => 'int32',
        'los_max' => 'int32',
        'payee_id' => 'int32',
        'max_quantity' => 'int32',
        'is_commissionable' => null,
        'is_taxable' => null,
        'type_application' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'guid' => 'guid',
        'name' => 'name',
        'public_name' => 'publicName',
        'type' => 'type',
        'application' => 'application',
        'qualification' => 'qualification',
        'calculation_mode' => 'calculationMode',
        'rate_value' => 'rateValue',
        'is_mandatory' => 'isMandatory',
        'guest_range_min' => 'guestRangeMin',
        'guest_range_max' => 'guestRangeMax',
        'los_min' => 'losMin',
        'los_max' => 'losMax',
        'payee_id' => 'payeeID',
        'max_quantity' => 'maxQuantity',
        'is_commissionable' => 'isCommissionable',
        'is_taxable' => 'isTaxable',
        'type_application' => 'typeApplication'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'guid' => 'setGuid',
        'name' => 'setName',
        'public_name' => 'setPublicName',
        'type' => 'setType',
        'application' => 'setApplication',
        'qualification' => 'setQualification',
        'calculation_mode' => 'setCalculationMode',
        'rate_value' => 'setRateValue',
        'is_mandatory' => 'setIsMandatory',
        'guest_range_min' => 'setGuestRangeMin',
        'guest_range_max' => 'setGuestRangeMax',
        'los_min' => 'setLosMin',
        'los_max' => 'setLosMax',
        'payee_id' => 'setPayeeId',
        'max_quantity' => 'setMaxQuantity',
        'is_commissionable' => 'setIsCommissionable',
        'is_taxable' => 'setIsTaxable',
        'type_application' => 'setTypeApplication'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'guid' => 'getGuid',
        'name' => 'getName',
        'public_name' => 'getPublicName',
        'type' => 'getType',
        'application' => 'getApplication',
        'qualification' => 'getQualification',
        'calculation_mode' => 'getCalculationMode',
        'rate_value' => 'getRateValue',
        'is_mandatory' => 'getIsMandatory',
        'guest_range_min' => 'getGuestRangeMin',
        'guest_range_max' => 'getGuestRangeMax',
        'los_min' => 'getLosMin',
        'los_max' => 'getLosMax',
        'payee_id' => 'getPayeeId',
        'max_quantity' => 'getMaxQuantity',
        'is_commissionable' => 'getIsCommissionable',
        'is_taxable' => 'getIsTaxable',
        'type_application' => 'getTypeApplication'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_CLEANING_FEE = 'CleaningFee';
    const TYPE_SALES_TAX = 'SalesTax';
    const TYPE_DAMAGE_WAIVER = 'DamageWaiver';
    const TYPE_REFUNDABLE_DAMAGE_DEPOSIT = 'RefundableDamageDeposit';
    const TYPE_TRAVEL_INSURANCE = 'TravelInsurance';
    const TYPE_EXTRA_PERSON_FEE = 'ExtraPersonFee';
    const TYPE_PROCESSING_FEE = 'ProcessingFee';
    const TYPE_SERVICE_FEE = 'ServiceFee';
    const TYPE_UPSELL_FEE = 'UpsellFee';
    const TYPE_LINEN_FEE = 'LinenFee';
    const TYPE_RESORT_FEE = 'ResortFee';
    const TYPE_CITY_TAX = 'CityTax';
    const TYPE_DESTINATION_FEE = 'DestinationFee';
    const TYPE_GOVERNMENT_TAX = 'GovernmentTax';
    const TYPE_LOCAL_COUNCIL_TAX = 'LocalCouncilTax';
    const APPLICATION_PER_NIGHT = 'PerNight';
    const APPLICATION_PER_STAY = 'PerStay';
    const APPLICATION_PER_PERSON_PER_NIGHT = 'PerPersonPerNight';
    const APPLICATION_PER_PERSON_PER_STAY = 'PerPersonPerStay';
    const QUALIFICATION_CHECK_IN = 'CheckIn';
    const QUALIFICATION_CHECK_OUT = 'CheckOut';
    const QUALIFICATION_INCLUSIVE = 'Inclusive';
    const QUALIFICATION_PER_NIGHT = 'PerNight';
    const QUALIFICATION_BOOKED_ON = 'BookedOn';
    const QUALIFICATION_ALWAYS = 'Always';
    const CALCULATION_MODE_FLAT_FEE = 'FlatFee';
    const CALCULATION_MODE_PERCENTAGE = 'Percentage';
    const TYPE_APPLICATION_RENT = 'Rent';
    const TYPE_APPLICATION_RENT_PLUS_FEES = 'RentPlusFees';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CLEANING_FEE,
            self::TYPE_SALES_TAX,
            self::TYPE_DAMAGE_WAIVER,
            self::TYPE_REFUNDABLE_DAMAGE_DEPOSIT,
            self::TYPE_TRAVEL_INSURANCE,
            self::TYPE_EXTRA_PERSON_FEE,
            self::TYPE_PROCESSING_FEE,
            self::TYPE_SERVICE_FEE,
            self::TYPE_UPSELL_FEE,
            self::TYPE_LINEN_FEE,
            self::TYPE_RESORT_FEE,
            self::TYPE_CITY_TAX,
            self::TYPE_DESTINATION_FEE,
            self::TYPE_GOVERNMENT_TAX,
            self::TYPE_LOCAL_COUNCIL_TAX,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApplicationAllowableValues()
    {
        return [
            self::APPLICATION_PER_NIGHT,
            self::APPLICATION_PER_STAY,
            self::APPLICATION_PER_PERSON_PER_NIGHT,
            self::APPLICATION_PER_PERSON_PER_STAY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQualificationAllowableValues()
    {
        return [
            self::QUALIFICATION_CHECK_IN,
            self::QUALIFICATION_CHECK_OUT,
            self::QUALIFICATION_INCLUSIVE,
            self::QUALIFICATION_PER_NIGHT,
            self::QUALIFICATION_BOOKED_ON,
            self::QUALIFICATION_ALWAYS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCalculationModeAllowableValues()
    {
        return [
            self::CALCULATION_MODE_FLAT_FEE,
            self::CALCULATION_MODE_PERCENTAGE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeApplicationAllowableValues()
    {
        return [
            self::TYPE_APPLICATION_RENT,
            self::TYPE_APPLICATION_RENT_PLUS_FEES,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['guid'] = $data['guid'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['public_name'] = $data['public_name'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['application'] = $data['application'] ?? null;
        $this->container['qualification'] = $data['qualification'] ?? null;
        $this->container['calculation_mode'] = $data['calculation_mode'] ?? null;
        $this->container['rate_value'] = $data['rate_value'] ?? null;
        $this->container['is_mandatory'] = $data['is_mandatory'] ?? null;
        $this->container['guest_range_min'] = $data['guest_range_min'] ?? null;
        $this->container['guest_range_max'] = $data['guest_range_max'] ?? null;
        $this->container['los_min'] = $data['los_min'] ?? null;
        $this->container['los_max'] = $data['los_max'] ?? null;
        $this->container['payee_id'] = $data['payee_id'] ?? null;
        $this->container['max_quantity'] = $data['max_quantity'] ?? null;
        $this->container['is_commissionable'] = $data['is_commissionable'] ?? null;
        $this->container['is_taxable'] = $data['is_taxable'] ?? null;
        $this->container['type_application'] = $data['type_application'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getApplicationAllowableValues();
        if (!is_null($this->container['application']) && !in_array($this->container['application'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'application', must be one of '%s'",
                $this->container['application'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getQualificationAllowableValues();
        if (!is_null($this->container['qualification']) && !in_array($this->container['qualification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'qualification', must be one of '%s'",
                $this->container['qualification'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCalculationModeAllowableValues();
        if (!is_null($this->container['calculation_mode']) && !in_array($this->container['calculation_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'calculation_mode', must be one of '%s'",
                $this->container['calculation_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeApplicationAllowableValues();
        if (!is_null($this->container['type_application']) && !in_array($this->container['type_application'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type_application', must be one of '%s'",
                $this->container['type_application'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets guid
     *
     * @return string|null
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string|null $guid Rule ID
     *
     * @return self
     */
    public function setGuid($guid)
    {
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets public_name
     *
     * @return string|null
     */
    public function getPublicName()
    {
        return $this->container['public_name'];
    }

    /**
     * Sets public_name
     *
     * @param string|null $public_name Name
     *
     * @return self
     */
    public function setPublicName($public_name)
    {
        $this->container['public_name'] = $public_name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Listing Fee Rule Type
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets application
     *
     * @return string|null
     */
    public function getApplication()
    {
        return $this->container['application'];
    }

    /**
     * Sets application
     *
     * @param string|null $application Application
     *
     * @return self
     */
    public function setApplication($application)
    {
        $allowedValues = $this->getApplicationAllowableValues();
        if (!is_null($application) && !in_array($application, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'application', must be one of '%s'",
                    $application,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['application'] = $application;

        return $this;
    }

    /**
     * Gets qualification
     *
     * @return string|null
     */
    public function getQualification()
    {
        return $this->container['qualification'];
    }

    /**
     * Sets qualification
     *
     * @param string|null $qualification Qualification
     *
     * @return self
     */
    public function setQualification($qualification)
    {
        $allowedValues = $this->getQualificationAllowableValues();
        if (!is_null($qualification) && !in_array($qualification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'qualification', must be one of '%s'",
                    $qualification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['qualification'] = $qualification;

        return $this;
    }

    /**
     * Gets calculation_mode
     *
     * @return string|null
     */
    public function getCalculationMode()
    {
        return $this->container['calculation_mode'];
    }

    /**
     * Sets calculation_mode
     *
     * @param string|null $calculation_mode Calculation mode
     *
     * @return self
     */
    public function setCalculationMode($calculation_mode)
    {
        $allowedValues = $this->getCalculationModeAllowableValues();
        if (!is_null($calculation_mode) && !in_array($calculation_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'calculation_mode', must be one of '%s'",
                    $calculation_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['calculation_mode'] = $calculation_mode;

        return $this;
    }

    /**
     * Gets rate_value
     *
     * @return double|null
     */
    public function getRateValue()
    {
        return $this->container['rate_value'];
    }

    /**
     * Sets rate_value
     *
     * @param double|null $rate_value Rate Value
     *
     * @return self
     */
    public function setRateValue($rate_value)
    {
        $this->container['rate_value'] = $rate_value;

        return $this;
    }

    /**
     * Gets is_mandatory
     *
     * @return bool|null
     */
    public function getIsMandatory()
    {
        return $this->container['is_mandatory'];
    }

    /**
     * Sets is_mandatory
     *
     * @param bool|null $is_mandatory Is Mandatory
     *
     * @return self
     */
    public function setIsMandatory($is_mandatory)
    {
        $this->container['is_mandatory'] = $is_mandatory;

        return $this;
    }

    /**
     * Gets guest_range_min
     *
     * @return int|null
     */
    public function getGuestRangeMin()
    {
        return $this->container['guest_range_min'];
    }

    /**
     * Sets guest_range_min
     *
     * @param int|null $guest_range_min Guest Range min (INCLUSIVE)  In ExtraPerson Fee, starting from this number a person is considered Extra
     *
     * @return self
     */
    public function setGuestRangeMin($guest_range_min)
    {
        $this->container['guest_range_min'] = $guest_range_min;

        return $this;
    }

    /**
     * Gets guest_range_max
     *
     * @return int|null
     */
    public function getGuestRangeMax()
    {
        return $this->container['guest_range_max'];
    }

    /**
     * Sets guest_range_max
     *
     * @param int|null $guest_range_max Guest Range max (INCLUSIVE)
     *
     * @return self
     */
    public function setGuestRangeMax($guest_range_max)
    {
        $this->container['guest_range_max'] = $guest_range_max;

        return $this;
    }

    /**
     * Gets los_min
     *
     * @return int|null
     */
    public function getLosMin()
    {
        return $this->container['los_min'];
    }

    /**
     * Sets los_min
     *
     * @param int|null $los_min It is used to define a range of nights in which the fee applies (e.g.: Night Tax will be applied if your LOS is at  least 2 nights)
     *
     * @return self
     */
    public function setLosMin($los_min)
    {
        $this->container['los_min'] = $los_min;

        return $this;
    }

    /**
     * Gets los_max
     *
     * @return int|null
     */
    public function getLosMax()
    {
        return $this->container['los_max'];
    }

    /**
     * Sets los_max
     *
     * @param int|null $los_max It is used to define a range of nights in which the fee applies (e.g.: Night Tax won't be applied if your LOS is  more than 7 nights)
     *
     * @return self
     */
    public function setLosMax($los_max)
    {
        $this->container['los_max'] = $los_max;

        return $this;
    }

    /**
     * Gets payee_id
     *
     * @return int|null
     */
    public function getPayeeId()
    {
        return $this->container['payee_id'];
    }

    /**
     * Sets payee_id
     *
     * @param int|null $payee_id Vendor or Recipient ID
     *
     * @return self
     */
    public function setPayeeId($payee_id)
    {
        $this->container['payee_id'] = $payee_id;

        return $this;
    }

    /**
     * Gets max_quantity
     *
     * @return int|null
     */
    public function getMaxQuantity()
    {
        return $this->container['max_quantity'];
    }

    /**
     * Sets max_quantity
     *
     * @param int|null $max_quantity Max Quantity
     *
     * @return self
     */
    public function setMaxQuantity($max_quantity)
    {
        $this->container['max_quantity'] = $max_quantity;

        return $this;
    }

    /**
     * Gets is_commissionable
     *
     * @return bool|null
     */
    public function getIsCommissionable()
    {
        return $this->container['is_commissionable'];
    }

    /**
     * Sets is_commissionable
     *
     * @param bool|null $is_commissionable Is Commissionable
     *
     * @return self
     */
    public function setIsCommissionable($is_commissionable)
    {
        $this->container['is_commissionable'] = $is_commissionable;

        return $this;
    }

    /**
     * Gets is_taxable
     *
     * @return bool|null
     */
    public function getIsTaxable()
    {
        return $this->container['is_taxable'];
    }

    /**
     * Sets is_taxable
     *
     * @param bool|null $is_taxable Is Taxable
     *
     * @return self
     */
    public function setIsTaxable($is_taxable)
    {
        $this->container['is_taxable'] = $is_taxable;

        return $this;
    }

    /**
     * Gets type_application
     *
     * @return string|null
     */
    public function getTypeApplication()
    {
        return $this->container['type_application'];
    }

    /**
     * Sets type_application
     *
     * @param string|null $type_application Type application:      Rent      Rent + Fees
     *
     * @return self
     */
    public function setTypeApplication($type_application)
    {
        $allowedValues = $this->getTypeApplicationAllowableValues();
        if (!is_null($type_application) && !in_array($type_application, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type_application', must be one of '%s'",
                    $type_application,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type_application'] = $type_application;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


