<?php
/**
 * ChannelConnection
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\ChannelsV2\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * ChannelConnection Class Doc Comment
 *
 * @category Class
 * @description Channel Connection
 * @package  Piksel\Kigo
 * @author   Piksel
 * @link     https://piksel.nl
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ChannelConnection implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChannelConnection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'channel_id' => 'int',
        'account_id' => 'int',
        'name' => 'string',
        'listing_collection_id' => 'int',
        'is_enabled' => 'bool',
        'aggregated_channel_connections' => '\Piksel\Kigo\ChannelsV2\Model\AggregatedChannelConnection[]',
        'marketing_fee' => 'double',
        'modified_date' => '\DateTime',
        'account' => '\Piksel\Kigo\ChannelsV2\Model\Account',
        'external_id' => 'string',
        'metadata' => 'object',
        'requires_credit_card' => 'bool',
        'listing_collection_type' => 'string',
        'website_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'channel_id' => 'int32',
        'account_id' => 'int32',
        'name' => null,
        'listing_collection_id' => 'int32',
        'is_enabled' => null,
        'aggregated_channel_connections' => null,
        'marketing_fee' => 'double',
        'modified_date' => 'date-time',
        'account' => null,
        'external_id' => null,
        'metadata' => null,
        'requires_credit_card' => null,
        'listing_collection_type' => null,
        'website_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'channel_id' => 'channelID',
        'account_id' => 'accountID',
        'name' => 'name',
        'listing_collection_id' => 'listingCollectionID',
        'is_enabled' => 'isEnabled',
        'aggregated_channel_connections' => 'aggregatedChannelConnections',
        'marketing_fee' => 'marketingFee',
        'modified_date' => 'modifiedDate',
        'account' => 'account',
        'external_id' => 'externalID',
        'metadata' => 'metadata',
        'requires_credit_card' => 'requiresCreditCard',
        'listing_collection_type' => 'listingCollectionType',
        'website_url' => 'websiteUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'channel_id' => 'setChannelId',
        'account_id' => 'setAccountId',
        'name' => 'setName',
        'listing_collection_id' => 'setListingCollectionId',
        'is_enabled' => 'setIsEnabled',
        'aggregated_channel_connections' => 'setAggregatedChannelConnections',
        'marketing_fee' => 'setMarketingFee',
        'modified_date' => 'setModifiedDate',
        'account' => 'setAccount',
        'external_id' => 'setExternalId',
        'metadata' => 'setMetadata',
        'requires_credit_card' => 'setRequiresCreditCard',
        'listing_collection_type' => 'setListingCollectionType',
        'website_url' => 'setWebsiteUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'channel_id' => 'getChannelId',
        'account_id' => 'getAccountId',
        'name' => 'getName',
        'listing_collection_id' => 'getListingCollectionId',
        'is_enabled' => 'getIsEnabled',
        'aggregated_channel_connections' => 'getAggregatedChannelConnections',
        'marketing_fee' => 'getMarketingFee',
        'modified_date' => 'getModifiedDate',
        'account' => 'getAccount',
        'external_id' => 'getExternalId',
        'metadata' => 'getMetadata',
        'requires_credit_card' => 'getRequiresCreditCard',
        'listing_collection_type' => 'getListingCollectionType',
        'website_url' => 'getWebsiteUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LISTING_COLLECTION_TYPE_BDC = 'BDC';
    const LISTING_COLLECTION_TYPE_HOME_AWAY = 'HomeAway';
    const LISTING_COLLECTION_TYPE_AIR_BNB = 'AirBnb';
    const LISTING_COLLECTION_TYPE_VACATION_RENTAL = 'VacationRental';
    const LISTING_COLLECTION_TYPE_EXPEDIA = 'Expedia';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getListingCollectionTypeAllowableValues()
    {
        return [
            self::LISTING_COLLECTION_TYPE_BDC,
            self::LISTING_COLLECTION_TYPE_HOME_AWAY,
            self::LISTING_COLLECTION_TYPE_AIR_BNB,
            self::LISTING_COLLECTION_TYPE_VACATION_RENTAL,
            self::LISTING_COLLECTION_TYPE_EXPEDIA,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['channel_id'] = $data['channel_id'] ?? null;
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['listing_collection_id'] = $data['listing_collection_id'] ?? null;
        $this->container['is_enabled'] = $data['is_enabled'] ?? null;
        $this->container['aggregated_channel_connections'] = $data['aggregated_channel_connections'] ?? null;
        $this->container['marketing_fee'] = $data['marketing_fee'] ?? null;
        $this->container['modified_date'] = $data['modified_date'] ?? null;
        $this->container['account'] = $data['account'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['requires_credit_card'] = $data['requires_credit_card'] ?? null;
        $this->container['listing_collection_type'] = $data['listing_collection_type'] ?? null;
        $this->container['website_url'] = $data['website_url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['channel_id'] === null) {
            $invalidProperties[] = "'channel_id' can't be null";
        }
        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getListingCollectionTypeAllowableValues();
        if (!is_null($this->container['listing_collection_type']) && !in_array($this->container['listing_collection_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'listing_collection_type', must be one of '%s'",
                $this->container['listing_collection_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Channel Connection ID
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return int
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param int $channel_id Channel Id
     *
     * @return self
     */
    public function setChannelId($channel_id)
    {
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id Account Id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Group Name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets listing_collection_id
     *
     * @return int|null
     */
    public function getListingCollectionId()
    {
        return $this->container['listing_collection_id'];
    }

    /**
     * Sets listing_collection_id
     *
     * @param int|null $listing_collection_id Listing Collection ID
     *
     * @return self
     */
    public function setListingCollectionId($listing_collection_id)
    {
        $this->container['listing_collection_id'] = $listing_collection_id;

        return $this;
    }

    /**
     * Gets is_enabled
     *
     * @return bool|null
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool|null $is_enabled True if the Channel Connection is enabled
     *
     * @return self
     */
    public function setIsEnabled($is_enabled)
    {
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets aggregated_channel_connections
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\AggregatedChannelConnection[]|null
     */
    public function getAggregatedChannelConnections()
    {
        return $this->container['aggregated_channel_connections'];
    }

    /**
     * Sets aggregated_channel_connections
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\AggregatedChannelConnection[]|null $aggregated_channel_connections Aggregated Channel Connections
     *
     * @return self
     */
    public function setAggregatedChannelConnections($aggregated_channel_connections)
    {
        $this->container['aggregated_channel_connections'] = $aggregated_channel_connections;

        return $this;
    }

    /**
     * Gets marketing_fee
     *
     * @return double|null
     */
    public function getMarketingFee()
    {
        return $this->container['marketing_fee'];
    }

    /**
     * Sets marketing_fee
     *
     * @param double|null $marketing_fee Marketing Fee
     *
     * @return self
     */
    public function setMarketingFee($marketing_fee)
    {
        $this->container['marketing_fee'] = $marketing_fee;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime|null
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime|null $modified_date DateTime of the last change to this Channel Connection
     *
     * @return self
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \Piksel\Kigo\ChannelsV2\Model\Account|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \Piksel\Kigo\ChannelsV2\Model\Account|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id The Unique identifier of the channel connection from the PMS (e.g. SyncLinkID in KVRS)
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Channel connection metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets requires_credit_card
     *
     * @return bool|null
     */
    public function getRequiresCreditCard()
    {
        return $this->container['requires_credit_card'];
    }

    /**
     * Sets requires_credit_card
     *
     * @param bool|null $requires_credit_card If true, a Credit Card is required for a Booking
     *
     * @return self
     */
    public function setRequiresCreditCard($requires_credit_card)
    {
        $this->container['requires_credit_card'] = $requires_credit_card;

        return $this;
    }

    /**
     * Gets listing_collection_type
     *
     * @return string|null
     */
    public function getListingCollectionType()
    {
        return $this->container['listing_collection_type'];
    }

    /**
     * Sets listing_collection_type
     *
     * @param string|null $listing_collection_type listing_collection_type
     *
     * @return self
     */
    public function setListingCollectionType($listing_collection_type)
    {
        $allowedValues = $this->getListingCollectionTypeAllowableValues();
        if (!is_null($listing_collection_type) && !in_array($listing_collection_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'listing_collection_type', must be one of '%s'",
                    $listing_collection_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['listing_collection_type'] = $listing_collection_type;

        return $this;
    }

    /**
     * Gets website_url
     *
     * @return string|null
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     *
     * @param string|null $website_url website_url
     *
     * @return self
     */
    public function setWebsiteUrl($website_url)
    {
        $this->container['website_url'] = $website_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


