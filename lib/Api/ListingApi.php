<?php
/**
 * ListingApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\KigoPro\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Piksel\KigoPro\ApiException;
use Piksel\KigoPro\Configuration;
use Piksel\KigoPro\HeaderSelector;
use Piksel\KigoPro\ObjectSerializer;

/**
 * ListingApi Class Doc Comment
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 */
class ListingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation channelsV2ListingsDiffGet
     *
     * Get all the Listings where Price, Availability or Content has changed, after a given time
     *
     * @param  \DateTime $modified_after Last date after which changes took place (required)
     * @param  string[] $options Specify if info on Price, Availability or Content changes are desired. If none specified, it will  return all of them (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\GetDiffResult
     */
    public function channelsV2ListingsDiffGet($modified_after, $options = null)
    {
        list($response) = $this->channelsV2ListingsDiffGetWithHttpInfo($modified_after, $options);
        return $response;
    }

    /**
     * Operation channelsV2ListingsDiffGetWithHttpInfo
     *
     * Get all the Listings where Price, Availability or Content has changed, after a given time
     *
     * @param  \DateTime $modified_after Last date after which changes took place (required)
     * @param  string[] $options Specify if info on Price, Availability or Content changes are desired. If none specified, it will  return all of them (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\GetDiffResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelsV2ListingsDiffGetWithHttpInfo($modified_after, $options = null)
    {
        $request = $this->channelsV2ListingsDiffGetRequest($modified_after, $options);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Piksel\KigoPro\Model\GetDiffResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\GetDiffResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\KigoPro\Model\GetDiffResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\GetDiffResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelsV2ListingsDiffGetAsync
     *
     * Get all the Listings where Price, Availability or Content has changed, after a given time
     *
     * @param  \DateTime $modified_after Last date after which changes took place (required)
     * @param  string[] $options Specify if info on Price, Availability or Content changes are desired. If none specified, it will  return all of them (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2ListingsDiffGetAsync($modified_after, $options = null)
    {
        return $this->channelsV2ListingsDiffGetAsyncWithHttpInfo($modified_after, $options)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelsV2ListingsDiffGetAsyncWithHttpInfo
     *
     * Get all the Listings where Price, Availability or Content has changed, after a given time
     *
     * @param  \DateTime $modified_after Last date after which changes took place (required)
     * @param  string[] $options Specify if info on Price, Availability or Content changes are desired. If none specified, it will  return all of them (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2ListingsDiffGetAsyncWithHttpInfo($modified_after, $options = null)
    {
        $returnType = '\Piksel\KigoPro\Model\GetDiffResult';
        $request = $this->channelsV2ListingsDiffGetRequest($modified_after, $options);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelsV2ListingsDiffGet'
     *
     * @param  \DateTime $modified_after Last date after which changes took place (required)
     * @param  string[] $options Specify if info on Price, Availability or Content changes are desired. If none specified, it will  return all of them (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelsV2ListingsDiffGetRequest($modified_after, $options = null)
    {
        // verify the required parameter 'modified_after' is set
        if ($modified_after === null || (is_array($modified_after) && count($modified_after) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_after when calling channelsV2ListingsDiffGet'
            );
        }

        $resourcePath = '/channels/v2/listings/diff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($modified_after !== null) {
            if('form' === 'form' && is_array($modified_after)) {
                foreach($modified_after as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['modifiedAfter'] = $modified_after;
            }
        }
        // query params
        if ($options !== null) {
            if('form' === 'form' && is_array($options)) {
                foreach($options as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['options'] = $options;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelsV2ListingsGet
     *
     * Get all listings associated to a requested channel
     *
     * @param  int $cc_id Optional Channel Connection ID (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\GetListingsResultListResourceList
     */
    public function channelsV2ListingsGet($cc_id = null)
    {
        list($response) = $this->channelsV2ListingsGetWithHttpInfo($cc_id);
        return $response;
    }

    /**
     * Operation channelsV2ListingsGetWithHttpInfo
     *
     * Get all listings associated to a requested channel
     *
     * @param  int $cc_id Optional Channel Connection ID (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\GetListingsResultListResourceList, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelsV2ListingsGetWithHttpInfo($cc_id = null)
    {
        $request = $this->channelsV2ListingsGetRequest($cc_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Piksel\KigoPro\Model\GetListingsResultListResourceList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\GetListingsResultListResourceList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\KigoPro\Model\GetListingsResultListResourceList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\GetListingsResultListResourceList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelsV2ListingsGetAsync
     *
     * Get all listings associated to a requested channel
     *
     * @param  int $cc_id Optional Channel Connection ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2ListingsGetAsync($cc_id = null)
    {
        return $this->channelsV2ListingsGetAsyncWithHttpInfo($cc_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelsV2ListingsGetAsyncWithHttpInfo
     *
     * Get all listings associated to a requested channel
     *
     * @param  int $cc_id Optional Channel Connection ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2ListingsGetAsyncWithHttpInfo($cc_id = null)
    {
        $returnType = '\Piksel\KigoPro\Model\GetListingsResultListResourceList';
        $request = $this->channelsV2ListingsGetRequest($cc_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelsV2ListingsGet'
     *
     * @param  int $cc_id Optional Channel Connection ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelsV2ListingsGetRequest($cc_id = null)
    {

        $resourcePath = '/channels/v2/listings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cc_id !== null) {
            if('form' === 'form' && is_array($cc_id)) {
                foreach($cc_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ccId'] = $cc_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelsV2ListingsIdAvailabilityGet
     *
     * Get Availability Feed
     *
     * @param  int $id Listing ID (required)
     * @param  \DateTime $start_date Start Date (required)
     * @param  \DateTime $end_date End Date (required)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\AvailabilityResource
     */
    public function channelsV2ListingsIdAvailabilityGet($id, $start_date, $end_date)
    {
        list($response) = $this->channelsV2ListingsIdAvailabilityGetWithHttpInfo($id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation channelsV2ListingsIdAvailabilityGetWithHttpInfo
     *
     * Get Availability Feed
     *
     * @param  int $id Listing ID (required)
     * @param  \DateTime $start_date Start Date (required)
     * @param  \DateTime $end_date End Date (required)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\AvailabilityResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelsV2ListingsIdAvailabilityGetWithHttpInfo($id, $start_date, $end_date)
    {
        $request = $this->channelsV2ListingsIdAvailabilityGetRequest($id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Piksel\KigoPro\Model\AvailabilityResource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\AvailabilityResource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\KigoPro\Model\AvailabilityResource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\AvailabilityResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelsV2ListingsIdAvailabilityGetAsync
     *
     * Get Availability Feed
     *
     * @param  int $id Listing ID (required)
     * @param  \DateTime $start_date Start Date (required)
     * @param  \DateTime $end_date End Date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2ListingsIdAvailabilityGetAsync($id, $start_date, $end_date)
    {
        return $this->channelsV2ListingsIdAvailabilityGetAsyncWithHttpInfo($id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelsV2ListingsIdAvailabilityGetAsyncWithHttpInfo
     *
     * Get Availability Feed
     *
     * @param  int $id Listing ID (required)
     * @param  \DateTime $start_date Start Date (required)
     * @param  \DateTime $end_date End Date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2ListingsIdAvailabilityGetAsyncWithHttpInfo($id, $start_date, $end_date)
    {
        $returnType = '\Piksel\KigoPro\Model\AvailabilityResource';
        $request = $this->channelsV2ListingsIdAvailabilityGetRequest($id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelsV2ListingsIdAvailabilityGet'
     *
     * @param  int $id Listing ID (required)
     * @param  \DateTime $start_date Start Date (required)
     * @param  \DateTime $end_date End Date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelsV2ListingsIdAvailabilityGetRequest($id, $start_date, $end_date)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling channelsV2ListingsIdAvailabilityGet'
            );
        }
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling channelsV2ListingsIdAvailabilityGet'
            );
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null || (is_array($end_date) && count($end_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_date when calling channelsV2ListingsIdAvailabilityGet'
            );
        }

        $resourcePath = '/channels/v2/listings/{id}/availability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            if('form' === 'form' && is_array($start_date)) {
                foreach($start_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startDate'] = $start_date;
            }
        }
        // query params
        if ($end_date !== null) {
            if('form' === 'form' && is_array($end_date)) {
                foreach($end_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['endDate'] = $end_date;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelsV2ListingsIdCheckavailabilityGet
     *
     * Check if a Listing is available
     *
     * @param  int $id id (required)
     * @param  \DateTime $check_in_date Check-In Date (required)
     * @param  \DateTime $check_out_date Check-Out Date (required)
     * @param  int $num_adults Number of Adults (required)
     * @param  int $num_children Number of Children (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\CheckAvailabilityOutputResource
     */
    public function channelsV2ListingsIdCheckavailabilityGet($id, $check_in_date, $check_out_date, $num_adults, $num_children = null)
    {
        list($response) = $this->channelsV2ListingsIdCheckavailabilityGetWithHttpInfo($id, $check_in_date, $check_out_date, $num_adults, $num_children);
        return $response;
    }

    /**
     * Operation channelsV2ListingsIdCheckavailabilityGetWithHttpInfo
     *
     * Check if a Listing is available
     *
     * @param  int $id (required)
     * @param  \DateTime $check_in_date Check-In Date (required)
     * @param  \DateTime $check_out_date Check-Out Date (required)
     * @param  int $num_adults Number of Adults (required)
     * @param  int $num_children Number of Children (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\CheckAvailabilityOutputResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelsV2ListingsIdCheckavailabilityGetWithHttpInfo($id, $check_in_date, $check_out_date, $num_adults, $num_children = null)
    {
        $request = $this->channelsV2ListingsIdCheckavailabilityGetRequest($id, $check_in_date, $check_out_date, $num_adults, $num_children);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Piksel\KigoPro\Model\CheckAvailabilityOutputResource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\CheckAvailabilityOutputResource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\KigoPro\Model\CheckAvailabilityOutputResource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\CheckAvailabilityOutputResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelsV2ListingsIdCheckavailabilityGetAsync
     *
     * Check if a Listing is available
     *
     * @param  int $id (required)
     * @param  \DateTime $check_in_date Check-In Date (required)
     * @param  \DateTime $check_out_date Check-Out Date (required)
     * @param  int $num_adults Number of Adults (required)
     * @param  int $num_children Number of Children (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2ListingsIdCheckavailabilityGetAsync($id, $check_in_date, $check_out_date, $num_adults, $num_children = null)
    {
        return $this->channelsV2ListingsIdCheckavailabilityGetAsyncWithHttpInfo($id, $check_in_date, $check_out_date, $num_adults, $num_children)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelsV2ListingsIdCheckavailabilityGetAsyncWithHttpInfo
     *
     * Check if a Listing is available
     *
     * @param  int $id (required)
     * @param  \DateTime $check_in_date Check-In Date (required)
     * @param  \DateTime $check_out_date Check-Out Date (required)
     * @param  int $num_adults Number of Adults (required)
     * @param  int $num_children Number of Children (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2ListingsIdCheckavailabilityGetAsyncWithHttpInfo($id, $check_in_date, $check_out_date, $num_adults, $num_children = null)
    {
        $returnType = '\Piksel\KigoPro\Model\CheckAvailabilityOutputResource';
        $request = $this->channelsV2ListingsIdCheckavailabilityGetRequest($id, $check_in_date, $check_out_date, $num_adults, $num_children);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelsV2ListingsIdCheckavailabilityGet'
     *
     * @param  int $id (required)
     * @param  \DateTime $check_in_date Check-In Date (required)
     * @param  \DateTime $check_out_date Check-Out Date (required)
     * @param  int $num_adults Number of Adults (required)
     * @param  int $num_children Number of Children (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelsV2ListingsIdCheckavailabilityGetRequest($id, $check_in_date, $check_out_date, $num_adults, $num_children = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling channelsV2ListingsIdCheckavailabilityGet'
            );
        }
        // verify the required parameter 'check_in_date' is set
        if ($check_in_date === null || (is_array($check_in_date) && count($check_in_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_in_date when calling channelsV2ListingsIdCheckavailabilityGet'
            );
        }
        // verify the required parameter 'check_out_date' is set
        if ($check_out_date === null || (is_array($check_out_date) && count($check_out_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_out_date when calling channelsV2ListingsIdCheckavailabilityGet'
            );
        }
        // verify the required parameter 'num_adults' is set
        if ($num_adults === null || (is_array($num_adults) && count($num_adults) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $num_adults when calling channelsV2ListingsIdCheckavailabilityGet'
            );
        }
        if ($num_adults > 9999) {
            throw new \InvalidArgumentException('invalid value for "$num_adults" when calling ListingApi.channelsV2ListingsIdCheckavailabilityGet, must be smaller than or equal to 9999.');
        }
        if ($num_adults < 1) {
            throw new \InvalidArgumentException('invalid value for "$num_adults" when calling ListingApi.channelsV2ListingsIdCheckavailabilityGet, must be bigger than or equal to 1.');
        }

        if ($num_children !== null && $num_children > 9999) {
            throw new \InvalidArgumentException('invalid value for "$num_children" when calling ListingApi.channelsV2ListingsIdCheckavailabilityGet, must be smaller than or equal to 9999.');
        }
        if ($num_children !== null && $num_children < 0) {
            throw new \InvalidArgumentException('invalid value for "$num_children" when calling ListingApi.channelsV2ListingsIdCheckavailabilityGet, must be bigger than or equal to 0.');
        }


        $resourcePath = '/channels/v2/listings/{id}/checkavailability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($check_in_date !== null) {
            if('form' === 'form' && is_array($check_in_date)) {
                foreach($check_in_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['CheckInDate'] = $check_in_date;
            }
        }
        // query params
        if ($check_out_date !== null) {
            if('form' === 'form' && is_array($check_out_date)) {
                foreach($check_out_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['CheckOutDate'] = $check_out_date;
            }
        }
        // query params
        if ($num_adults !== null) {
            if('form' === 'form' && is_array($num_adults)) {
                foreach($num_adults as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['NumAdults'] = $num_adults;
            }
        }
        // query params
        if ($num_children !== null) {
            if('form' === 'form' && is_array($num_children)) {
                foreach($num_children as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['NumChildren'] = $num_children;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelsV2ListingsIdGet
     *
     * Get a listing
     *
     * @param  int $id Listing ID (required)
     * @param  string[] $options Options to return selected Listing Settings. Notice: IncludeRateScheduleNights is for internal use only, please use channels/v2/listings/{id}/rates (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ListingResource
     */
    public function channelsV2ListingsIdGet($id, $options = null)
    {
        list($response) = $this->channelsV2ListingsIdGetWithHttpInfo($id, $options);
        return $response;
    }

    /**
     * Operation channelsV2ListingsIdGetWithHttpInfo
     *
     * Get a listing
     *
     * @param  int $id Listing ID (required)
     * @param  string[] $options Options to return selected Listing Settings. Notice: IncludeRateScheduleNights is for internal use only, please use channels/v2/listings/{id}/rates (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ListingResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelsV2ListingsIdGetWithHttpInfo($id, $options = null)
    {
        $request = $this->channelsV2ListingsIdGetRequest($id, $options);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Piksel\KigoPro\Model\ListingResource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ListingResource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\KigoPro\Model\ListingResource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ListingResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelsV2ListingsIdGetAsync
     *
     * Get a listing
     *
     * @param  int $id Listing ID (required)
     * @param  string[] $options Options to return selected Listing Settings. Notice: IncludeRateScheduleNights is for internal use only, please use channels/v2/listings/{id}/rates (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2ListingsIdGetAsync($id, $options = null)
    {
        return $this->channelsV2ListingsIdGetAsyncWithHttpInfo($id, $options)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelsV2ListingsIdGetAsyncWithHttpInfo
     *
     * Get a listing
     *
     * @param  int $id Listing ID (required)
     * @param  string[] $options Options to return selected Listing Settings. Notice: IncludeRateScheduleNights is for internal use only, please use channels/v2/listings/{id}/rates (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2ListingsIdGetAsyncWithHttpInfo($id, $options = null)
    {
        $returnType = '\Piksel\KigoPro\Model\ListingResource';
        $request = $this->channelsV2ListingsIdGetRequest($id, $options);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelsV2ListingsIdGet'
     *
     * @param  int $id Listing ID (required)
     * @param  string[] $options Options to return selected Listing Settings. Notice: IncludeRateScheduleNights is for internal use only, please use channels/v2/listings/{id}/rates (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelsV2ListingsIdGetRequest($id, $options = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling channelsV2ListingsIdGet'
            );
        }

        $resourcePath = '/channels/v2/listings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($options !== null) {
            if('form' === 'form' && is_array($options)) {
                foreach($options as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['options'] = $options;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelsV2ListingsIdLospricingCsvGet
     *
     * @param  int $id id (required)
     * @param  \DateTime $start_date start_date (required)
     * @param  \DateTime $end_date end_date (required)
     * @param  string $payment_plan_setting_id payment_plan_setting_id (optional)
     * @param  string[] $options options (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function channelsV2ListingsIdLospricingCsvGet($id, $start_date, $end_date, $payment_plan_setting_id = null, $options = null)
    {
        $this->channelsV2ListingsIdLospricingCsvGetWithHttpInfo($id, $start_date, $end_date, $payment_plan_setting_id, $options);
    }

    /**
     * Operation channelsV2ListingsIdLospricingCsvGetWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \DateTime $start_date (required)
     * @param  \DateTime $end_date (required)
     * @param  string $payment_plan_setting_id (optional)
     * @param  string[] $options (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelsV2ListingsIdLospricingCsvGetWithHttpInfo($id, $start_date, $end_date, $payment_plan_setting_id = null, $options = null)
    {
        $request = $this->channelsV2ListingsIdLospricingCsvGetRequest($id, $start_date, $end_date, $payment_plan_setting_id, $options);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelsV2ListingsIdLospricingCsvGetAsync
     *
     * @param  int $id (required)
     * @param  \DateTime $start_date (required)
     * @param  \DateTime $end_date (required)
     * @param  string $payment_plan_setting_id (optional)
     * @param  string[] $options (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2ListingsIdLospricingCsvGetAsync($id, $start_date, $end_date, $payment_plan_setting_id = null, $options = null)
    {
        return $this->channelsV2ListingsIdLospricingCsvGetAsyncWithHttpInfo($id, $start_date, $end_date, $payment_plan_setting_id, $options)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelsV2ListingsIdLospricingCsvGetAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \DateTime $start_date (required)
     * @param  \DateTime $end_date (required)
     * @param  string $payment_plan_setting_id (optional)
     * @param  string[] $options (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2ListingsIdLospricingCsvGetAsyncWithHttpInfo($id, $start_date, $end_date, $payment_plan_setting_id = null, $options = null)
    {
        $returnType = '';
        $request = $this->channelsV2ListingsIdLospricingCsvGetRequest($id, $start_date, $end_date, $payment_plan_setting_id, $options);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelsV2ListingsIdLospricingCsvGet'
     *
     * @param  int $id (required)
     * @param  \DateTime $start_date (required)
     * @param  \DateTime $end_date (required)
     * @param  string $payment_plan_setting_id (optional)
     * @param  string[] $options (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelsV2ListingsIdLospricingCsvGetRequest($id, $start_date, $end_date, $payment_plan_setting_id = null, $options = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling channelsV2ListingsIdLospricingCsvGet'
            );
        }
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling channelsV2ListingsIdLospricingCsvGet'
            );
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null || (is_array($end_date) && count($end_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_date when calling channelsV2ListingsIdLospricingCsvGet'
            );
        }

        $resourcePath = '/channels/v2/listings/{id}/lospricing.csv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            if('form' === 'form' && is_array($start_date)) {
                foreach($start_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startDate'] = $start_date;
            }
        }
        // query params
        if ($end_date !== null) {
            if('form' === 'form' && is_array($end_date)) {
                foreach($end_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['endDate'] = $end_date;
            }
        }
        // query params
        if ($payment_plan_setting_id !== null) {
            if('form' === 'form' && is_array($payment_plan_setting_id)) {
                foreach($payment_plan_setting_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['paymentPlanSettingID'] = $payment_plan_setting_id;
            }
        }
        // query params
        if ($options !== null) {
            if('form' === 'form' && is_array($options)) {
                foreach($options as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['options'] = $options;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation channelsV2ListingsIdRatesGet
     *
     * Get contract-aware Rates Feed
     *
     * @param  int $id Listing ID (required)
     * @param  \DateTime $start_date Start Date (required)
     * @param  \DateTime $end_date End Date (required)
     * @param  string $payment_plan_guid Payment Plan Guid (optional) (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\RateScheduleResource
     */
    public function channelsV2ListingsIdRatesGet($id, $start_date, $end_date, $payment_plan_guid = null)
    {
        list($response) = $this->channelsV2ListingsIdRatesGetWithHttpInfo($id, $start_date, $end_date, $payment_plan_guid);
        return $response;
    }

    /**
     * Operation channelsV2ListingsIdRatesGetWithHttpInfo
     *
     * Get contract-aware Rates Feed
     *
     * @param  int $id Listing ID (required)
     * @param  \DateTime $start_date Start Date (required)
     * @param  \DateTime $end_date End Date (required)
     * @param  string $payment_plan_guid Payment Plan Guid (optional) (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\ApiError|\Piksel\KigoPro\Model\RateScheduleResource, HTTP status code, HTTP response headers (array of strings)
     */
    public function channelsV2ListingsIdRatesGetWithHttpInfo($id, $start_date, $end_date, $payment_plan_guid = null)
    {
        $request = $this->channelsV2ListingsIdRatesGetRequest($id, $start_date, $end_date, $payment_plan_guid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Piksel\KigoPro\Model\ApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Piksel\KigoPro\Model\RateScheduleResource' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\RateScheduleResource', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\KigoPro\Model\RateScheduleResource';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\RateScheduleResource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation channelsV2ListingsIdRatesGetAsync
     *
     * Get contract-aware Rates Feed
     *
     * @param  int $id Listing ID (required)
     * @param  \DateTime $start_date Start Date (required)
     * @param  \DateTime $end_date End Date (required)
     * @param  string $payment_plan_guid Payment Plan Guid (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2ListingsIdRatesGetAsync($id, $start_date, $end_date, $payment_plan_guid = null)
    {
        return $this->channelsV2ListingsIdRatesGetAsyncWithHttpInfo($id, $start_date, $end_date, $payment_plan_guid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation channelsV2ListingsIdRatesGetAsyncWithHttpInfo
     *
     * Get contract-aware Rates Feed
     *
     * @param  int $id Listing ID (required)
     * @param  \DateTime $start_date Start Date (required)
     * @param  \DateTime $end_date End Date (required)
     * @param  string $payment_plan_guid Payment Plan Guid (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function channelsV2ListingsIdRatesGetAsyncWithHttpInfo($id, $start_date, $end_date, $payment_plan_guid = null)
    {
        $returnType = '\Piksel\KigoPro\Model\RateScheduleResource';
        $request = $this->channelsV2ListingsIdRatesGetRequest($id, $start_date, $end_date, $payment_plan_guid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'channelsV2ListingsIdRatesGet'
     *
     * @param  int $id Listing ID (required)
     * @param  \DateTime $start_date Start Date (required)
     * @param  \DateTime $end_date End Date (required)
     * @param  string $payment_plan_guid Payment Plan Guid (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function channelsV2ListingsIdRatesGetRequest($id, $start_date, $end_date, $payment_plan_guid = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling channelsV2ListingsIdRatesGet'
            );
        }
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling channelsV2ListingsIdRatesGet'
            );
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null || (is_array($end_date) && count($end_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_date when calling channelsV2ListingsIdRatesGet'
            );
        }

        $resourcePath = '/channels/v2/listings/{id}/rates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            if('form' === 'form' && is_array($start_date)) {
                foreach($start_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['startDate'] = $start_date;
            }
        }
        // query params
        if ($end_date !== null) {
            if('form' === 'form' && is_array($end_date)) {
                foreach($end_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['endDate'] = $end_date;
            }
        }
        // query params
        if ($payment_plan_guid !== null) {
            if('form' === 'form' && is_array($payment_plan_guid)) {
                foreach($payment_plan_guid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['paymentPlanGuid'] = $payment_plan_guid;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
