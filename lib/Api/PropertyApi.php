<?php
/**
 * PropertyApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 */

/**
 * Kigo Pro - Channel Manager API
 *
 * https://www.kigoapis.com/pro/v1/swagger/?urls.primaryName=Channel%20Manager%20API%20v2
 *
 * The version of the OpenAPI document: channels-v2
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\KigoPro\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Piksel\KigoPro\ApiException;
use Piksel\KigoPro\Configuration;
use Piksel\KigoPro\HeaderSelector;
use Piksel\KigoPro\ObjectSerializer;

/**
 * PropertyApi Class Doc Comment
 *
 * @category Class
 * @package  Piksel\KigoPro
 * @author   Patrick Leijser
 * @link     https://piksel.nl
 */
class PropertyApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation proV1ContentPropertiesGet
     *
     * @param  int $page_num page_num (optional)
     * @param  int $page_size page_size (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function proV1ContentPropertiesGet($page_num = null, $page_size = null)
    {
        $this->proV1ContentPropertiesGetWithHttpInfo($page_num, $page_size);
    }

    /**
     * Operation proV1ContentPropertiesGetWithHttpInfo
     *
     * @param  int $page_num (optional)
     * @param  int $page_size (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function proV1ContentPropertiesGetWithHttpInfo($page_num = null, $page_size = null)
    {
        $request = $this->proV1ContentPropertiesGetRequest($page_num, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ValidationErrorException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proV1ContentPropertiesGetAsync
     *
     * @param  int $page_num (optional)
     * @param  int $page_size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesGetAsync($page_num = null, $page_size = null)
    {
        return $this->proV1ContentPropertiesGetAsyncWithHttpInfo($page_num, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proV1ContentPropertiesGetAsyncWithHttpInfo
     *
     * @param  int $page_num (optional)
     * @param  int $page_size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesGetAsyncWithHttpInfo($page_num = null, $page_size = null)
    {
        $returnType = '';
        $request = $this->proV1ContentPropertiesGetRequest($page_num, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proV1ContentPropertiesGet'
     *
     * @param  int $page_num (optional)
     * @param  int $page_size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function proV1ContentPropertiesGetRequest($page_num = null, $page_size = null)
    {

        $resourcePath = '/pro/v1/content/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_num !== null) {
            if('form' === 'form' && is_array($page_num)) {
                foreach($page_num as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageNum'] = $page_num;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proV1ContentPropertiesIdPropertysummaryGet
     *
     * @param  int $id id (required)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\KigoPro\Model\ValidationErrorException|\Piksel\KigoPro\Model\GetPropertySummaryVm
     */
    public function proV1ContentPropertiesIdPropertysummaryGet($id)
    {
        list($response) = $this->proV1ContentPropertiesIdPropertysummaryGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation proV1ContentPropertiesIdPropertysummaryGetWithHttpInfo
     *
     * @param  int $id (required)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\KigoPro\Model\ValidationErrorException|\Piksel\KigoPro\Model\GetPropertySummaryVm, HTTP status code, HTTP response headers (array of strings)
     */
    public function proV1ContentPropertiesIdPropertysummaryGetWithHttpInfo($id)
    {
        $request = $this->proV1ContentPropertiesIdPropertysummaryGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Piksel\KigoPro\Model\ValidationErrorException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ValidationErrorException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Piksel\KigoPro\Model\GetPropertySummaryVm' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\GetPropertySummaryVm', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\KigoPro\Model\GetPropertySummaryVm';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ValidationErrorException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\GetPropertySummaryVm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proV1ContentPropertiesIdPropertysummaryGetAsync
     *
     * @param  int $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesIdPropertysummaryGetAsync($id)
    {
        return $this->proV1ContentPropertiesIdPropertysummaryGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proV1ContentPropertiesIdPropertysummaryGetAsyncWithHttpInfo
     *
     * @param  int $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesIdPropertysummaryGetAsyncWithHttpInfo($id)
    {
        $returnType = '\Piksel\KigoPro\Model\GetPropertySummaryVm';
        $request = $this->proV1ContentPropertiesIdPropertysummaryGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proV1ContentPropertiesIdPropertysummaryGet'
     *
     * @param  int $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function proV1ContentPropertiesIdPropertysummaryGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling proV1ContentPropertiesIdPropertysummaryGet'
            );
        }

        $resourcePath = '/pro/v1/content/properties/{id}/propertysummary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proV1ContentPropertiesPagedPageNumGet
     *
     * @param  string $page_num2 page_num2 (required)
     * @param  int $page_num page_num (optional)
     * @param  int $page_size page_size (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function proV1ContentPropertiesPagedPageNumGet($page_num2, $page_num = null, $page_size = null)
    {
        $this->proV1ContentPropertiesPagedPageNumGetWithHttpInfo($page_num2, $page_num, $page_size);
    }

    /**
     * Operation proV1ContentPropertiesPagedPageNumGetWithHttpInfo
     *
     * @param  string $page_num2 (required)
     * @param  int $page_num (optional)
     * @param  int $page_size (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function proV1ContentPropertiesPagedPageNumGetWithHttpInfo($page_num2, $page_num = null, $page_size = null)
    {
        $request = $this->proV1ContentPropertiesPagedPageNumGetRequest($page_num2, $page_num, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ValidationErrorException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proV1ContentPropertiesPagedPageNumGetAsync
     *
     * @param  string $page_num2 (required)
     * @param  int $page_num (optional)
     * @param  int $page_size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesPagedPageNumGetAsync($page_num2, $page_num = null, $page_size = null)
    {
        return $this->proV1ContentPropertiesPagedPageNumGetAsyncWithHttpInfo($page_num2, $page_num, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proV1ContentPropertiesPagedPageNumGetAsyncWithHttpInfo
     *
     * @param  string $page_num2 (required)
     * @param  int $page_num (optional)
     * @param  int $page_size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesPagedPageNumGetAsyncWithHttpInfo($page_num2, $page_num = null, $page_size = null)
    {
        $returnType = '';
        $request = $this->proV1ContentPropertiesPagedPageNumGetRequest($page_num2, $page_num, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proV1ContentPropertiesPagedPageNumGet'
     *
     * @param  string $page_num2 (required)
     * @param  int $page_num (optional)
     * @param  int $page_size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function proV1ContentPropertiesPagedPageNumGetRequest($page_num2, $page_num = null, $page_size = null)
    {
        // verify the required parameter 'page_num2' is set
        if ($page_num2 === null || (is_array($page_num2) && count($page_num2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_num2 when calling proV1ContentPropertiesPagedPageNumGet'
            );
        }

        $resourcePath = '/pro/v1/content/properties/paged/{pageNum}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_num !== null) {
            if('form' === 'form' && is_array($page_num)) {
                foreach($page_num as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageNum'] = $page_num;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($page_num2 !== null) {
            $resourcePath = str_replace(
                '{' . 'pageNum' . '}',
                ObjectSerializer::toPathValue($page_num2),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proV1ContentPropertiesPagedPageNumPageSizeGet
     *
     * @param  string $page_num2 page_num2 (required)
     * @param  string $page_size2 page_size2 (required)
     * @param  int $page_num page_num (optional)
     * @param  int $page_size page_size (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function proV1ContentPropertiesPagedPageNumPageSizeGet($page_num2, $page_size2, $page_num = null, $page_size = null)
    {
        $this->proV1ContentPropertiesPagedPageNumPageSizeGetWithHttpInfo($page_num2, $page_size2, $page_num, $page_size);
    }

    /**
     * Operation proV1ContentPropertiesPagedPageNumPageSizeGetWithHttpInfo
     *
     * @param  string $page_num2 (required)
     * @param  string $page_size2 (required)
     * @param  int $page_num (optional)
     * @param  int $page_size (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function proV1ContentPropertiesPagedPageNumPageSizeGetWithHttpInfo($page_num2, $page_size2, $page_num = null, $page_size = null)
    {
        $request = $this->proV1ContentPropertiesPagedPageNumPageSizeGetRequest($page_num2, $page_size2, $page_num, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ValidationErrorException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proV1ContentPropertiesPagedPageNumPageSizeGetAsync
     *
     * @param  string $page_num2 (required)
     * @param  string $page_size2 (required)
     * @param  int $page_num (optional)
     * @param  int $page_size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesPagedPageNumPageSizeGetAsync($page_num2, $page_size2, $page_num = null, $page_size = null)
    {
        return $this->proV1ContentPropertiesPagedPageNumPageSizeGetAsyncWithHttpInfo($page_num2, $page_size2, $page_num, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proV1ContentPropertiesPagedPageNumPageSizeGetAsyncWithHttpInfo
     *
     * @param  string $page_num2 (required)
     * @param  string $page_size2 (required)
     * @param  int $page_num (optional)
     * @param  int $page_size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesPagedPageNumPageSizeGetAsyncWithHttpInfo($page_num2, $page_size2, $page_num = null, $page_size = null)
    {
        $returnType = '';
        $request = $this->proV1ContentPropertiesPagedPageNumPageSizeGetRequest($page_num2, $page_size2, $page_num, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proV1ContentPropertiesPagedPageNumPageSizeGet'
     *
     * @param  string $page_num2 (required)
     * @param  string $page_size2 (required)
     * @param  int $page_num (optional)
     * @param  int $page_size (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function proV1ContentPropertiesPagedPageNumPageSizeGetRequest($page_num2, $page_size2, $page_num = null, $page_size = null)
    {
        // verify the required parameter 'page_num2' is set
        if ($page_num2 === null || (is_array($page_num2) && count($page_num2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_num2 when calling proV1ContentPropertiesPagedPageNumPageSizeGet'
            );
        }
        // verify the required parameter 'page_size2' is set
        if ($page_size2 === null || (is_array($page_size2) && count($page_size2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_size2 when calling proV1ContentPropertiesPagedPageNumPageSizeGet'
            );
        }

        $resourcePath = '/pro/v1/content/properties/paged/{pageNum}/{pageSize}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_num !== null) {
            if('form' === 'form' && is_array($page_num)) {
                foreach($page_num as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageNum'] = $page_num;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($page_num2 !== null) {
            $resourcePath = str_replace(
                '{' . 'pageNum' . '}',
                ObjectSerializer::toPathValue($page_num2),
                $resourcePath
            );
        }
        // path params
        if ($page_size2 !== null) {
            $resourcePath = str_replace(
                '{' . 'pageSize' . '}',
                ObjectSerializer::toPathValue($page_size2),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proV1ContentPropertiesPost
     *
     * @param  \Piksel\KigoPro\Model\CreatePropertyCommand $create_property_command create_property_command (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Piksel\KigoPro\Model\ValidationErrorException|\Piksel\KigoPro\Model\CreatePropertyResponseVmCommandOkEnvelope
     */
    public function proV1ContentPropertiesPost($create_property_command = null)
    {
        list($response) = $this->proV1ContentPropertiesPostWithHttpInfo($create_property_command);
        return $response;
    }

    /**
     * Operation proV1ContentPropertiesPostWithHttpInfo
     *
     * @param  \Piksel\KigoPro\Model\CreatePropertyCommand $create_property_command (optional)
     *
     * @throws \Piksel\KigoPro\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Piksel\KigoPro\Model\ValidationErrorException|\Piksel\KigoPro\Model\CreatePropertyResponseVmCommandOkEnvelope, HTTP status code, HTTP response headers (array of strings)
     */
    public function proV1ContentPropertiesPostWithHttpInfo($create_property_command = null)
    {
        $request = $this->proV1ContentPropertiesPostRequest($create_property_command);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Piksel\KigoPro\Model\ValidationErrorException' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\ValidationErrorException', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Piksel\KigoPro\Model\CreatePropertyResponseVmCommandOkEnvelope' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Piksel\KigoPro\Model\CreatePropertyResponseVmCommandOkEnvelope', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Piksel\KigoPro\Model\CreatePropertyResponseVmCommandOkEnvelope';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\ValidationErrorException',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Piksel\KigoPro\Model\CreatePropertyResponseVmCommandOkEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proV1ContentPropertiesPostAsync
     *
     * @param  \Piksel\KigoPro\Model\CreatePropertyCommand $create_property_command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesPostAsync($create_property_command = null)
    {
        return $this->proV1ContentPropertiesPostAsyncWithHttpInfo($create_property_command)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proV1ContentPropertiesPostAsyncWithHttpInfo
     *
     * @param  \Piksel\KigoPro\Model\CreatePropertyCommand $create_property_command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proV1ContentPropertiesPostAsyncWithHttpInfo($create_property_command = null)
    {
        $returnType = '\Piksel\KigoPro\Model\CreatePropertyResponseVmCommandOkEnvelope';
        $request = $this->proV1ContentPropertiesPostRequest($create_property_command);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proV1ContentPropertiesPost'
     *
     * @param  \Piksel\KigoPro\Model\CreatePropertyCommand $create_property_command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function proV1ContentPropertiesPostRequest($create_property_command = null)
    {

        $resourcePath = '/pro/v1/content/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($create_property_command)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_property_command));
            } else {
                $httpBody = $create_property_command;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
