{
  "openapi": "3.0.1",
  "info": {
    "title": "Kigo Pro - Channel Manager API",
    "version": "channels-v2"
  },
  "servers": [
    {
      "url": "https://www.kigoapis.com"
    }
  ],
  "paths": {
    "/channels/v2/bookings/{id}": {
      "get": {
        "tags": [
          "Booking"
        ],
        "summary": "Get a Booking",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Booking",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the Booking",
              "format": "int32"
            }
          },
          {
            "name": "options",
            "in": "query",
            "description": "Booking Options",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Statement"
                ],
                "type": "string"
              },
              "description": "Booking Options",
              "nullable": true
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookingResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingResource"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Booking"
        ],
        "summary": "Update a Booking",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Booking ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Booking ID",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Booking object to be updated",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PutBookingRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutBookingRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PutBookingRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PutBookingRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PutBookingResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutBookingResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutBookingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/bookings": {
      "post": {
        "tags": [
          "Booking"
        ],
        "summary": "Create a new Booking",
        "requestBody": {
          "description": "Booking object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PostBookingRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostBookingRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PostBookingRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PostBookingRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PostBookingResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostBookingResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostBookingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/bookings/{id}/cancel": {
      "put": {
        "tags": [
          "Booking"
        ],
        "summary": "Cancel a Booking",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Booking ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Booking ID",
              "format": "int32"
            }
          },
          {
            "name": "cancelledByRole",
            "in": "query",
            "description": "User's Role that cancelled the Booking",
            "schema": {
              "enum": [
                "Unknown",
                "Channel",
                "Host",
                "Guest",
                "Kigo"
              ],
              "type": "string",
              "description": "User's Role that cancelled a Booking."
            }
          },
          {
            "name": "cancellationReason",
            "in": "query",
            "description": "Optional Reason for Cancellation",
            "schema": {
              "enum": [
                "Unknown",
                "Denied",
                "GuestInitiated",
                "Mistake",
                "BreachOfPolicy",
                "Fraud",
                "InvalidCreditCard",
                "NoShowWithRefund",
                "NoShowWithoutRefund"
              ],
              "type": "string",
              "description": "Optional Reason for Cancellation"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/channels/v2/bookings/{id}/creditcards": {
      "post": {
        "tags": [
          "Booking"
        ],
        "summary": "Save and try to authorize/charge a Credit Card for a Booking",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Booking",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the Booking",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Credit Card object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreditCard"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditCard"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditCard"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreditCard"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PostBookingCreditCardResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostBookingCreditCardResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostBookingCreditCardResponse"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/bookings/diff": {
      "get": {
        "tags": [
          "Booking"
        ],
        "summary": "Get ID and Date Last Updated of all Bookings that were created/modified within the specified date range",
        "parameters": [
          {
            "name": "ChannelConnectionID",
            "in": "query",
            "description": "Channel Connection ID",
            "schema": {
              "type": "integer",
              "description": "Channel Connection ID",
              "format": "int32"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "Start Date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Start Date",
              "format": "date"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "End Date",
            "schema": {
              "type": "string",
              "description": "End Date",
              "format": "date",
              "nullable": true
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BookingDiffOutputListResourceList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingDiffOutputListResourceList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingDiffOutputListResourceList"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/bookings/{id}/events": {
      "post": {
        "tags": [
          "Booking"
        ],
        "summary": "Create a Booking Event",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Booking ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Booking ID",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Booking Event",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BookingEvent"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingEvent"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingEvent"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookingEvent"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/pro/v1/bookings/{id}": {
      "get": {
        "tags": [
          "Booking"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetBookingVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBookingVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBookingVm"
                }
              }
            }
          }
        }
      }
    },
    "/pro/v1/bookings": {
      "get": {
        "tags": [
          "Booking"
        ],
        "parameters": [
          {
            "name": "AccountID",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "PropertyID",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "Channel",
            "in": "query",
            "schema": {
              "enum": [
                "KigoWebsites",
                "Bdc",
                "AirBnb",
                "HomeAway",
                "Expedia",
                "TravelStaytion",
                "Despegar",
                "Holidu",
                "MagicStay",
                "WayToStay",
                "Flat4Day",
                "EDomizil",
                "EveryStay",
                "Locasun",
                "HomeToGo",
                "SmokyMountains",
                "Vacagent",
                "FindRentals",
                "Google",
                "Silverdoor"
              ],
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetBookingVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBookingVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBookingVm"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/connections": {
      "get": {
        "tags": [
          "ChannelConnection"
        ],
        "summary": "Get Channel Connection",
        "parameters": [
          {
            "name": "options",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "IncludeAggregatedConnections"
                ],
                "type": "string",
                "description": "Channel Connection Options that can be returned by Channel Connection API\r\nJsonConverter and StringEnumConverter are used to show enum as a string (and not as int) in the listingOptions URL\r\nApi"
              },
              "nullable": true
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelConnectionResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelConnectionResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelConnectionResource"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/listings": {
      "get": {
        "tags": [
          "Listing"
        ],
        "summary": "Get all listings associated to a requested channel",
        "parameters": [
          {
            "name": "ccId",
            "in": "query",
            "description": "Optional Channel Connection ID",
            "schema": {
              "type": "integer",
              "description": "Optional Channel Connection ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetListingsResultListResourceList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetListingsResultListResourceList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetListingsResultListResourceList"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/listings/{id}": {
      "get": {
        "tags": [
          "Listing"
        ],
        "summary": "Get a listing",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Listing ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Listing ID",
              "format": "int32"
            }
          },
          {
            "name": "options",
            "in": "query",
            "description": "Options to return selected Listing Settings. Notice: IncludeRateScheduleNights is for internal use only, please use channels/v2/listings/{id}/rates",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "BlockedOutNightsSettings",
                  "FeeSettings",
                  "StaySettings",
                  "RatePlanSettings",
                  "IncludeRateScheduleNights",
                  "Rooms",
                  "IncludeDefaultRateScheduleNights",
                  "IncludeContractualTermsTranslations",
                  "Promotions",
                  "AmenitiesV2",
                  "Reviews"
                ],
                "type": "string",
                "description": "Listing Options that can be returned by Listing API or by GetByID method\r\nJsonConverter and StringEnumConverter are used to show enum as a string (and not as int) in the listingOptions URL\r\nApi"
              },
              "description": "Options to return selected Listing Settings. Notice: IncludeRateScheduleNights is for internal use only, please use channels/v2/listings/{id}/rates",
              "nullable": true
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/listings/{id}/lospricing.csv": {
      "get": {
        "tags": [
          "Listing"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "paymentPlanSettingID",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            }
          },
          {
            "name": "options",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "RentOnly",
                  "MinGuestOnly",
                  "SkipAvailability"
                ],
                "type": "string",
                "description": ""
              },
              "nullable": true
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/listings/{id}/availability": {
      "get": {
        "tags": [
          "Listing"
        ],
        "summary": "Get Availability Feed",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Listing ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Listing ID",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start Date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Start Date",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End Date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "End Date",
              "format": "date"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AvailabilityResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailabilityResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailabilityResource"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/listings/diff": {
      "get": {
        "tags": [
          "Listing"
        ],
        "summary": "Get all the Listings where Price, Availability or Content has changed, after a given time",
        "parameters": [
          {
            "name": "modifiedAfter",
            "in": "query",
            "description": "Last date after which changes took place",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Last date after which changes took place",
              "format": "date-time"
            }
          },
          {
            "name": "options",
            "in": "query",
            "description": "Specify if info on Price, Availability or Content changes are desired. If none specified, it will\r\nreturn all of them",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Price",
                  "Availability",
                  "Content",
                  "Status"
                ],
                "type": "string",
                "description": "Listing Diff Options that can be returned by Listing API Diff\r\nJsonConverter and StringEnumConverter are used to show enum as a string (and not as int) in the listingOptions URL\r\nApi"
              },
              "description": "Specify if info on Price, Availability or Content changes are desired. If none specified, it will\r\nreturn all of them",
              "nullable": true
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetDiffResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDiffResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDiffResult"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/listings/{id}/checkavailability": {
      "get": {
        "tags": [
          "Listing"
        ],
        "summary": "Check if a Listing is available",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          },
          {
            "name": "CheckInDate",
            "in": "query",
            "description": "Check-In Date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Check-In Date",
              "format": "date"
            }
          },
          {
            "name": "CheckOutDate",
            "in": "query",
            "description": "Check-Out Date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Check-Out Date",
              "format": "date"
            }
          },
          {
            "name": "NumAdults",
            "in": "query",
            "description": "Number of Adults",
            "required": true,
            "schema": {
              "maximum": 9999,
              "minimum": 1,
              "type": "integer",
              "description": "Number of Adults",
              "format": "int32"
            }
          },
          {
            "name": "NumChildren",
            "in": "query",
            "description": "Number of Children",
            "schema": {
              "maximum": 9999,
              "minimum": 0,
              "type": "integer",
              "description": "Number of Children",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAvailabilityOutputResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAvailabilityOutputResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAvailabilityOutputResource"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/listings/{id}/rates": {
      "get": {
        "tags": [
          "Listing"
        ],
        "summary": "Get contract-aware Rates Feed",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Listing ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Listing ID",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start Date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Start Date",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End Date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "End Date",
              "format": "date"
            }
          },
          {
            "name": "paymentPlanGuid",
            "in": "query",
            "description": "Payment Plan Guid (optional)",
            "schema": {
              "type": "string",
              "description": "Payment Plan Guid (optional)",
              "format": "uuid",
              "nullable": true
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RateScheduleResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateScheduleResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateScheduleResource"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/messaging/threads": {
      "post": {
        "tags": [
          "Messaging"
        ],
        "summary": "Create a new Thread",
        "requestBody": {
          "description": "Thread object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PostThreadRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostThreadRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PostThreadRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PostThreadRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PostThreadResponseResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostThreadResponseResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostThreadResponseResource"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/messaging/threads/{tid}/messages": {
      "post": {
        "tags": [
          "Messaging"
        ],
        "summary": "Create a new Message",
        "parameters": [
          {
            "name": "tid",
            "in": "path",
            "description": "Thread ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Thread ID",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Message object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PostUserMessageRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUserMessageRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUserMessageRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PostUserMessageRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PostUserMessageResponseResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostUserMessageResponseResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostUserMessageResponseResource"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/messaging/threads/{tid}": {
      "put": {
        "tags": [
          "Messaging"
        ],
        "summary": "Update a Thread",
        "parameters": [
          {
            "name": "tid",
            "in": "path",
            "description": "Thread object",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Thread object",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Thread object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PostThreadRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostThreadRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PostThreadRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PostThreadRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PostThreadResponseResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostThreadResponseResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostThreadResponseResource"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/messaging/threads/{tid}/messages/{id}": {
      "put": {
        "tags": [
          "Messaging"
        ],
        "summary": "Update a Message",
        "parameters": [
          {
            "name": "tid",
            "in": "path",
            "description": "Thread ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Thread ID",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Message ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Message ID",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Message object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PutUserMessageRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutUserMessageRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PutUserMessageRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PutUserMessageRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PutUserMessageResponseResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutUserMessageResponseResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutUserMessageResponseResource"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/messaging/messages": {
      "get": {
        "tags": [
          "Messaging"
        ],
        "summary": "Get Messages",
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserMessageResponseResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserMessageResponseResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserMessageResponseResource"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/promotions/assignment": {
      "get": {
        "tags": [
          "Promotion"
        ],
        "summary": "Get Promotions with assigned listing ids for active and shared listings on a given channel.",
        "parameters": [
          {
            "name": "ccId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionSettingWithAssociatedListingsListResourceList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionSettingWithAssociatedListingsListResourceList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionSettingWithAssociatedListingsListResourceList"
                }
              }
            }
          }
        }
      }
    },
    "/pro/v1/content/properties/{id}/propertysummary": {
      "get": {
        "tags": [
          "Property"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertySummaryVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertySummaryVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertySummaryVm"
                }
              }
            }
          }
        }
      }
    },
    "/pro/v1/content/properties/paged/{pageNum}": {
      "get": {
        "tags": [
          "Property"
        ],
        "parameters": [
          {
            "name": "pageNum",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "pageNum",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          }
        }
      }
    },
    "/pro/v1/content/properties/paged/{pageNum}/{pageSize}": {
      "get": {
        "tags": [
          "Property"
        ],
        "parameters": [
          {
            "name": "pageNum",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "pageNum",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          }
        }
      }
    },
    "/pro/v1/content/properties": {
      "get": {
        "tags": [
          "Property"
        ],
        "parameters": [
          {
            "name": "pageNum",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Property"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyCommand"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePropertyResponseVmCommandOkEnvelope"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePropertyResponseVmCommandOkEnvelope"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePropertyResponseVmCommandOkEnvelope"
                }
              }
            }
          }
        }
      }
    },
    "/pro/v1/content/properties/amenities": {
      "get": {
        "tags": [
          "PropertyAmenity"
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetAmenitiesMainAmenityVmListResourceList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAmenitiesMainAmenityVmListResourceList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAmenitiesMainAmenityVmListResourceList"
                }
              }
            }
          }
        }
      }
    },
    "/pro/v1/content/properties/{id}/amenities": {
      "get": {
        "tags": [
          "PropertyAmenity"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyAmentiesVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyAmentiesVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyAmentiesVm"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PropertyAmenity"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyAmenitiesCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyAmenitiesCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyAmenitiesCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyAmenitiesCommand"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              }
            }
          }
        }
      }
    },
    "/pro/v1/content/properties/{id}/checkinpolicy": {
      "get": {
        "tags": [
          "PropertyCheckInPolicy"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetCheckInPolicyVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCheckInPolicyVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCheckInPolicyVm"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PropertyCheckInPolicy"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PutCheckInPolicyCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutCheckInPolicyCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PutCheckInPolicyCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PutCheckInPolicyCommand"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              }
            }
          }
        }
      }
    },
    "/pro/v1/content/properties/{id}/descriptions": {
      "get": {
        "tags": [
          "PropertyDescriptions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyDescriptionsVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyDescriptionsVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyDescriptionsVm"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PropertyDescriptions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyDescriptionsCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyDescriptionsCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyDescriptionsCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyDescriptionsCommand"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              }
            }
          }
        }
      }
    },
    "/pro/v1/content/properties/{id}/details": {
      "get": {
        "tags": [
          "PropertyGeneralInformation"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyDetailsVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyDetailsVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyDetailsVm"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PropertyGeneralInformation"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyDetailsCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyDetailsCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyDetailsCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyDetailsCommand"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              }
            }
          }
        }
      }
    },
    "/pro/v1/content/properties/{id}/address": {
      "put": {
        "tags": [
          "PropertyGeneralInformation"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyAddressCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyAddressCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyAddressCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyAddressCommand"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "PropertyGeneralInformation"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyAddressVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyAddressVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyAddressVm"
                }
              }
            }
          }
        }
      }
    },
    "/pro/v1/content/properties/{id}/houserules": {
      "get": {
        "tags": [
          "PropertyHouseRules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetHouseRulesVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetHouseRulesVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetHouseRulesVm"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PropertyHouseRules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PutHouseRulesCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutHouseRulesCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PutHouseRulesCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PutHouseRulesCommand"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              }
            }
          }
        }
      }
    },
    "/pro/v1/content/properties/{id}/legalinfo": {
      "put": {
        "tags": [
          "PropertyLegalInfo"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PutLegalInfoCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutLegalInfoCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PutLegalInfoCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PutLegalInfoCommand"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "PropertyLegalInfo"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorException"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetLegalInfoVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLegalInfoVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLegalInfoVm"
                }
              }
            }
          }
        }
      }
    },
    "/pro/v1/content/properties/{id}/medias/images": {
      "post": {
        "tags": [
          "PropertyMedia"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PostPropertyMediaCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostPropertyMediaCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PostPropertyMediaCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PostPropertyMediaCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32CommandOkEnvelope"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32CommandOkEnvelope"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32CommandOkEnvelope"
                }
              }
            }
          }
        }
      }
    },
    "/pro/v1/content/properties/{id}/medias": {
      "get": {
        "tags": [
          "PropertyMedia"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyMediaVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyMediaVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyMediaVm"
                }
              }
            }
          }
        }
      }
    },
    "/pro/v1/content/properties/{id}/medias/{mediaId}": {
      "put": {
        "tags": [
          "PropertyMedia"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "mediaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyMediaTagsAndOrderCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyMediaTagsAndOrderCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyMediaTagsAndOrderCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyMediaTagsAndOrderCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PropertyMedia"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "mediaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              }
            }
          }
        }
      }
    },
    "/pro/v1/content/properties/mediatags": {
      "get": {
        "tags": [
          "PropertyMedia"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetMediaTagsTagVm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetMediaTagsTagVm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetMediaTagsTagVm"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/pro/v1/content/properties/{id}/rooms": {
      "get": {
        "tags": [
          "PropertyRoom"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyRoomsVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyRoomsVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPropertyRoomsVm"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PropertyRoom"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyRoomsCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyRoomsCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyRoomsCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PutPropertyRoomsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/quotes": {
      "post": {
        "tags": [
          "Quote"
        ],
        "summary": "Generate a quote given a desired QuoteContext",
        "requestBody": {
          "description": "Quote Request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteResource"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/quotes/{quoteGuid}/book": {
      "post": {
        "tags": [
          "Quote"
        ],
        "summary": "Convert a Quote into a Booking",
        "parameters": [
          {
            "name": "quoteGuid",
            "in": "path",
            "description": "Quote Guid to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Quote Guid to",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Booking Request (from a pre-existing Quote)",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PostBookingFromQuoteRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostBookingFromQuoteRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PostBookingFromQuoteRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PostBookingFromQuoteRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PostBookingResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostBookingResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostBookingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pro/v1/properties/{id}/rates": {
      "post": {
        "tags": [
          "Rate"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetPropertyRateDto"
                },
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetPropertyRateDto"
                },
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetPropertyRateDto"
                },
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetPropertyRateDto"
                },
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanCommandOkEnvelope"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Rate"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetPropertyRateVm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetPropertyRateVm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetPropertyRateVm"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/amenities": {
      "get": {
        "tags": [
          "ReferenceData"
        ],
        "summary": "Get supported amenities",
        "parameters": [
          {
            "name": "options",
            "in": "query",
            "schema": {
              "enum": [
                "V1",
                "V2"
              ],
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AmenityListResourceList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AmenityListResourceList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AmenityListResourceList"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/countries": {
      "get": {
        "tags": [
          "ReferenceData"
        ],
        "summary": "Get supported countries",
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CountryListResourceList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountryListResourceList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountryListResourceList"
                }
              }
            }
          }
        }
      }
    },
    "/channels/v2/mediatags": {
      "get": {
        "tags": [
          "ReferenceData"
        ],
        "summary": "Get supported tags",
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagListResourceList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagListResourceList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagListResourceList"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiErrorModel": {
        "type": "object",
        "properties": {
          "code": {
            "enum": [
              "Unauthorized",
              "RateLimit",
              "Invalid",
              "NotFound",
              "Unexpected",
              "Forbidden"
            ],
            "type": "string"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "exception": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ApiErrorModel"
          }
        },
        "additionalProperties": false
      },
      "Address": {
        "required": [
          "country"
        ],
        "type": "object",
        "properties": {
          "address1": {
            "maxLength": 100,
            "type": "string",
            "description": "Address Line 1",
            "nullable": true
          },
          "address2": {
            "maxLength": 100,
            "type": "string",
            "description": "Address Line 2",
            "nullable": true
          },
          "city": {
            "maxLength": 100,
            "type": "string",
            "description": "City",
            "nullable": true
          },
          "state": {
            "maxLength": 100,
            "type": "string",
            "description": "State",
            "nullable": true
          },
          "postalCode": {
            "maxLength": 100,
            "type": "string",
            "description": "Postal Code",
            "nullable": true
          },
          "country": {
            "maxLength": 2,
            "type": "string",
            "description": "Country Code"
          }
        },
        "additionalProperties": false
      },
      "Person": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        },
        "additionalProperties": false
      },
      "GuestStatementDetail": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "Unknown",
              "Rent",
              "CleaningFee",
              "MarketingFee",
              "SalesTax",
              "OtherFee",
              "DamageWaiver",
              "Maintenance",
              "Installment",
              "RefundableDamageDeposit",
              "Commission",
              "GenericDiscount",
              "TravelInsurance",
              "CancellationFee",
              "ExtraPersonFee",
              "ProcessingFee",
              "ServiceFee",
              "InfoOnly",
              "Damages",
              "Deposit",
              "RentAdjustment",
              "Deferment",
              "TrustAccount",
              "UpsellFee",
              "LinenFee",
              "ResortFee",
              "CityTax",
              "DestinationFee",
              "GovernmentTax",
              "LocalCouncilTax",
              "BasicPromotion",
              "CouponPromotion",
              "EarlyBookerPromotion",
              "LastMinutePromotion",
              "BusinessBookerPromotion",
              "MobileRatePromotion",
              "GeoRatePromotion"
            ],
            "type": "string",
            "description": "Statement Type (Rent or Fee)"
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Total of this Statement's line",
            "format": "double"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "isMandatory": {
            "type": "boolean"
          },
          "createdDate": {
            "type": "string",
            "description": "Created DateTime (UTC)",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Guest Statement Detail"
      },
      "GuestStatement": {
        "type": "object",
        "properties": {
          "statementLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuestStatementDetail"
            },
            "description": "Statement Details",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Statement"
      },
      "StatementDetail": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "Unknown",
              "Rent",
              "CleaningFee",
              "MarketingFee",
              "SalesTax",
              "OtherFee",
              "DamageWaiver",
              "Maintenance",
              "Installment",
              "RefundableDamageDeposit",
              "Commission",
              "GenericDiscount",
              "TravelInsurance",
              "CancellationFee",
              "ExtraPersonFee",
              "ProcessingFee",
              "ServiceFee",
              "InfoOnly",
              "Damages",
              "Deposit",
              "RentAdjustment",
              "Deferment",
              "TrustAccount",
              "UpsellFee",
              "LinenFee",
              "ResortFee",
              "CityTax",
              "DestinationFee",
              "GovernmentTax",
              "LocalCouncilTax",
              "BasicPromotion",
              "CouponPromotion",
              "EarlyBookerPromotion",
              "LastMinutePromotion",
              "BusinessBookerPromotion",
              "MobileRatePromotion",
              "GeoRatePromotion"
            ],
            "type": "string",
            "description": "Statement Type (Rent or Fee)"
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Total of this Statement's line",
            "format": "double"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "isMandatory": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "Statement Detail"
      },
      "DepositStatement": {
        "type": "object",
        "properties": {
          "depositLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatementDetail"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScheduledTransaction": {
        "type": "object",
        "properties": {
          "accountingType": {
            "enum": [
              "Unknown",
              "Rent",
              "CleaningFee",
              "MarketingFee",
              "SalesTax",
              "OtherFee",
              "DamageWaiver",
              "Maintenance",
              "Installment",
              "RefundableDamageDeposit",
              "Commission",
              "GenericDiscount",
              "TravelInsurance",
              "CancellationFee",
              "ExtraPersonFee",
              "ProcessingFee",
              "ServiceFee",
              "InfoOnly",
              "Damages",
              "Deposit",
              "RentAdjustment",
              "Deferment",
              "TrustAccount",
              "UpsellFee",
              "LinenFee",
              "ResortFee",
              "CityTax",
              "DestinationFee",
              "GovernmentTax",
              "LocalCouncilTax",
              "BasicPromotion",
              "CouponPromotion",
              "EarlyBookerPromotion",
              "LastMinutePromotion",
              "BusinessBookerPromotion",
              "MobileRatePromotion",
              "GeoRatePromotion"
            ],
            "type": "string",
            "description": "AccountingType",
            "nullable": true
          },
          "paymentMethodType": {
            "enum": [
              "Unknown",
              "CreditCard",
              "Cash",
              "Check",
              "Other",
              "MoneyOrder",
              "PayPal",
              "WireTransfer"
            ],
            "type": "string",
            "description": "PaymentMethodType",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Scheduled Amount",
            "format": "double"
          },
          "scheduledDate": {
            "type": "string",
            "description": "Scheduled Date",
            "format": "date-time"
          },
          "refundDate": {
            "type": "string",
            "description": "Refund date",
            "format": "date-time",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description for the transaction",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Scheduled Transaction"
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "Time",
              "Expense",
              "Generic",
              "Stock",
              "Unknown",
              "Service",
              "Fee",
              "Tax",
              "Discount",
              "CCProcessingFee",
              "Check",
              "CreditCard",
              "Cash",
              "Payment",
              "Receipt",
              "Commission",
              "Purchase",
              "Markup",
              "Adjustment",
              "CheckFee",
              "CashFee",
              "PaymentInvoice",
              "Invoice",
              "BalanceAdjustment",
              "Deposit",
              "Deferment",
              "Promotion",
              "Unspecified"
            ],
            "type": "string",
            "description": "Transaction Type"
          },
          "accountingCategory": {
            "enum": [
              "Unknown",
              "Payment",
              "ReceiptLineItem"
            ],
            "type": "string",
            "description": "Accounting Category"
          },
          "paymentMethodType": {
            "enum": [
              "Unknown",
              "CreditCard",
              "Cash",
              "Check",
              "Other",
              "MoneyOrder",
              "PayPal",
              "WireTransfer"
            ],
            "type": "string",
            "description": "Payment Method Type"
          },
          "accountingType": {
            "enum": [
              "Unknown",
              "Rent",
              "CleaningFee",
              "MarketingFee",
              "SalesTax",
              "OtherFee",
              "DamageWaiver",
              "Maintenance",
              "Installment",
              "RefundableDamageDeposit",
              "Commission",
              "GenericDiscount",
              "TravelInsurance",
              "CancellationFee",
              "ExtraPersonFee",
              "ProcessingFee",
              "ServiceFee",
              "InfoOnly",
              "Damages",
              "Deposit",
              "RentAdjustment",
              "Deferment",
              "TrustAccount",
              "UpsellFee",
              "LinenFee",
              "ResortFee",
              "CityTax",
              "DestinationFee",
              "GovernmentTax",
              "LocalCouncilTax",
              "BasicPromotion",
              "CouponPromotion",
              "EarlyBookerPromotion",
              "LastMinutePromotion",
              "BusinessBookerPromotion",
              "MobileRatePromotion",
              "GeoRatePromotion"
            ],
            "type": "string",
            "description": "Accounting Type"
          },
          "id": {
            "type": "integer",
            "description": "Transaction ID",
            "format": "int32"
          },
          "amount": {
            "type": "number",
            "description": "Safe Amount",
            "format": "double",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "Safe Quantity",
            "format": "double",
            "nullable": true
          },
          "total": {
            "type": "number",
            "description": "Total",
            "format": "double"
          },
          "transactionDate": {
            "type": "string",
            "description": "Date of the Transaction. By default, current day",
            "format": "date-time",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description for the Transaction",
            "nullable": true
          },
          "scheduledDate": {
            "type": "string",
            "description": "Due on date",
            "format": "date-time",
            "nullable": true
          },
          "paymentStatus": {
            "enum": [
              "Unknown",
              "Failure",
              "Scheduled",
              "Success",
              "Initiated"
            ],
            "type": "string",
            "description": "Payment Status"
          },
          "scheduleTransactionID": {
            "type": "integer",
            "description": "If the payment is coming from a schedule",
            "format": "int32",
            "nullable": true
          },
          "isPastDue": {
            "type": "boolean",
            "description": "If the payment is past due according to the local date"
          }
        },
        "additionalProperties": false
      },
      "PaymentSchedule": {
        "type": "object",
        "properties": {
          "scheduledAdvancePayment": {
            "$ref": "#/components/schemas/ScheduledTransaction"
          },
          "scheduledRemainderPayment": {
            "$ref": "#/components/schemas/ScheduledTransaction"
          },
          "daysPriorToCheckInToCollectRemainder": {
            "type": "integer",
            "description": "How many days before the check-in a remainder should be sent",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "CancellationPolicy": {
        "type": "object",
        "properties": {
          "isAdvancePaymentRefundable": {
            "type": "boolean",
            "description": ""
          },
          "deadline": {
            "type": "string",
            "description": "",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "CreditCardResponse": {
        "type": "object",
        "properties": {
          "cardholderName": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "avsAddress": {
            "type": "string",
            "nullable": true
          },
          "avsCity": {
            "type": "string",
            "nullable": true
          },
          "avsState": {
            "type": "string",
            "nullable": true
          },
          "avsZip": {
            "type": "string",
            "nullable": true
          },
          "avsCountry": {
            "type": "string",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "enum": [
              "NotSet",
              "Visa",
              "MasterCard",
              "AmericanExpress",
              "Discover",
              "Other",
              "DinersClub",
              "Offline"
            ],
            "type": "string"
          },
          "status": {
            "enum": [
              "Unknown",
              "Valid",
              "MarkAsInvalid"
            ],
            "type": "string"
          },
          "gatewaySpecificFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentGateway": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Payment Gateway ID",
            "format": "int32"
          },
          "externalID": {
            "type": "string",
            "description": "The external identifier of the Payment Gateway",
            "nullable": true
          },
          "processorType": {
            "enum": [
              "Unknown",
              "AuthorizeNet",
              "SagePay",
              "VacationRentalPayment",
              "VacationRentalPaymentInternational",
              "PayPal",
              "PayPalPro",
              "Braspag",
              "Braspag2",
              "Braintree",
              "Spreedly",
              "KigoPay",
              "Forte"
            ],
            "type": "string",
            "description": "The type of payment gateway"
          },
          "credentials": {
            "type": "string",
            "description": "Payment Gateway credentials",
            "nullable": true
          },
          "encryptionVersion": {
            "type": "integer",
            "description": "The encryption key version used to encrypt the credentials",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Payment Gateway class"
      },
      "Booking": {
        "type": "object",
        "properties": {
          "listingID": {
            "type": "integer",
            "description": "Listing ID",
            "format": "int32",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Location Booking ID",
            "format": "int32"
          },
          "externalKey": {
            "type": "string",
            "description": "KVRS ID for a Booking",
            "nullable": true
          },
          "accountID": {
            "type": "integer",
            "description": "Account ID",
            "format": "int32"
          },
          "locationID": {
            "type": "integer",
            "description": "Location ID",
            "format": "int32"
          },
          "reservationNumber": {
            "type": "string",
            "description": "Reservation Number",
            "nullable": true
          },
          "confirmationNumber": {
            "type": "string",
            "description": "Confirmation Number",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Notes",
            "nullable": true
          },
          "renter": {
            "$ref": "#/components/schemas/Person"
          },
          "totalAmount": {
            "type": "number",
            "description": "Total Amount",
            "format": "double",
            "nullable": true
          },
          "paidAmount": {
            "type": "number",
            "description": "Paid Amount",
            "format": "double",
            "nullable": true
          },
          "currency": {
            "enum": [
              "Unknown",
              "USD",
              "AUD",
              "BRL",
              "CAD",
              "CNY",
              "DKK",
              "EUR",
              "HKD",
              "INR",
              "JPY",
              "MYR",
              "MXN",
              "NZD",
              "NOK",
              "SGD",
              "ZAR",
              "KRW",
              "LKR",
              "SEK",
              "CHF",
              "TWD",
              "THB",
              "GBP",
              "EGP",
              "XPF",
              "AED",
              "ANG",
              "ARS",
              "BGN",
              "BHD",
              "BOB",
              "BTN",
              "BZD",
              "CLP",
              "COP",
              "CRC",
              "CZK",
              "GNF",
              "GTQ",
              "GYD",
              "HNL",
              "HRK",
              "HUF",
              "IDR",
              "ILS",
              "ISK",
              "JOD",
              "KHR",
              "KWD",
              "KZT",
              "LAK",
              "LBP",
              "MAD",
              "MOP",
              "NIO",
              "OMR",
              "PAB",
              "PEN",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RUB",
              "SAR",
              "SRD",
              "TND",
              "TRY",
              "UAH",
              "UYU",
              "VEF",
              "VND",
              "AZN"
            ],
            "type": "string",
            "description": "Currency used for the Statements and Payments"
          },
          "bookedOnDate": {
            "type": "string",
            "description": "Booking Date (UTC)",
            "format": "date-time"
          },
          "checkInDate": {
            "type": "string",
            "description": "Check In Date",
            "format": "date"
          },
          "checkOutDate": {
            "type": "string",
            "description": "Check Out Date",
            "format": "date"
          },
          "type": {
            "enum": [
              "Unknown",
              "Internet",
              "InHouse",
              "Agent",
              "Owner",
              "Block",
              "PMS",
              "Standard"
            ],
            "type": "string",
            "description": "Type ID"
          },
          "status": {
            "enum": [
              "Unknown",
              "Canceled",
              "Held",
              "PendingConfirmation",
              "Confirmed",
              "CheckedIn",
              "CheckedOut",
              "Quote",
              "Processing",
              "RequestToBook",
              "Accepted",
              "Overbooking",
              "Failed"
            ],
            "type": "string",
            "description": "Status ID"
          },
          "paymentStatus": {
            "enum": [
              "NotApplicable",
              "Unpaid",
              "PartiallyPaid",
              "Paid"
            ],
            "type": "string",
            "description": "Status ID"
          },
          "shortCode": {
            "enum": [
              "None",
              "EarlyCheckIn",
              "PreCheckOutInspection",
              "ContractOverride",
              "NoContract",
              "UpdateSpecialRequests"
            ],
            "type": "string",
            "description": "Short Code ID"
          },
          "specialNeeds": {
            "type": "string",
            "description": "Special Needs",
            "nullable": true
          },
          "numAdults": {
            "type": "integer",
            "description": "Number of Adults",
            "format": "int32"
          },
          "numChildren": {
            "type": "integer",
            "description": "Number of Children",
            "format": "int32",
            "nullable": true
          },
          "originatingChannelConnectionID": {
            "type": "integer",
            "description": "ChannelConnection ID that created the booking",
            "format": "int32",
            "nullable": true
          },
          "statement": {
            "$ref": "#/components/schemas/GuestStatement"
          },
          "deposits": {
            "$ref": "#/components/schemas/DepositStatement"
          },
          "depositSchedule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduledTransaction"
            },
            "description": "A collection of refundable payments",
            "nullable": true
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "description": "Paid Transactions and Scheduled Payments",
            "nullable": true
          },
          "acceptedPaymentMethods": {
            "type": "array",
            "items": {
              "enum": [
                "NotSet",
                "Visa",
                "MasterCard",
                "AmericanExpress",
                "Discover",
                "Other",
                "DinersClub",
                "Offline"
              ],
              "type": "string"
            },
            "description": "Accepted Credit Card Brands",
            "nullable": true
          },
          "paymentSchedule": {
            "$ref": "#/components/schemas/PaymentSchedule"
          },
          "cancellationPolicy": {
            "$ref": "#/components/schemas/CancellationPolicy"
          },
          "cancellationDate": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "cancellationSource": {
            "enum": [
              "System",
              "Api"
            ],
            "type": "string",
            "description": "",
            "nullable": true
          },
          "cancelledByRole": {
            "enum": [
              "Unknown",
              "Channel",
              "Host",
              "Guest",
              "Kigo"
            ],
            "type": "string",
            "description": "",
            "nullable": true
          },
          "cancelledByUserID": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "cancellationReason": {
            "enum": [
              "Unknown",
              "Denied",
              "GuestInitiated",
              "Mistake",
              "BreachOfPolicy",
              "Fraud",
              "InvalidCreditCard",
              "NoShowWithRefund",
              "NoShowWithoutRefund"
            ],
            "type": "string",
            "description": "",
            "nullable": true
          },
          "rentalAgreementUrl": {
            "type": "string",
            "description": "Terms And Conditions Url (Taken from Contract Plan)",
            "nullable": true
          },
          "channelCollected": {
            "type": "boolean",
            "description": "Tells if the channel will process the payments"
          },
          "paymentCollectionMode": {
            "enum": [
              "PmcCollect",
              "VirtualCc",
              "ChannelCollect",
              "PmcOfflineCollect"
            ],
            "type": "string",
            "description": "Defines how the booking will be paid"
          },
          "pastDueScheduledInstallmentAmount": {
            "type": "number",
            "description": "Sum Pending Past Scheduled Installment Payments",
            "format": "double"
          },
          "pastDueInitiatedPayments": {
            "type": "number",
            "description": "Sum of Initiated Payments",
            "format": "double"
          },
          "pastDueScheduledDepositAmount": {
            "type": "number",
            "description": "Sum Pending Past Scheduled Deposit Payment",
            "format": "double"
          },
          "pastDueScheduledAmount": {
            "type": "number",
            "description": "Sum All Pending Past Scheduled Payments",
            "format": "double",
            "readOnly": true
          },
          "creditCard": {
            "$ref": "#/components/schemas/CreditCardResponse"
          },
          "bookingSourceCode": {
            "type": "string",
            "description": "Booking Source (code)",
            "nullable": true
          },
          "pointOfSaleCode": {
            "type": "string",
            "description": "Point of Sale (code)",
            "nullable": true
          },
          "paymentGateway": {
            "$ref": "#/components/schemas/PaymentGateway"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "BookingResource": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Booking"
          }
        },
        "additionalProperties": false,
        "description": "Resource model for GET/DELETE scenarios"
      },
      "ScheduledTransactionRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Scheduled Amount",
            "format": "double"
          },
          "scheduledDate": {
            "type": "string",
            "description": "If PaymentCollectionMode is VirtualCC then the money will be released on this date.\r\nSo we have to schedule the transaction to this date or fall back to the payment plan if it's not provided.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Scheduled Transaction"
      },
      "PaymentScheduleRequest": {
        "type": "object",
        "properties": {
          "scheduledAdvancePayment": {
            "$ref": "#/components/schemas/ScheduledTransactionRequest"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "PutBookingRequest": {
        "required": [
          "checkInDate",
          "checkOutDate",
          "numAdults"
        ],
        "type": "object",
        "properties": {
          "checkInDate": {
            "type": "string",
            "description": "Check In Date",
            "format": "date"
          },
          "checkOutDate": {
            "type": "string",
            "description": "Check Out Date",
            "format": "date"
          },
          "checkInMinutesFromMidnight": {
            "maximum": 1439,
            "minimum": 0,
            "type": "integer",
            "description": "Check In Minutes From Midnight",
            "format": "int32",
            "nullable": true
          },
          "checkOutMinutesFromMidnight": {
            "maximum": 1439,
            "minimum": 0,
            "type": "integer",
            "description": "Check Out Minutes From Midnight",
            "format": "int32",
            "nullable": true
          },
          "numAdults": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Number of adults",
            "format": "int32"
          },
          "numChildren": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Number of children",
            "format": "int32",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Notes\r\nIf passed, the system will overwrite the existing value.\r\nIf null, the system will keep the existing value.",
            "nullable": true
          },
          "specialNeeds": {
            "type": "string",
            "description": "Special Needs\r\nIf passed, the system will overwrite the existing value.\r\nIf null, the system will keep the existing value.",
            "nullable": true
          },
          "listingID": {
            "type": "integer",
            "description": "Listing ID\r\nIf passed, the system will be forced to use this.\r\nIf null, the system will use the current listing.",
            "format": "int32",
            "nullable": true
          },
          "locationID": {
            "type": "integer",
            "description": "Location ID.\r\nIf passed, the system will be forced to use this.\r\nIf null, the system will find the first available unit, giving preference to the current one but can end up in change of unit.",
            "format": "int32",
            "nullable": true
          },
          "totalAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "renter": {
            "$ref": "#/components/schemas/Person"
          },
          "paymentCollectionMode": {
            "enum": [
              "PmcCollect",
              "VirtualCc",
              "ChannelCollect",
              "PmcOfflineCollect"
            ],
            "type": "string",
            "nullable": true
          },
          "paymentCollectionScheduledDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "paymentSchedule": {
            "$ref": "#/components/schemas/PaymentScheduleRequest"
          }
        },
        "additionalProperties": false
      },
      "PutBookingResponse": {
        "type": "object",
        "properties": {
          "errorType": {
            "enum": [
              "Booking",
              "Setup",
              "Constraint",
              "Quote"
            ],
            "type": "string",
            "description": "Error Type",
            "nullable": true
          },
          "bookingError": {
            "enum": [
              "LocationNotAvailable",
              "MissingCreditCard",
              "CoreAPIError",
              "DuplicatedExternalBookingID",
              "CreditCardProcessingFailure",
              "PropertyDoesNotExist",
              "InvalidRenter"
            ],
            "type": "string",
            "description": "Booking Error Code",
            "nullable": true
          },
          "setupError": {
            "enum": [
              "InvalidListing",
              "StaySettingsNotSet",
              "BookingWindowNotSet",
              "MaxStayNotSet",
              "PriceNotAvailable",
              "ClosedToArrivalOrDeparture",
              "OutOfSunriseSunset",
              "ConnectionSetupError"
            ],
            "type": "string",
            "description": "Setup Error Code",
            "nullable": true
          },
          "constraintError": {
            "enum": [
              "NightNotAvailable",
              "MinStayNotMet",
              "MinAdvanceNoticeNotMet",
              "OutsideOfBookingWindow",
              "MaxStayExceeded",
              "MaxGuestsExceeded",
              "BlockOutNight",
              "CutOffTimeNotMet",
              "PropertyClosed"
            ],
            "type": "string",
            "description": "Constraint Error Code",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "description": "Error Message",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/Booking"
          }
        },
        "additionalProperties": false,
        "description": "Response to PUT /bookings (date changes)"
      },
      "PostPersonRequest": {
        "required": [
          "address",
          "fullName"
        ],
        "type": "object",
        "properties": {
          "fullName": {
            "maxLength": 250,
            "type": "string",
            "description": "Full Name"
          },
          "email": {
            "maxLength": 70,
            "type": "string",
            "description": "Email",
            "format": "email",
            "nullable": true
          },
          "phone": {
            "maxLength": 20,
            "type": "string",
            "description": "Phone",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        },
        "additionalProperties": false
      },
      "CreditCard": {
        "required": [
          "avsCountry",
          "cardholderName",
          "expirationDate",
          "number"
        ],
        "type": "object",
        "properties": {
          "cardholderName": {
            "maxLength": 200,
            "type": "string"
          },
          "number": {
            "maxLength": 200,
            "type": "string"
          },
          "avsAddress": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "avsCity": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "avsState": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "avsZip": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "avsCountry": {
            "type": "string"
          },
          "expirationDate": {
            "type": "string"
          },
          "cvv": {
            "maxLength": 4,
            "type": "string",
            "nullable": true
          },
          "type": {
            "enum": [
              "NotSet",
              "Visa",
              "MasterCard",
              "AmericanExpress",
              "Discover",
              "Other",
              "DinersClub",
              "Offline"
            ],
            "type": "string"
          },
          "threeDSecureData": {
            "type": "object",
            "additionalProperties": false,
            "description": "Holds the pre-authorized ThreeDSecure data in the case of a\r\n\"passthrough\" 3DS scenario (where the 3DS authorization already occurred in the UI, for example, at the Online Travel Agency website).\r\n            \r\n3DS1 Format:\r\n{\r\n    \"eci\":\"\",\r\n    \"cavv\":\"\",\r\n    \"dsTransID\":\"\",\r\n    \"threeDSVersion\":\"\"\r\n}\r\n            \r\n3DS2 Format:\r\n{\r\n    \"eci\":\"\",\r\n    \"cavv\":\"\",\r\n    \"xid\":\"\",\r\n    \"threeDSVersion\":\"\",\r\n    \"exceptionType:\"\"\r\n}\r\n             \r\n\"eci\": Electronic Commerce Indicator. Provides a code that indicates whether the transaction was processed electronically.\r\n            \r\nPossible \"eci\" codes:\r\n             \r\n\"02\" or \"05\" - Fully authenticated transaction\r\n             \r\n\"01\" or \"06\" - Attempted authentication transaction\r\n             \r\n\"00\" or \"07\" - Non 3D Secure transaction\r\n             \r\n\"cavv\": The CAVV is used to confirm that an authentication, or proof of an attempted authentication, was conducted.\r\n             \r\n\"dsTransID\": 3DS1 only. The transaction identifier assigned by the Directory Server (base64 encoded, 20 bytes in a decoded form).\r\n             \r\n\"xid\": 3DS2 only. The transaction identifier assigned by the Directory Server (base64 encoded, 20 bytes in a decoded form).\r\n            \r\n\"threeDSVersion\": provides the 3-D Secure version used to process the transaction\r\n             \r\n\"exceptionType\": 3DS2 only. Provides the reason why 3DS2 authentication was bypassed",
            "nullable": true
          },
          "gatewaySpecificFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostBookingRequest": {
        "required": [
          "checkInDate",
          "checkOutDate",
          "listingID",
          "numAdults",
          "renter",
          "totalAmount"
        ],
        "type": "object",
        "properties": {
          "listingID": {
            "type": "integer",
            "description": "Listing ID",
            "format": "int32"
          },
          "totalAmount": {
            "minimum": 1,
            "type": "number",
            "description": "Total Amount",
            "format": "double"
          },
          "checkInDate": {
            "type": "string",
            "description": "Check In Date",
            "format": "date"
          },
          "checkOutDate": {
            "type": "string",
            "description": "Check Out Date",
            "format": "date"
          },
          "renter": {
            "$ref": "#/components/schemas/PostPersonRequest"
          },
          "numAdults": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Number of Adults",
            "format": "int32"
          },
          "numChildren": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Number of Children",
            "format": "int32",
            "nullable": true
          },
          "paymentPlanGuid": {
            "type": "string",
            "description": "Payment Plan Guid",
            "format": "uuid",
            "nullable": true
          },
          "locationID": {
            "type": "integer",
            "description": "Location ID. If passed, the system will be forced to use this.",
            "format": "int32",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Notes",
            "nullable": true
          },
          "specialNeeds": {
            "type": "string",
            "description": "Special Needs",
            "nullable": true
          },
          "externalBookingID": {
            "type": "string",
            "description": "External identifier set by the Channel (KVRS AltID)",
            "nullable": true
          },
          "creditCard": {
            "$ref": "#/components/schemas/CreditCard"
          },
          "channelCollected": {
            "type": "boolean",
            "description": "Tells if the channel will process the payments"
          },
          "pointOfSaleCode": {
            "type": "string",
            "description": "Point of Sale (code)",
            "nullable": true
          },
          "paymentCollectionMode": {
            "enum": [
              "PmcCollect",
              "VirtualCc",
              "ChannelCollect",
              "PmcOfflineCollect"
            ],
            "type": "string",
            "description": "Defines how the booking will be paid",
            "nullable": true
          },
          "paymentCollectionScheduledDate": {
            "type": "string",
            "description": "If PaymentCollectionMode is VirtualCC then the money will be released on this date.\r\nSo we have to schedule the transaction to this date or fall back to the payment plan if it's not provided.",
            "format": "date-time",
            "nullable": true
          },
          "paymentSchedule": {
            "$ref": "#/components/schemas/PaymentScheduleRequest"
          }
        },
        "additionalProperties": false,
        "description": "Api Model for posting a new booking without a previous quote (if the channel connection allows it)"
      },
      "CreditCardAuthorizationError": {
        "type": "object",
        "properties": {
          "gatewayErrorCode": {
            "type": "string",
            "description": "The original message from the payment gateway",
            "nullable": true
          },
          "gatewayErrorMessage": {
            "type": "string",
            "description": "The original error message from the payment gateway",
            "nullable": true
          },
          "code": {
            "enum": [
              "CreditCardDeclined",
              "CreditCardExpired",
              "InvalidStateCode",
              "InvalidCountryCode",
              "InvalidZipCode",
              "MaximumAmountExceededForThisProcessor",
              "MinimumAmountNotMetForThisProcessor",
              "InvalidReferenceTransaction",
              "CannotRefundThisPayment",
              "CannotReverseThisPayment",
              "InvalidPaymentAmount",
              "InvalidCardType",
              "EmailIncorrect",
              "CurrencyCodeMismatch",
              "InvalidCredentials",
              "TokenDoesNotExist",
              "CouldNotIssueRefund",
              "NotAllRequiredFieldsFound",
              "InvalidArrivalDate",
              "InvalidDepartureDate",
              "InvalidRefundAmount",
              "CardTypeNotAccepted",
              "InvalidToken",
              "InvalidCharacterSubmitted",
              "InvalidCurrency",
              "RequestTimedOut",
              "InvalidParameter",
              "InvalidConfiguration",
              "InvalidCVV",
              "InvalidCardNumber",
              "ExternalServerError",
              "TransactionCannotBeProcessed",
              "InvalidInvoice",
              "InvalidBillingAddress",
              "DuplicateTransactionSubmitted",
              "InvalidSettlementAmount",
              "PartialReversalsNotSupported",
              "InvalidAuthenticationAmount",
              "InvalidRequest",
              "InvalidCardHolderName",
              "CurrencyNotSpecified",
              "CurrencyWrongFormat",
              "ExpirationNotSpecified",
              "NameOnCardNotSpecified",
              "LastNameOnCardNotSpecified",
              "CardNumberNotSpecified",
              "InvalidMethod",
              "ProcessorNotSet",
              "UnmappedError",
              "NoStatement",
              "NoStatementLines",
              "CurrencyDifferentThanSolution",
              "StatementAmount0",
              "CurrencyDifferentThanStatement",
              "NoCreditCardProcessor",
              "NoCreditCardAvailable",
              "ProcessorOnlySupportsDoCapture",
              "BookingNotFound",
              "GatewayConnectionFailed"
            ],
            "type": "string",
            "description": "Unified error code (flattened Core API, KVRS and Pro errors) constructed by Kigo",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Unified error message constructed by Kigo",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreditCardAuthorizationResponse": {
        "type": "object",
        "properties": {
          "successful": {
            "type": "boolean"
          },
          "error": {
            "$ref": "#/components/schemas/CreditCardAuthorizationError"
          },
          "authCode": {
            "type": "string",
            "nullable": true
          },
          "creditCard": {
            "$ref": "#/components/schemas/CreditCardResponse"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "PostBookingResponse": {
        "type": "object",
        "properties": {
          "errorType": {
            "enum": [
              "Booking",
              "Setup",
              "Constraint",
              "Quote"
            ],
            "type": "string",
            "description": "Error Type",
            "nullable": true
          },
          "bookingError": {
            "enum": [
              "LocationNotAvailable",
              "MissingCreditCard",
              "CoreAPIError",
              "DuplicatedExternalBookingID",
              "CreditCardProcessingFailure",
              "PropertyDoesNotExist",
              "InvalidRenter"
            ],
            "type": "string",
            "description": "Booking Error Code",
            "nullable": true
          },
          "setupError": {
            "enum": [
              "InvalidListing",
              "StaySettingsNotSet",
              "BookingWindowNotSet",
              "MaxStayNotSet",
              "PriceNotAvailable",
              "ClosedToArrivalOrDeparture",
              "OutOfSunriseSunset",
              "ConnectionSetupError"
            ],
            "type": "string",
            "description": "Setup Error Code",
            "nullable": true
          },
          "constraintError": {
            "enum": [
              "NightNotAvailable",
              "MinStayNotMet",
              "MinAdvanceNoticeNotMet",
              "OutsideOfBookingWindow",
              "MaxStayExceeded",
              "MaxGuestsExceeded",
              "BlockOutNight",
              "CutOffTimeNotMet",
              "PropertyClosed"
            ],
            "type": "string",
            "description": "Constraint Error Code",
            "nullable": true
          },
          "quoteError": {
            "enum": [
              "Invalid",
              "AlreadyUsed",
              "Expired",
              "InvalidListing",
              "LocationNotFound",
              "PlanNotFound",
              "PriceNotAvailable",
              "InvalidRatePlans",
              "InvalidContract",
              "InvalidFees"
            ],
            "type": "string",
            "description": "Quote Error Code",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "description": "Error Message",
            "nullable": true
          },
          "paymentPlanGuid": {
            "type": "string",
            "description": "Payment Plan Guid",
            "format": "uuid",
            "nullable": true
          },
          "zeroDollarAuthorizationStatus": {
            "enum": [
              "Skipped",
              "Success",
              "Failure",
              "NoCreditCard",
              "NotNeeded"
            ],
            "type": "string",
            "description": "Card Authorization Status",
            "nullable": true
          },
          "zeroDollarAuthorizationResponse": {
            "$ref": "#/components/schemas/CreditCardAuthorizationResponse"
          },
          "advancePaymentStatus": {
            "enum": [
              "Skipped",
              "Success",
              "Failure",
              "NoCreditCard",
              "NotNeeded"
            ],
            "type": "string",
            "description": "Advance Payment Status",
            "nullable": true
          },
          "advancePaymentResponse": {
            "$ref": "#/components/schemas/CreditCardAuthorizationResponse"
          },
          "value": {
            "$ref": "#/components/schemas/Booking"
          }
        },
        "additionalProperties": false,
        "description": "Response to POST /bookings and POST /quotes/{guid}/book actions"
      },
      "PaymentResponse": {
        "type": "object",
        "properties": {
          "payment": {
            "$ref": "#/components/schemas/Transaction"
          },
          "creditCardPaymentResponse": {
            "$ref": "#/components/schemas/CreditCardAuthorizationResponse"
          }
        },
        "additionalProperties": false,
        "description": "PaymentResponse"
      },
      "PostBookingCreditCardResponse": {
        "type": "object",
        "properties": {
          "addedPayments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentResponse"
            },
            "description": "Payments that were processed only for this request\r\nWe stop at the first process error, so this will include all successful and at most 1 failed payment attempt",
            "nullable": true
          },
          "pastDueScheduledInstallmentAmount": {
            "type": "number",
            "description": "Sum of Pending Past Scheduled Installment Payments",
            "format": "double"
          },
          "pastDueInitiatedPayments": {
            "type": "number",
            "description": "Sum of Initiated Payments",
            "format": "double"
          },
          "pastDueScheduledDepositAmount": {
            "type": "number",
            "description": "Sum of Pending Past Schedule Deposit Payments",
            "format": "double"
          },
          "pastDueScheduledAmount": {
            "type": "number",
            "description": "Sum All Pending Past Scheduled Payments",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "PostBookingCreditCardResponse"
      },
      "BookingDiffOutput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Booking ID",
            "format": "int32"
          },
          "externalID": {
            "type": "string",
            "description": "External ID (Represents the Primary Key of KVRS)",
            "nullable": true
          },
          "status": {
            "enum": [
              "Unknown",
              "Canceled",
              "Held",
              "PendingConfirmation",
              "Confirmed",
              "CheckedIn",
              "CheckedOut",
              "Quote",
              "Processing",
              "RequestToBook",
              "Accepted",
              "Overbooking",
              "Failed"
            ],
            "type": "string",
            "description": "Booking Status"
          },
          "lastUpdatedDate": {
            "type": "string",
            "description": "Last time the Booking was modified",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "BookingDiffOutputListResourceList": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingDiffOutput"
            },
            "nullable": true
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BookingEvent": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CancellationPolicyDto": {
        "type": "object",
        "properties": {
          "isAdvancePaymentRefundable": {
            "type": "boolean"
          },
          "deadline": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "GetBookingVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "externalKey": {
            "type": "string",
            "nullable": true
          },
          "confirmationNumber": {
            "type": "string",
            "nullable": true
          },
          "accountID": {
            "type": "integer",
            "format": "int32"
          },
          "propertyID": {
            "type": "integer",
            "format": "int32"
          },
          "unitID": {
            "type": "integer",
            "format": "int32"
          },
          "bookingSourceCode": {
            "type": "string",
            "nullable": true
          },
          "pointOfSaleCode": {
            "type": "string",
            "nullable": true
          },
          "shortCode": {
            "type": "string",
            "nullable": true
          },
          "bookedOnDate": {
            "type": "string",
            "format": "date-time"
          },
          "checkInDate": {
            "type": "string",
            "format": "date"
          },
          "checkOutDate": {
            "type": "string",
            "format": "date"
          },
          "type": {
            "enum": [
              "Unknown",
              "Internet",
              "InHouse",
              "Agent",
              "Owner",
              "Block",
              "PMS",
              "Standard"
            ],
            "type": "string",
            "description": "Keep in sync with VRX.Prod.Entities LocationBooking Types"
          },
          "numAdults": {
            "type": "integer",
            "format": "int32"
          },
          "numChildren": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "enum": [
              "Unknown",
              "Canceled",
              "Held",
              "PendingConfirmation",
              "Confirmed",
              "CheckedIn",
              "CheckedOut",
              "Quote",
              "Processing",
              "RequestToBook",
              "Accepted",
              "Overbooking",
              "Failed"
            ],
            "type": "string",
            "description": "Keep in sync with VRX.Prod.Entities.LocationBooking.Statuses\r\nCommented statuses are not used in CM"
          },
          "cancellationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cancellationSource": {
            "enum": [
              "System",
              "Api"
            ],
            "type": "string",
            "nullable": true
          },
          "cancelledByRole": {
            "enum": [
              "Unknown",
              "Channel",
              "Host",
              "Guest",
              "Kigo"
            ],
            "type": "string",
            "nullable": true
          },
          "cancelledByUserID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "cancellationReason": {
            "enum": [
              "Unknown",
              "Denied",
              "GuestInitiated",
              "Mistake",
              "BreachOfPolicy",
              "Fraud",
              "InvalidCreditCard",
              "NoShowWithRefund",
              "NoShowWithoutRefund"
            ],
            "type": "string",
            "nullable": true
          },
          "cancellationPolicy": {
            "$ref": "#/components/schemas/CancellationPolicyDto"
          },
          "totalAmount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "enum": [
              "Unknown",
              "USD",
              "AUD",
              "BRL",
              "CAD",
              "CNY",
              "DKK",
              "EUR",
              "HKD",
              "INR",
              "JPY",
              "MYR",
              "MXN",
              "NZD",
              "NOK",
              "SGD",
              "ZAR",
              "KRW",
              "LKR",
              "SEK",
              "CHF",
              "TWD",
              "THB",
              "GBP",
              "EGP",
              "XPF",
              "AED",
              "ANG",
              "ARS",
              "BGN",
              "BHD",
              "BOB",
              "BTN",
              "BZD",
              "CLP",
              "COP",
              "CRC",
              "CZK",
              "GNF",
              "GTQ",
              "GYD",
              "HNL",
              "HRK",
              "HUF",
              "IDR",
              "ILS",
              "ISK",
              "JOD",
              "KHR",
              "KWD",
              "KZT",
              "LAK",
              "LBP",
              "MAD",
              "MOP",
              "NIO",
              "OMR",
              "PAB",
              "PEN",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RUB",
              "SAR",
              "SRD",
              "TND",
              "TRY",
              "UAH",
              "UYU",
              "VEF",
              "VND",
              "AZN"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Account": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Account Name",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "nullable": true
          },
          "supportEmail": {
            "type": "string",
            "description": "General support email",
            "nullable": true
          },
          "supportPhone": {
            "type": "string",
            "description": "General support phone",
            "nullable": true
          },
          "phoneCountryCode": {
            "type": "string",
            "description": "Phone country code",
            "nullable": true
          },
          "businessRegistration": {
            "type": "string",
            "description": "Business Registration Number",
            "nullable": true
          },
          "merchantName": {
            "type": "string",
            "description": "Merchant Name",
            "nullable": true
          },
          "currency": {
            "enum": [
              "Unknown",
              "USD",
              "AUD",
              "BRL",
              "CAD",
              "CNY",
              "DKK",
              "EUR",
              "HKD",
              "INR",
              "JPY",
              "MYR",
              "MXN",
              "NZD",
              "NOK",
              "SGD",
              "ZAR",
              "KRW",
              "LKR",
              "SEK",
              "CHF",
              "TWD",
              "THB",
              "GBP",
              "EGP",
              "XPF",
              "AED",
              "ANG",
              "ARS",
              "BGN",
              "BHD",
              "BOB",
              "BTN",
              "BZD",
              "CLP",
              "COP",
              "CRC",
              "CZK",
              "GNF",
              "GTQ",
              "GYD",
              "HNL",
              "HRK",
              "HUF",
              "IDR",
              "ILS",
              "ISK",
              "JOD",
              "KHR",
              "KWD",
              "KZT",
              "LAK",
              "LBP",
              "MAD",
              "MOP",
              "NIO",
              "OMR",
              "PAB",
              "PEN",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RUB",
              "SAR",
              "SRD",
              "TND",
              "TRY",
              "UAH",
              "UYU",
              "VEF",
              "VND",
              "AZN"
            ],
            "type": "string",
            "description": "Currency",
            "nullable": true
          },
          "companyInformation": {
            "type": "string",
            "description": "Htmlencoded text",
            "nullable": true
          },
          "currencySymbol": {
            "type": "string",
            "description": "Currency Symbol ($, £, ...)",
            "nullable": true
          },
          "primaryLocale": {
            "type": "string",
            "description": "en-US, it-IT, ...",
            "nullable": true
          },
          "supportedLocales": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "en-US, it-IT, ...",
            "nullable": true
          },
          "acceptedPaymentMethods": {
            "type": "array",
            "items": {
              "enum": [
                "NotSet",
                "Visa",
                "MasterCard",
                "AmericanExpress",
                "Discover",
                "Other",
                "DinersClub",
                "Offline"
              ],
              "type": "string"
            },
            "description": "Credit card brands which the PMC accepts for booking payment",
            "nullable": true
          },
          "legalBusinessName": {
            "type": "string",
            "nullable": true
          },
          "legalAddress": {
            "$ref": "#/components/schemas/Address"
          }
        },
        "additionalProperties": false
      },
      "AggregatedChannelConnection": {
        "required": [
          "accountID",
          "channelID",
          "listingCollectionID",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Channel Connection ID",
            "format": "int32"
          },
          "channelID": {
            "type": "integer",
            "description": "Channel Id",
            "format": "int32"
          },
          "accountID": {
            "type": "integer",
            "description": "Account Id",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Group Name"
          },
          "listingCollectionID": {
            "type": "integer",
            "description": "Listing Collection ID",
            "format": "int32"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "True if the Channel Connection is enabled"
          },
          "marketingFee": {
            "type": "number",
            "description": "Marketing Fee",
            "format": "double"
          },
          "modifiedDate": {
            "type": "string",
            "description": "DateTime of the last change to this Channel Connection",
            "format": "date-time"
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "externalID": {
            "type": "string",
            "description": "The Unique identifier of the channel connection from the PMS (e.g. SyncLinkID in KVRS)",
            "nullable": true
          },
          "requiresCreditCard": {
            "type": "boolean",
            "description": "If true, a Credit Card is required for a Booking"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": false,
            "description": "Channel connection metadata",
            "nullable": true
          },
          "listingCollectionType": {
            "enum": [
              "BDC",
              "HomeAway",
              "AirBnb",
              "VacationRental",
              "Expedia"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ChannelConnection": {
        "required": [
          "accountID",
          "channelID",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Channel Connection ID",
            "format": "int32"
          },
          "channelID": {
            "type": "integer",
            "description": "Channel Id",
            "format": "int32"
          },
          "accountID": {
            "type": "integer",
            "description": "Account Id",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Group Name"
          },
          "listingCollectionID": {
            "type": "integer",
            "description": "Listing Collection ID",
            "format": "int32",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "True if the Channel Connection is enabled"
          },
          "aggregatedChannelConnections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregatedChannelConnection"
            },
            "description": "Aggregated Channel Connections",
            "nullable": true
          },
          "marketingFee": {
            "type": "number",
            "description": "Marketing Fee",
            "format": "double"
          },
          "modifiedDate": {
            "type": "string",
            "description": "DateTime of the last change to this Channel Connection",
            "format": "date-time"
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "externalID": {
            "type": "string",
            "description": "The Unique identifier of the channel connection from the PMS (e.g. SyncLinkID in KVRS)",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": false,
            "description": "Channel connection metadata",
            "nullable": true
          },
          "requiresCreditCard": {
            "type": "boolean",
            "description": "If true, a Credit Card is required for a Booking"
          },
          "listingCollectionType": {
            "enum": [
              "BDC",
              "HomeAway",
              "AirBnb",
              "VacationRental",
              "Expedia"
            ],
            "type": "string"
          },
          "websiteUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Channel Connection"
      },
      "ChannelConnectionResource": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ChannelConnection"
          }
        },
        "additionalProperties": false,
        "description": "Resource model for GET/DELETE scenarios"
      },
      "ChannelConnectionListing": {
        "type": "object",
        "properties": {
          "channelConnectionID": {
            "type": "integer",
            "format": "int32"
          },
          "isEnabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GetListingsResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Listing ID",
            "format": "int32"
          },
          "timeZoneID": {
            "type": "string",
            "description": "Time Zone ID",
            "nullable": true
          },
          "metadata": {
            "description": "Metadata",
            "nullable": true
          },
          "externalID": {
            "type": "string",
            "description": "External ID",
            "nullable": true
          },
          "showLocation": {
            "type": "boolean",
            "description": "Defines if the exact location of listings should be visible"
          },
          "associatedChannelConnectionIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Channel Connection IDs associated to the Listing",
            "nullable": true
          },
          "associatedChannelConnections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelConnectionListing"
            },
            "nullable": true
          },
          "listingOrigin": {
            "enum": [
              "Other",
              "Kigo"
            ],
            "type": "string",
            "description": "Tells from where the Listing will be created and managed"
          }
        },
        "additionalProperties": false
      },
      "GetListingsResultListResourceList": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetListingsResult"
            },
            "nullable": true
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ListingBookingWindowRule": {
        "type": "object",
        "properties": {
          "daysPriorToCheckInMin": {
            "type": "integer",
            "description": "It is possible to book until X days before the check-in",
            "format": "int32"
          },
          "daysPriorToCheckInMax": {
            "type": "integer",
            "description": "It is possible to book at max X days before the check-in",
            "format": "int32"
          },
          "hoursPriorToCheckIn": {
            "type": "integer",
            "description": "If the booking is made the same day, check the max time the booking can be made",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListingMaxStayRule": {
        "type": "object",
        "properties": {
          "maxNights": {
            "type": "integer",
            "description": "Max Nights",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TimeBetweenReservationsRule": {
        "required": [
          "endDate",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "nights": {
            "maximum": 7,
            "minimum": 1,
            "type": "integer",
            "description": "Minimum days between reservations",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "description": "Minimum days between reservations effective start date",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "Minimum days between reservations effective end date",
            "format": "date"
          }
        },
        "additionalProperties": false,
        "description": "Time between reservations rule"
      },
      "RateAdjustmentRule": {
        "type": "object",
        "properties": {
          "nights": {
            "type": "integer",
            "description": "Min Nights",
            "format": "int32"
          },
          "adjustmentPercentage": {
            "type": "number",
            "description": "Adjustment Percentage",
            "format": "double"
          },
          "isRequired": {
            "type": "boolean",
            "description": "When set to true strict LOS selection will be applied"
          }
        },
        "additionalProperties": false,
        "description": "Simple Rate Adjustment"
      },
      "RateAdjustmentRuleOverride": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the override",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the period when the rule is applied",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the period when the rule is applied",
            "format": "date-time"
          },
          "rateAdjustments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RateAdjustmentRule"
            },
            "description": "Rate adjustments",
            "nullable": true
          },
          "closedToArrival": {
            "type": "array",
            "items": {
              "enum": [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ],
              "type": "string"
            },
            "description": "Days of the week when cannot check in",
            "nullable": true
          },
          "closedToDeparture": {
            "type": "array",
            "items": {
              "enum": [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ],
              "type": "string"
            },
            "description": "Days of the week when cannot check out",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Rate Adjustment with Season"
      },
      "ListingRateAdjustment": {
        "type": "object",
        "properties": {
          "rateAdjustments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RateAdjustmentRule"
            },
            "description": "Rate adjustments",
            "nullable": true
          },
          "rateAdjustmentOverrides": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RateAdjustmentRuleOverride"
            },
            "description": "Seasonal rate adjustments that override rate adjustments",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains Listing Rate Adjustments"
      },
      "StaySettings": {
        "type": "object",
        "properties": {
          "bookingWindowRule": {
            "$ref": "#/components/schemas/ListingBookingWindowRule"
          },
          "maxStayRule": {
            "$ref": "#/components/schemas/ListingMaxStayRule"
          },
          "timeBetweenReservationsRule": {
            "$ref": "#/components/schemas/TimeBetweenReservationsRule"
          },
          "rateAdjustment": {
            "$ref": "#/components/schemas/ListingRateAdjustment"
          }
        },
        "additionalProperties": false
      },
      "ListingBlockedOutNightRule": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "description": "Start Application Date",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "End application date",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "BlockedOutNightsSettings": {
        "type": "object",
        "properties": {
          "isConfigured": {
            "type": "boolean",
            "description": "True if configured"
          },
          "blockedOutNights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingBlockedOutNightRule"
            },
            "description": "Blocked Out Nights",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListingFeeRule": {
        "type": "object",
        "properties": {
          "guid": {
            "type": "string",
            "description": "Rule ID",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "publicName": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "type": {
            "enum": [
              "CleaningFee",
              "SalesTax",
              "DamageWaiver",
              "RefundableDamageDeposit",
              "TravelInsurance",
              "ExtraPersonFee",
              "ProcessingFee",
              "ServiceFee",
              "UpsellFee",
              "LinenFee",
              "ResortFee",
              "CityTax",
              "DestinationFee",
              "GovernmentTax",
              "LocalCouncilTax"
            ],
            "type": "string",
            "description": "Listing Fee Rule Type"
          },
          "application": {
            "enum": [
              "PerNight",
              "PerStay",
              "PerPersonPerNight",
              "PerPersonPerStay"
            ],
            "type": "string",
            "description": "Application",
            "nullable": true
          },
          "qualification": {
            "enum": [
              "CheckIn",
              "CheckOut",
              "Inclusive",
              "PerNight",
              "BookedOn",
              "Always"
            ],
            "type": "string",
            "description": "Qualification",
            "nullable": true
          },
          "calculationMode": {
            "enum": [
              "FlatFee",
              "Percentage"
            ],
            "type": "string",
            "description": "Calculation mode",
            "nullable": true
          },
          "rateValue": {
            "type": "number",
            "description": "Rate Value",
            "format": "double",
            "nullable": true
          },
          "isMandatory": {
            "type": "boolean",
            "description": "Is Mandatory"
          },
          "guestRangeMin": {
            "type": "integer",
            "description": "Guest Range min (INCLUSIVE)\r\nIn ExtraPerson Fee, starting from this number a person is considered Extra",
            "format": "int32",
            "nullable": true
          },
          "guestRangeMax": {
            "type": "integer",
            "description": "Guest Range max (INCLUSIVE)",
            "format": "int32",
            "nullable": true
          },
          "losMin": {
            "type": "integer",
            "description": "It is used to define a range of nights in which the fee applies (e.g.: Night Tax will be applied if your LOS is at\r\nleast 2 nights)",
            "format": "int32",
            "nullable": true
          },
          "losMax": {
            "type": "integer",
            "description": "It is used to define a range of nights in which the fee applies (e.g.: Night Tax won't be applied if your LOS is\r\nmore than 7 nights)",
            "format": "int32",
            "nullable": true
          },
          "payeeID": {
            "type": "integer",
            "description": "Vendor or Recipient ID",
            "format": "int32",
            "nullable": true
          },
          "maxQuantity": {
            "type": "integer",
            "description": "Max Quantity",
            "format": "int32",
            "nullable": true
          },
          "isCommissionable": {
            "type": "boolean",
            "description": "Is Commissionable"
          },
          "isTaxable": {
            "type": "boolean",
            "description": "Is Taxable"
          },
          "typeApplication": {
            "enum": [
              "Rent",
              "RentPlusFees"
            ],
            "type": "string",
            "description": "Type application:\r\n    Rent\r\n    Rent + Fees",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeeSettings": {
        "type": "object",
        "properties": {
          "feeRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingFeeRule"
            },
            "description": "Fee rules",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Rate": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "FlatRate",
              "Percentage",
              "Hourly",
              "FlatRateMonthly"
            ],
            "type": "string",
            "description": "Rate Type"
          },
          "amount": {
            "type": "number",
            "description": "Amount",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PaymentPlanSetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Payment Plan ID",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "daysPriorToCheckinToCollectRemainder": {
            "type": "integer",
            "description": "How many days before the check-in a remainder should be sent",
            "format": "int32",
            "nullable": true
          },
          "isRefundable": {
            "type": "boolean",
            "description": "True if refundable, false otherwise"
          },
          "percentPriceMultiplier": {
            "type": "number",
            "description": "Price multiplier in percentage",
            "format": "double"
          },
          "isDefault": {
            "type": "boolean",
            "description": "True if it is the default plan setting, false otherwise"
          },
          "rateCollectedAtTimeOfBooking": {
            "$ref": "#/components/schemas/Rate"
          }
        },
        "additionalProperties": false
      },
      "ContractVersion": {
        "type": "object",
        "properties": {
          "versionID": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "isHouseRules": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ContractualTerms": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string",
            "nullable": true
          },
          "version1": {
            "$ref": "#/components/schemas/ContractVersion"
          },
          "version2": {
            "$ref": "#/components/schemas/ContractVersion"
          },
          "version3": {
            "$ref": "#/components/schemas/ContractVersion"
          },
          "rentalAgreementUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractSettings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "paymentPlans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentPlanSetting"
            },
            "nullable": true
          },
          "isMaster": {
            "type": "boolean"
          },
          "version": {
            "type": "string",
            "format": "uuid"
          },
          "section1VersionID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "section2VersionID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "section3VersionID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "section1": {
            "$ref": "#/components/schemas/ContractVersion"
          },
          "section2": {
            "$ref": "#/components/schemas/ContractVersion"
          },
          "section3": {
            "$ref": "#/components/schemas/ContractVersion"
          },
          "isConfigured": {
            "type": "boolean"
          },
          "minAge": {
            "type": "integer",
            "format": "int32"
          },
          "contractualTerms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractualTerms"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Location": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Location ID",
            "format": "int32"
          },
          "sleeps": {
            "type": "integer",
            "description": "Sleeps",
            "format": "int32"
          },
          "propertyID": {
            "type": "integer",
            "description": "Property ID",
            "format": "int32"
          },
          "registrationNumber": {
            "type": "string",
            "description": "Unit Permit or Tax ID (also could be Vacation Rental Registration Number)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Location represents a single bookable \"Unit\""
      },
      "Amenity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "v1: id will be set.\r\nv2: id will be null.",
            "format": "int32",
            "nullable": true
          },
          "text": {
            "type": "string",
            "description": "v1: text will be set.\r\nv2: text will be null.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "v1: code will be null.\r\nv2: code will be set.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RoomAmenity": {
        "type": "object",
        "properties": {
          "amenity": {
            "$ref": "#/components/schemas/Amenity"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Room": {
        "type": "object",
        "properties": {
          "sequence": {
            "type": "integer",
            "format": "int32"
          },
          "roomType": {
            "enum": [
              "Other",
              "Bedroom"
            ],
            "type": "string",
            "description": "Room Types"
          },
          "amenities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomAmenity"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Room"
      },
      "RoomList": {
        "type": "object",
        "properties": {
          "rooms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Room"
            },
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "PropertyAddress": {
        "type": "object",
        "properties": {
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PropertyDescription": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "publicName": {
            "type": "string",
            "nullable": true
          },
          "checkInInstructions": {
            "type": "string",
            "nullable": true
          },
          "neighborhood": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CheckInLocation": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CheckInInstruction": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string",
            "description": "Locale",
            "nullable": true
          },
          "text": {
            "type": "string",
            "description": "Instructions",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CheckInPolicy": {
        "type": "object",
        "properties": {
          "checkInStartTimeMinutesFromMidnight": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "checkInEndTimeMinutesFromMidnight": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "checkOutStartTimeMinutesFromMidnight": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "checkOutEndTimeMinutesFromMidnight": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "checkInMethod": {
            "enum": [
              "TwentyFourHoursReception",
              "HostCheckIn",
              "ArrangedCheckIn",
              "DoorCode",
              "LockBox",
              "SmartLock",
              "Other"
            ],
            "type": "string",
            "nullable": true
          },
          "checkInOffSite": {
            "type": "boolean"
          },
          "checkInLocation": {
            "$ref": "#/components/schemas/CheckInLocation"
          },
          "checkInInstructions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckInInstruction"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Media": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Media ID",
            "format": "int32"
          },
          "type": {
            "enum": [
              "Image",
              "Video",
              "VirtualTour"
            ],
            "type": "string",
            "description": "Type of Media"
          },
          "caption": {
            "type": "string",
            "description": "Caption",
            "nullable": true
          },
          "originalUrl": {
            "type": "string",
            "description": "Original URL",
            "nullable": true
          },
          "mediumUrl": {
            "type": "string",
            "description": "Medium Url",
            "nullable": true
          },
          "thumbnailUrl": {
            "type": "string",
            "description": "Thumbnail URL",
            "nullable": true
          },
          "originalFileSize": {
            "type": "integer",
            "description": "Original File Size",
            "format": "int32",
            "nullable": true
          },
          "originalWidth": {
            "type": "integer",
            "description": "Original Width",
            "format": "int32",
            "nullable": true
          },
          "originalHeight": {
            "type": "integer",
            "description": "Original Height",
            "format": "int32",
            "nullable": true
          },
          "originalResolution": {
            "type": "integer",
            "description": "Original Resolution",
            "format": "int32",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags",
            "nullable": true,
            "readOnly": true
          },
          "createdDate": {
            "type": "string",
            "description": "CreatedDate",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "RateScheduleNight": {
        "type": "object",
        "properties": {
          "night": {
            "type": "string",
            "description": "",
            "format": "date"
          },
          "price": {
            "type": "number",
            "description": "",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "RateSchedule": {
        "type": "object",
        "properties": {
          "paymentPlanGuid": {
            "type": "string",
            "description": "",
            "format": "uuid"
          },
          "rateScheduleNights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RateScheduleNight"
            },
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "PromotionSetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "enum": [
              "BasicPromotion",
              "CouponPromotion",
              "EarlyBookerPromotion",
              "LastMinutePromotion",
              "BusinessBookerPromotion",
              "MobileRatePromotion",
              "GeoRatePromotion"
            ],
            "type": "string"
          },
          "stayStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "stayEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "activeWeekDays": {
            "type": "array",
            "items": {
              "enum": [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ],
              "type": "string"
            },
            "nullable": true
          },
          "excludedDates": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "nullable": true
          },
          "additionalDates": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "nullable": true
          },
          "discountPercentage": {
            "type": "integer",
            "format": "int32"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "couponCode": {
            "type": "string",
            "nullable": true
          },
          "daysPriorToCheckInMin": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "daysPriorToCheckInMax": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "minStay": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "device": {
            "enum": [
              "All",
              "App"
            ],
            "type": "string",
            "nullable": true
          },
          "markets": {
            "type": "array",
            "items": {
              "enum": [
                "algeria_pos",
                "argentina_pos",
                "australia_pos",
                "belarus_pos",
                "brazil_pos",
                "canada_pos",
                "chile_pos",
                "colombia_pos",
                "domestic_pos",
                "eu_pos",
                "hong_kong_pos",
                "india_pos",
                "indonesia_pos",
                "international_pos",
                "iran_pos",
                "israel_pos",
                "japan_pos",
                "kazakhstan_pos",
                "kuwait_pos",
                "malaysia_pos",
                "mexico_pos",
                "new_zealand_pos",
                "oman_pos",
                "pakistan_pos",
                "peru_pos",
                "philippines_pos",
                "qatar_pos",
                "russia_pos",
                "saudi_arabia_pos",
                "singapore_pos",
                "south_africa_pos",
                "south_korea_pos",
                "switzerland_pos",
                "taiwan_pos",
                "thailand_pos",
                "trinidad_&_tobago_pos",
                "turkey_pos",
                "ukraine_pos",
                "united_arab_emirates_pos",
                "united_states_pos",
                "vietnam_pos"
              ],
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Review": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Review ID",
            "format": "int32"
          },
          "rating": {
            "type": "number",
            "description": "Review rating",
            "format": "double"
          },
          "text": {
            "type": "string",
            "description": "Review text",
            "nullable": true
          },
          "checkInDate": {
            "type": "string",
            "description": "Booking check-in",
            "format": "date"
          },
          "checkOutDate": {
            "type": "string",
            "description": "Booking check-out",
            "format": "date"
          },
          "reviewDate": {
            "type": "string",
            "description": "Review date",
            "format": "date"
          },
          "reviewerName": {
            "type": "string",
            "description": "Reviewer name",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Listing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Listing ID",
            "format": "int32"
          },
          "staySettings": {
            "$ref": "#/components/schemas/StaySettings"
          },
          "blockedOutNightsSettings": {
            "$ref": "#/components/schemas/BlockedOutNightsSettings"
          },
          "feeSettings": {
            "$ref": "#/components/schemas/FeeSettings"
          },
          "contractSettings": {
            "$ref": "#/components/schemas/ContractSettings"
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            },
            "description": "Locations",
            "nullable": true
          },
          "rooms": {
            "$ref": "#/components/schemas/RoomList"
          },
          "listingCollectionID": {
            "type": "integer",
            "description": "Listing Collection ID",
            "format": "int32"
          },
          "listingGroupID": {
            "type": "integer",
            "description": "Listing Group ID",
            "format": "int32",
            "nullable": true
          },
          "externalID": {
            "type": "string",
            "description": "External ID",
            "nullable": true
          },
          "propertyID": {
            "type": "integer",
            "description": "Property ID",
            "format": "int32",
            "nullable": true
          },
          "propertyOverride": {
            "type": "string",
            "description": "Property Override",
            "nullable": true
          },
          "accountID": {
            "type": "integer",
            "description": "AccountID",
            "format": "int32"
          },
          "sleeps": {
            "type": "integer",
            "description": "Sleeps",
            "format": "int32",
            "nullable": true
          },
          "metadata": {
            "type": "string",
            "description": "Metadata",
            "nullable": true
          },
          "timeZoneID": {
            "type": "string",
            "description": "Time Zone ID",
            "nullable": true
          },
          "checkInTime": {
            "type": "string",
            "description": "Check-in time",
            "format": "date-span",
            "nullable": true
          },
          "checkOutTime": {
            "type": "string",
            "description": "Check-out time",
            "format": "date-span",
            "nullable": true
          },
          "rentalAgreementUrl": {
            "type": "string",
            "description": "Rental agreement URL",
            "nullable": true
          },
          "associatedChannelConnectionIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Channel Connection IDs associated to the Listing",
            "nullable": true
          },
          "associatedChannelConnections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelConnectionListing"
            },
            "nullable": true
          },
          "acceptedPaymentMethods": {
            "type": "array",
            "items": {
              "enum": [
                "NotSet",
                "Visa",
                "MasterCard",
                "AmericanExpress",
                "Discover",
                "Other",
                "DinersClub",
                "Offline"
              ],
              "type": "string"
            },
            "description": "Credit card brands which the PMC accepts for booking payment",
            "nullable": true
          },
          "squareFeet": {
            "type": "number",
            "description": "Unit size in square feet (it is the responsibility of the consumer to convert it\r\nif for example they wanted to display square meters.",
            "format": "double",
            "nullable": true
          },
          "unitSizeType": {
            "enum": [
              "SquareFeet",
              "SquareMeters"
            ],
            "type": "string"
          },
          "categoryType": {
            "enum": [
              "Unknown",
              "Townhouse",
              "Condominium",
              "Hotel",
              "Apartment",
              "Bungalow",
              "Castle",
              "Chalet",
              "Cottage",
              "Farmhouse",
              "Lodge",
              "Studio",
              "Villa",
              "Barn",
              "Houseboat",
              "Cabin",
              "Yacht",
              "Aparthotel",
              "House",
              "Resort",
              "Treehouse",
              "Windmill",
              "Yurt"
            ],
            "type": "string",
            "description": "Category type of the property (e.g. Condo, House, Townhouse)"
          },
          "localTaxID": {
            "type": "string",
            "nullable": true
          },
          "bedrooms": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "bathrooms": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "halfBathrooms": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "floor": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "parkingSpaces": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "garageSpaces": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "yearBuilt": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "stories": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/PropertyAddress"
          },
          "descriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDescription"
            },
            "nullable": true
          },
          "checkInPolicy": {
            "$ref": "#/components/schemas/CheckInPolicy"
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Media"
            },
            "nullable": true
          },
          "amenities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Amenity"
            },
            "nullable": true
          },
          "defaultRateSchedule": {
            "$ref": "#/components/schemas/RateSchedule"
          },
          "sunriseDate": {
            "type": "string",
            "description": "The date when the listing can start being occupied",
            "format": "date-time",
            "nullable": true
          },
          "sunsetDate": {
            "type": "string",
            "description": "The date when the listing must end being occupied",
            "format": "date-time",
            "nullable": true
          },
          "listingOrigin": {
            "enum": [
              "Other",
              "Kigo"
            ],
            "type": "string",
            "description": "Tells from where the Listing will be created and managed"
          },
          "showLocation": {
            "type": "boolean",
            "description": "Defines if the exact location of listings should be visible"
          },
          "promotionSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromotionSetting"
            },
            "description": "All promotions the listing is associated to",
            "nullable": true
          },
          "licenseNumber": {
            "type": "string",
            "nullable": true
          },
          "reviews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Review"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Listing"
      },
      "ListingResource": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Listing"
          }
        },
        "additionalProperties": false,
        "description": "Resource model for GET/DELETE scenarios"
      },
      "AvailabilityDayUnitCount": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total",
            "format": "int32"
          },
          "blocked": {
            "type": "integer",
            "description": "Blocked",
            "format": "int32"
          },
          "booked": {
            "type": "integer",
            "description": "Booked",
            "format": "int32"
          },
          "bookable": {
            "type": "integer",
            "description": "Bookable",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AvailabilityDay": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Date",
            "format": "date"
          },
          "unitCount": {
            "$ref": "#/components/schemas/AvailabilityDayUnitCount"
          },
          "closedToArrival": {
            "type": "boolean",
            "description": "Is closed to Arrival (check-in not allowed) (but it can be still available)"
          },
          "closedToDeparture": {
            "type": "boolean",
            "description": "Is closed to the departure (check-out not allowed) (but it can be still available)"
          },
          "minNights": {
            "type": "integer",
            "description": "Min Nights",
            "format": "int32"
          },
          "maxNights": {
            "type": "integer",
            "description": "Max Nights",
            "format": "int32"
          },
          "isAvailable": {
            "type": "boolean",
            "description": "True if the day is available for booking, false otherwise"
          }
        },
        "additionalProperties": false
      },
      "Availability": {
        "type": "object",
        "properties": {
          "dates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailabilityDay"
            },
            "description": "Availability Calendar",
            "nullable": true
          },
          "isValid": {
            "type": "boolean",
            "description": "If the Availability is valid"
          },
          "errorMessage": {
            "type": "string",
            "description": "Optional Error Message",
            "nullable": true
          },
          "setupError": {
            "enum": [
              "InvalidListing",
              "StaySettingsNotSet",
              "BookingWindowNotSet",
              "MaxStayNotSet",
              "PriceNotAvailable",
              "ClosedToArrivalOrDeparture",
              "OutOfSunriseSunset",
              "ConnectionSetupError"
            ],
            "type": "string",
            "description": "Optional Error Code related to the Listing setup that is checked",
            "nullable": true
          },
          "constraintError": {
            "enum": [
              "NightNotAvailable",
              "MinStayNotMet",
              "MinAdvanceNoticeNotMet",
              "OutsideOfBookingWindow",
              "MaxStayExceeded",
              "MaxGuestsExceeded",
              "BlockOutNight",
              "CutOffTimeNotMet",
              "PropertyClosed"
            ],
            "type": "string",
            "description": "Optional Error Code related to setup rules",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Availability"
      },
      "AvailabilityResource": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Availability"
          }
        },
        "additionalProperties": false,
        "description": "Resource model for GET/DELETE scenarios"
      },
      "ListingImpact": {
        "type": "object",
        "properties": {
          "price": {
            "type": "boolean",
            "description": "True if Price has changed, false otherwise"
          },
          "availability": {
            "type": "boolean",
            "description": "True if Availability has changed, false otherwise"
          },
          "content": {
            "type": "boolean",
            "description": "True if Content has changed, false otherwise"
          },
          "status": {
            "type": "boolean",
            "description": "True if Status has changed, false otherwise"
          }
        },
        "additionalProperties": false
      },
      "ListingDiffImpact": {
        "type": "object",
        "properties": {
          "channelConnectionID": {
            "type": "integer",
            "description": "Channel Connection ID (compound key) where Price, Availability or Content has changed",
            "format": "int32"
          },
          "listingID": {
            "type": "integer",
            "description": "Listing ID (compound key) where Price, Availability or Content has changed",
            "format": "int32"
          },
          "impacts": {
            "$ref": "#/components/schemas/ListingImpact"
          }
        },
        "additionalProperties": false
      },
      "GetDiffResult": {
        "type": "object",
        "properties": {
          "nextModifiedAfter": {
            "type": "string",
            "description": "Next TimeStamp to be used for the next call",
            "format": "date-time"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingDiffImpact"
            },
            "description": "Listings where Price, Availability or Content has changed",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CheckAvailabilityOutput": {
        "type": "object",
        "properties": {
          "isAvailable": {
            "type": "boolean",
            "description": "If there is Availability and no errors occurred"
          },
          "errorMessage": {
            "type": "string",
            "description": "Optional Error Message",
            "nullable": true
          },
          "setupError": {
            "enum": [
              "InvalidListing",
              "StaySettingsNotSet",
              "BookingWindowNotSet",
              "MaxStayNotSet",
              "PriceNotAvailable",
              "ClosedToArrivalOrDeparture",
              "OutOfSunriseSunset",
              "ConnectionSetupError"
            ],
            "type": "string",
            "description": "Optional Error Code related to the Listing setup that is checked",
            "nullable": true
          },
          "constraintError": {
            "enum": [
              "NightNotAvailable",
              "MinStayNotMet",
              "MinAdvanceNoticeNotMet",
              "OutsideOfBookingWindow",
              "MaxStayExceeded",
              "MaxGuestsExceeded",
              "BlockOutNight",
              "CutOffTimeNotMet",
              "PropertyClosed"
            ],
            "type": "string",
            "description": "Optional Error Code related to setup rules",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A Quote contains error information, property data, and a statement"
      },
      "CheckAvailabilityOutputResource": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/CheckAvailabilityOutput"
          }
        },
        "additionalProperties": false,
        "description": "Resource model for GET/DELETE scenarios"
      },
      "RateScheduleResource": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/RateSchedule"
          }
        },
        "additionalProperties": false,
        "description": "Resource model for GET/DELETE scenarios"
      },
      "PostThreadRequest": {
        "required": [
          "channelConnectionID"
        ],
        "type": "object",
        "properties": {
          "threadExternalKey": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "channelConnectionID": {
            "type": "integer",
            "format": "int32"
          },
          "listingID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "checkIn": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "checkOut": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "locationBookingID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "deadlineForResponse": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "guestExternalKey": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "guestFirstName": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "guestLastName": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "guestEmail": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "guestLocale": {
            "maxLength": 5,
            "type": "string",
            "nullable": true
          },
          "guestLocation": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "guestUserID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": false,
            "description": "Metadata",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ThreadModelResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PostThreadResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "enum": [
              "ListingNotFound",
              "ChannelConnectionNotFound",
              "ThreadNotFound",
              "InvalidBooking",
              "InvalidDates",
              "UsedBooking"
            ],
            "type": "string",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/ThreadModelResponse"
          }
        },
        "additionalProperties": false,
        "description": "Response to POST /messaging"
      },
      "PostThreadResponseResource": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/PostThreadResponse"
          }
        },
        "additionalProperties": false,
        "description": "Resource model for GET/DELETE scenarios"
      },
      "UserMessageAttachment": {
        "type": "object",
        "properties": {
          "externalURL": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostUserMessageRequest": {
        "required": [
          "sender",
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "messageExternalKey": {
            "type": "string",
            "nullable": true
          },
          "sentDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "sender": {
            "enum": [
              "Guest",
              "Host",
              "CoHost",
              "CoGuest",
              "AutoResponder"
            ],
            "type": "string"
          },
          "senderExternalKey": {
            "type": "string",
            "nullable": true
          },
          "senderFirstName": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "senderLastName": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "senderEmail": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "senderLocale": {
            "maxLength": 5,
            "type": "string",
            "nullable": true
          },
          "senderLocation": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "senderUserID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMessageAttachment"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PostUserMessageResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "enum": [
              "ThreadNotFound",
              "SenderUserNotFound",
              "UserMessageNotFound"
            ],
            "type": "string",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/UserMessage"
          }
        },
        "additionalProperties": false
      },
      "PostUserMessageResponseResource": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/PostUserMessageResponse"
          }
        },
        "additionalProperties": false,
        "description": "Resource model for GET/DELETE scenarios"
      },
      "PutUserMessageRequest": {
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "Pending",
              "Delivered",
              "Failed",
              "Expired"
            ],
            "type": "string",
            "nullable": true
          },
          "sentDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutUserMessageResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "enum": [
              "ThreadNotFound",
              "SenderUserNotFound",
              "UserMessageNotFound"
            ],
            "type": "string",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/UserMessage"
          }
        },
        "additionalProperties": false
      },
      "PutUserMessageResponseResource": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/PutUserMessageResponse"
          }
        },
        "additionalProperties": false,
        "description": "Resource model for GET/DELETE scenarios"
      },
      "UserMessageDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "threadID": {
            "type": "integer",
            "format": "int64"
          },
          "threadExternalKey": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "messageExternalKey": {
            "type": "string",
            "nullable": true
          },
          "inReplyToUserMessageID": {
            "type": "integer",
            "format": "int32"
          },
          "source": {
            "enum": [
              "Kigo",
              "External"
            ],
            "type": "string"
          },
          "status": {
            "enum": [
              "Pending",
              "Delivered",
              "Failed",
              "Expired"
            ],
            "type": "string"
          },
          "sentDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "sender": {
            "enum": [
              "Guest",
              "Host",
              "CoHost",
              "CoGuest",
              "AutoResponder"
            ],
            "type": "string"
          },
          "senderExternalKey": {
            "type": "string",
            "nullable": true
          },
          "senderFirstName": {
            "type": "string",
            "nullable": true
          },
          "senderLastName": {
            "type": "string",
            "nullable": true
          },
          "senderEmail": {
            "type": "string",
            "nullable": true
          },
          "senderLocale": {
            "type": "string",
            "nullable": true
          },
          "senderLocation": {
            "type": "string",
            "nullable": true
          },
          "senderUserID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMessageAttachment"
            },
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": false,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetUserMessageResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "enum": [
              "ThreadNotFound",
              "SenderUserNotFound",
              "UserMessageNotFound"
            ],
            "type": "string",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMessageDetail"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetUserMessageResponseResource": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/GetUserMessageResponse"
          }
        },
        "additionalProperties": false,
        "description": "Resource model for GET/DELETE scenarios"
      },
      "PromotionSettingWithAssociatedListings": {
        "type": "object",
        "properties": {
          "assignedListingIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "enum": [
              "BasicPromotion",
              "CouponPromotion",
              "EarlyBookerPromotion",
              "LastMinutePromotion",
              "BusinessBookerPromotion",
              "MobileRatePromotion",
              "GeoRatePromotion"
            ],
            "type": "string"
          },
          "stayStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "stayEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "activeWeekDays": {
            "type": "array",
            "items": {
              "enum": [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ],
              "type": "string"
            },
            "nullable": true
          },
          "excludedDates": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "nullable": true
          },
          "additionalDates": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "nullable": true
          },
          "discountPercentage": {
            "type": "integer",
            "format": "int32"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "couponCode": {
            "type": "string",
            "nullable": true
          },
          "daysPriorToCheckInMin": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "daysPriorToCheckInMax": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "minStay": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "device": {
            "enum": [
              "All",
              "App"
            ],
            "type": "string",
            "nullable": true
          },
          "markets": {
            "type": "array",
            "items": {
              "enum": [
                "algeria_pos",
                "argentina_pos",
                "australia_pos",
                "belarus_pos",
                "brazil_pos",
                "canada_pos",
                "chile_pos",
                "colombia_pos",
                "domestic_pos",
                "eu_pos",
                "hong_kong_pos",
                "india_pos",
                "indonesia_pos",
                "international_pos",
                "iran_pos",
                "israel_pos",
                "japan_pos",
                "kazakhstan_pos",
                "kuwait_pos",
                "malaysia_pos",
                "mexico_pos",
                "new_zealand_pos",
                "oman_pos",
                "pakistan_pos",
                "peru_pos",
                "philippines_pos",
                "qatar_pos",
                "russia_pos",
                "saudi_arabia_pos",
                "singapore_pos",
                "south_africa_pos",
                "south_korea_pos",
                "switzerland_pos",
                "taiwan_pos",
                "thailand_pos",
                "trinidad_&_tobago_pos",
                "turkey_pos",
                "ukraine_pos",
                "united_arab_emirates_pos",
                "united_states_pos",
                "vietnam_pos"
              ],
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PromotionSettingWithAssociatedListingsListResourceList": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromotionSettingWithAssociatedListings"
            },
            "nullable": true
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ValidationErrorItem": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "nullable": true
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ValidationErrorException": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationErrorItem"
            },
            "nullable": true
          },
          "stackTrace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true,
            "readOnly": true
          },
          "innerException": {
            "nullable": true
          },
          "helpLink": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "hResult": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetPropertySummaryAddressDto": {
        "type": "object",
        "properties": {
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetPropertySummaryVm": {
        "type": "object",
        "properties": {
          "propertyID": {
            "type": "integer",
            "format": "int32"
          },
          "propertyName": {
            "type": "string",
            "nullable": true
          },
          "propertyType": {
            "enum": [
              "Unknown",
              "Townhouse",
              "Condominium",
              "Hotel",
              "Apartment",
              "Bungalow",
              "Castle",
              "Chalet",
              "Cottage",
              "Farmhouse",
              "Lodge",
              "Studio",
              "Villa",
              "Barn",
              "Houseboat",
              "Cabin",
              "Yacht",
              "Aparthotel",
              "House",
              "Resort",
              "Treehouse",
              "Windmill",
              "Yurt"
            ],
            "type": "string"
          },
          "numberOfUnits": {
            "type": "integer",
            "format": "int32"
          },
          "address": {
            "$ref": "#/components/schemas/GetPropertySummaryAddressDto"
          }
        },
        "additionalProperties": false
      },
      "CreatePropertyCommand": {
        "type": "object",
        "properties": {
          "internalName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePropertyResponseVm": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "propertyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePropertyResponseVmCommandOkEnvelope": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/CreatePropertyResponseVm"
          },
          "success": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GetAmenitiesMainAmenityVm": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "specificCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetAmenitiesMainAmenityVmListResourceList": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAmenitiesMainAmenityVm"
            },
            "nullable": true
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GetPropertyAmentiesVm": {
        "type": "object",
        "properties": {
          "amenities": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutPropertyAmenitiesCommand": {
        "type": "object",
        "properties": {
          "amenities": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BooleanCommandOkEnvelope": {
        "type": "object",
        "properties": {
          "value": {
            "type": "boolean"
          },
          "success": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GetCheckInPolicyLocationDto": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "region": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetCheckInPolicyInstructions": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetCheckInPolicyVm": {
        "type": "object",
        "properties": {
          "checkInStartTimeMinutesFromMidnight": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "checkInEndTimeMinutesFromMidnight": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "checkOutStartTimeMinutesFromMidnight": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "checkOutEndTimeMinutesFromMidnight": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "checkInMethod": {
            "enum": [
              "TwentyFourHoursReception",
              "HostCheckIn",
              "ArrangedCheckIn",
              "DoorCode",
              "LockBox",
              "SmartLock",
              "Other"
            ],
            "type": "string",
            "nullable": true
          },
          "checkInOffSite": {
            "type": "boolean"
          },
          "checkInLocation": {
            "$ref": "#/components/schemas/GetCheckInPolicyLocationDto"
          },
          "checkInInstructions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetCheckInPolicyInstructions"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutCheckInPolicyLocationDto": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "region": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutCheckInPolicyCheckInInstructionsDto": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutCheckInPolicyCommand": {
        "type": "object",
        "properties": {
          "checkInStartTimeMinutesFromMidnight": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "checkInEndTimeMinutesFromMidnight": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "checkOutStartTimeMinutesFromMidnight": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "checkOutEndTimeMinutesFromMidnight": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "checkInMethod": {
            "enum": [
              "TwentyFourHoursReception",
              "HostCheckIn",
              "ArrangedCheckIn",
              "DoorCode",
              "LockBox",
              "SmartLock",
              "Other"
            ],
            "type": "string",
            "nullable": true
          },
          "checkInOffSite": {
            "type": "boolean"
          },
          "checkInLocation": {
            "$ref": "#/components/schemas/PutCheckInPolicyLocationDto"
          },
          "checkInInstructions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PutCheckInPolicyCheckInInstructionsDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetPropertyDescriptionsDescriptionVm": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "neighborhood": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetPropertyDescriptionsVm": {
        "type": "object",
        "properties": {
          "descriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetPropertyDescriptionsDescriptionVm"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutPropertyDescriptionsDescriptionDto": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "neighborhood": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutPropertyDescriptionsCommand": {
        "type": "object",
        "properties": {
          "descriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PutPropertyDescriptionsDescriptionDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetPropertyDetailsPublicNameDto": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string",
            "nullable": true
          },
          "publicName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetPropertyDetailsVm": {
        "type": "object",
        "properties": {
          "propertyNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetPropertyDetailsPublicNameDto"
            },
            "nullable": true
          },
          "internalName": {
            "type": "string",
            "nullable": true
          },
          "categoryType": {
            "enum": [
              "Unknown",
              "Townhouse",
              "Condominium",
              "Hotel",
              "Apartment",
              "Bungalow",
              "Castle",
              "Chalet",
              "Cottage",
              "Farmhouse",
              "Lodge",
              "Studio",
              "Villa",
              "Barn",
              "Houseboat",
              "Cabin",
              "Yacht",
              "Aparthotel",
              "House",
              "Resort",
              "Treehouse",
              "Windmill",
              "Yurt"
            ],
            "type": "string"
          },
          "yearBuilt": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sizeAmount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sizeUnit": {
            "enum": [
              "SquareFeet",
              "SquareMeters"
            ],
            "type": "string"
          },
          "floor": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutPropertyDetailsPublicNameDto": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string",
            "nullable": true
          },
          "publicName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutPropertyDetailsCommand": {
        "type": "object",
        "properties": {
          "propertyNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PutPropertyDetailsPublicNameDto"
            },
            "nullable": true
          },
          "internalName": {
            "type": "string",
            "nullable": true
          },
          "categoryType": {
            "enum": [
              "Unknown",
              "Townhouse",
              "Condominium",
              "Hotel",
              "Apartment",
              "Bungalow",
              "Castle",
              "Chalet",
              "Cottage",
              "Farmhouse",
              "Lodge",
              "Studio",
              "Villa",
              "Barn",
              "Houseboat",
              "Cabin",
              "Yacht",
              "Aparthotel",
              "House",
              "Resort",
              "Treehouse",
              "Windmill",
              "Yurt"
            ],
            "type": "string"
          },
          "yearBuilt": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sizeAmount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sizeUnit": {
            "enum": [
              "SquareFeet",
              "SquareMeters"
            ],
            "type": "string"
          },
          "floor": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutPropertyAddressCommand": {
        "type": "object",
        "properties": {
          "address1": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "region": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "float"
          },
          "longitude": {
            "type": "number",
            "format": "float"
          }
        },
        "additionalProperties": false
      },
      "GetPropertyAddressVm": {
        "type": "object",
        "properties": {
          "address1": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "region": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetHouseRulesVm": {
        "type": "object",
        "properties": {
          "smokingAllowed": {
            "type": "boolean"
          },
          "kidsAllowed": {
            "type": "boolean"
          },
          "familyFriendly": {
            "type": "boolean"
          },
          "petsAllowed": {
            "type": "boolean"
          },
          "partiesAndEventsAllowed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PutHouseRulesCommand": {
        "type": "object",
        "properties": {
          "smokingAllowed": {
            "type": "boolean"
          },
          "kidsAllowed": {
            "type": "boolean"
          },
          "familyFriendly": {
            "type": "boolean"
          },
          "petsAllowed": {
            "type": "boolean"
          },
          "partiesAndEventsAllowed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PutLegalInfoCommand": {
        "type": "object",
        "properties": {
          "localTaxID": {
            "type": "string",
            "nullable": true
          },
          "licenseNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetLegalInfoVm": {
        "type": "object",
        "properties": {
          "localTaxID": {
            "type": "string",
            "nullable": true
          },
          "licenseNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostPropertyMediaCommand": {
        "type": "object",
        "properties": {
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "image": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Int32CommandOkEnvelope": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int32"
          },
          "success": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GetPropertyMediasMediaDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "enum": [
              "Image",
              "Video",
              "VirtualTour"
            ],
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "originalURL": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetPropertyMediaVm": {
        "type": "object",
        "properties": {
          "medias": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetPropertyMediasMediaDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutPropertyMediaTagsAndOrderCommand": {
        "type": "object",
        "properties": {
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetMediaTagsTagVm": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetPropertyRoomsBedDto": {
        "type": "object",
        "properties": {
          "bedType": {
            "enum": [
              "Other",
              "BunkTwin",
              "SofaBedDouble",
              "SofaBedSingle",
              "Futon",
              "Crib",
              "ChildBed",
              "Single",
              "Twin",
              "Double",
              "Queen",
              "King"
            ],
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetPropertyRoomsRoomDto": {
        "type": "object",
        "properties": {
          "roomType": {
            "enum": [
              "Other",
              "Bedroom"
            ],
            "type": "string",
            "description": "Room Types"
          },
          "beds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetPropertyRoomsBedDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetPropertyRoomsVm": {
        "type": "object",
        "properties": {
          "bathrooms": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "halfBathrooms": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxOccupancy": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "minimumMainGuestAge": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hasKitchen": {
            "type": "boolean",
            "nullable": true
          },
          "rooms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetPropertyRoomsRoomDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutPropertyRoomsBedDto": {
        "type": "object",
        "properties": {
          "bedType": {
            "enum": [
              "Other",
              "BunkTwin",
              "SofaBedDouble",
              "SofaBedSingle",
              "Futon",
              "Crib",
              "ChildBed",
              "Single",
              "Twin",
              "Double",
              "Queen",
              "King"
            ],
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PutPropertyRoomsRoomDto": {
        "type": "object",
        "properties": {
          "roomType": {
            "enum": [
              "Other",
              "Bedroom"
            ],
            "type": "string",
            "description": "Room Types"
          },
          "beds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PutPropertyRoomsBedDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutPropertyRoomsCommand": {
        "type": "object",
        "properties": {
          "bathrooms": {
            "type": "integer",
            "format": "int32"
          },
          "halfBathrooms": {
            "type": "integer",
            "format": "int32"
          },
          "maxOccupancy": {
            "type": "integer",
            "format": "int32"
          },
          "minimumMainGuestAge": {
            "type": "integer",
            "format": "int32"
          },
          "hasKitchen": {
            "type": "boolean"
          },
          "rooms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PutPropertyRoomsRoomDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OptionalFee": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Fee ID",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "QuoteRequest": {
        "required": [
          "checkInDate",
          "checkOutDate",
          "listingID",
          "numAdults"
        ],
        "type": "object",
        "properties": {
          "listingID": {
            "type": "integer",
            "description": "Listing ID",
            "format": "int32"
          },
          "checkInDate": {
            "type": "string",
            "description": "Check-In Date",
            "format": "date"
          },
          "checkOutDate": {
            "type": "string",
            "description": "Check-Out Date",
            "format": "date"
          },
          "couponCode": {
            "type": "string",
            "description": "Coupon code of the promotion",
            "nullable": true
          },
          "numAdults": {
            "maximum": 99,
            "minimum": 1,
            "type": "integer",
            "description": "Number of Adults",
            "format": "int32"
          },
          "numChildren": {
            "maximum": 99,
            "minimum": 0,
            "type": "integer",
            "description": "Number of Children",
            "format": "int32"
          },
          "computeDefaultPlanOnly": {
            "type": "boolean",
            "description": "Whether all plans or just the default one should be given (optional, defaults to false)"
          },
          "requestedOptionalFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OptionalFee"
            },
            "description": "The optional fee(s) that you want to consider in the quote",
            "nullable": true
          },
          "leadGuid": {
            "type": "string",
            "description": "Optional Lead (Guid) reference",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "PackedStatement": {
        "type": "object",
        "properties": {
          "statementLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatementDetail"
            },
            "description": "Statement Details",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Statement presented to the Channel"
      },
      "PromotionCoupon": {
        "type": "object",
        "properties": {
          "couponCode": {
            "type": "string",
            "nullable": true
          },
          "isApplied": {
            "type": "boolean"
          },
          "error": {
            "enum": [
              "InvalidCode",
              "InvalidNights",
              "InvalidMinStay"
            ],
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QuotePlan": {
        "type": "object",
        "properties": {
          "guid": {
            "type": "string",
            "description": "Guid",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean",
            "description": "True if it is the default plan setting, false otherwise"
          },
          "availability": {
            "$ref": "#/components/schemas/CheckAvailabilityOutput"
          },
          "statement": {
            "$ref": "#/components/schemas/PackedStatement"
          },
          "deposits": {
            "$ref": "#/components/schemas/DepositStatement"
          },
          "depositSchedule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduledTransaction"
            },
            "description": "A collection of refundable payments",
            "nullable": true
          },
          "paymentSchedule": {
            "$ref": "#/components/schemas/PaymentSchedule"
          },
          "cancellationPolicy": {
            "$ref": "#/components/schemas/CancellationPolicy"
          },
          "rentalAgreementUrl": {
            "type": "string",
            "description": "Terms And Conditions Url (Taken from Contract Plan)",
            "nullable": true
          },
          "coupon": {
            "$ref": "#/components/schemas/PromotionCoupon"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "Quote": {
        "type": "object",
        "properties": {
          "guid": {
            "type": "string",
            "description": "Guid used for referencing the Quote in the call for book",
            "format": "uuid"
          },
          "success": {
            "type": "boolean",
            "description": "If the Quote is valid"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error Message",
            "nullable": true
          },
          "errorCode": {
            "enum": [
              "Invalid",
              "AlreadyUsed",
              "Expired",
              "InvalidListing",
              "LocationNotFound",
              "PlanNotFound",
              "PriceNotAvailable",
              "InvalidRatePlans",
              "InvalidContract",
              "InvalidFees"
            ],
            "type": "string",
            "description": "Error Code",
            "nullable": true
          },
          "currency": {
            "enum": [
              "Unknown",
              "USD",
              "AUD",
              "BRL",
              "CAD",
              "CNY",
              "DKK",
              "EUR",
              "HKD",
              "INR",
              "JPY",
              "MYR",
              "MXN",
              "NZD",
              "NOK",
              "SGD",
              "ZAR",
              "KRW",
              "LKR",
              "SEK",
              "CHF",
              "TWD",
              "THB",
              "GBP",
              "EGP",
              "XPF",
              "AED",
              "ANG",
              "ARS",
              "BGN",
              "BHD",
              "BOB",
              "BTN",
              "BZD",
              "CLP",
              "COP",
              "CRC",
              "CZK",
              "GNF",
              "GTQ",
              "GYD",
              "HNL",
              "HRK",
              "HUF",
              "IDR",
              "ILS",
              "ISK",
              "JOD",
              "KHR",
              "KWD",
              "KZT",
              "LAK",
              "LBP",
              "MAD",
              "MOP",
              "NIO",
              "OMR",
              "PAB",
              "PEN",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RUB",
              "SAR",
              "SRD",
              "TND",
              "TRY",
              "UAH",
              "UYU",
              "VEF",
              "VND",
              "AZN"
            ],
            "type": "string",
            "description": "Currency"
          },
          "acceptedPaymentMethods": {
            "type": "array",
            "items": {
              "enum": [
                "NotSet",
                "Visa",
                "MasterCard",
                "AmericanExpress",
                "Discover",
                "Other",
                "DinersClub",
                "Offline"
              ],
              "type": "string"
            },
            "description": "",
            "nullable": true
          },
          "validUntil": {
            "type": "string",
            "description": "Last date the Quote may be converted to a Booking",
            "format": "date-time",
            "nullable": true
          },
          "plans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuotePlan"
            },
            "description": "",
            "nullable": true
          },
          "paymentGateway": {
            "$ref": "#/components/schemas/PaymentGateway"
          },
          "listingID": {
            "type": "integer",
            "description": "Listing ID",
            "format": "int32"
          },
          "checkInDate": {
            "type": "string",
            "description": "Check-In Date",
            "format": "date"
          },
          "checkOutDate": {
            "type": "string",
            "description": "Check-Out Date",
            "format": "date"
          },
          "numAdults": {
            "type": "integer",
            "description": "Number of Adults",
            "format": "int32"
          },
          "numChildren": {
            "type": "integer",
            "description": "Number of Children",
            "format": "int32"
          },
          "bookedOnDate": {
            "type": "string",
            "description": "Booking Date (optional, UTC)",
            "format": "date-time",
            "nullable": true
          },
          "requestedOptionalFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OptionalFee"
            },
            "description": "Guid(s) of the optional fee(s) that you want to consider in the quote",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A Quote contains error information, property data, and a statement"
      },
      "QuoteResource": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/Quote"
          }
        },
        "additionalProperties": false,
        "description": "Resource model for GET/DELETE scenarios"
      },
      "PostBookingFromQuoteRequest": {
        "required": [
          "listingID",
          "paymentPlanGuid",
          "renter"
        ],
        "type": "object",
        "properties": {
          "listingID": {
            "type": "integer",
            "description": "Listing ID",
            "format": "int32"
          },
          "paymentPlanGuid": {
            "type": "string",
            "description": "Payment Plan Guid",
            "format": "uuid"
          },
          "renter": {
            "$ref": "#/components/schemas/PostPersonRequest"
          },
          "creditCard": {
            "$ref": "#/components/schemas/CreditCard"
          },
          "externalBookingID": {
            "type": "string",
            "description": "External ID coming from the Channel",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Notes",
            "nullable": true
          },
          "specialNeeds": {
            "type": "string",
            "description": "Special Needs",
            "nullable": true
          },
          "pointOfSaleCode": {
            "type": "string",
            "description": "Point of Sale (code)",
            "nullable": true
          },
          "paymentCollectionMode": {
            "enum": [
              "PmcCollect",
              "VirtualCc",
              "ChannelCollect",
              "PmcOfflineCollect"
            ],
            "type": "string",
            "description": "Defines how the booking will be paid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "SetPropertyRateDto": {
        "required": [
          "endDate",
          "rate",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "rate": {
            "type": "number",
            "format": "double"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "GetPropertyRateVm": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "rate": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AmenityListResourceList": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Amenity"
            },
            "nullable": true
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Country": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "2-letter ISO Country Code",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Country"
      },
      "CountryListResourceList": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Country"
            },
            "nullable": true
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Tag": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TagListResourceList": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "nullable": true
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "Kigo Pro API",
        "flows": {
          "clientCredentials": {
            "authorizationUrl": "https://auth.kigo.net/connect/authorize",
            "tokenUrl": "https://auth.kigo.net/connect/token",
            "scopes": {
              "cm.api": "Kigo Pro - Channel Manager API Access",
              "automation.api": "Kigo Pro - Automation API Access",
              "developer.api": "Kigo Pro - Developer API Access",
              "pro.api": "(deprecated) Kigo Pro API Access"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "oauth2": [
        "cm.api",
        "pro.api",
        "automation.api",
        "developer.api"
      ]
    }
  ]
}